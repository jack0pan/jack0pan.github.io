<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Pan</title>
  
  <subtitle>Jack Pan的个人网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jack0pan.github.io/"/>
  <updated>2018-08-28T16:16:47.360Z</updated>
  <id>http://jack0pan.github.io/</id>
  
  <author>
    <name>Jack Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>金融业网络安全攻防大赛Writeups</title>
    <link href="http://jack0pan.github.io/2018/08/09/%E9%87%91%E8%9E%8D%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9BWriteups/"/>
    <id>http://jack0pan.github.io/2018/08/09/金融业网络安全攻防大赛Writeups/</id>
    <published>2018-08-09T14:03:25.000Z</published>
    <updated>2018-08-28T16:16:47.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="金融业网络安全攻防大赛Writeups"><a href="#金融业网络安全攻防大赛Writeups" class="headerlink" title="金融业网络安全攻防大赛Writeups"></a>金融业网络安全攻防大赛Writeups</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Mysterious-Picture"><a href="#Mysterious-Picture" class="headerlink" title="Mysterious Picture"></a>Mysterious Picture</h3><p>在公司最近的一次项目中，关键数据疑似泄漏。经过某种手段已经把嫌疑锁定在嫌疑人A身上了，但是嫌疑人A的U盘中除了一张图片之外，没有发现任何相关的信息。你能帮助公司找到他泄漏数据的确凿证据吗？</p><p>题目给了一张图片，用StegSolve打开，每个通道都过一遍，发现rgb的最低位都有异常。</p><p>打开Analyse -&gt; Data Extract，选中最低位，直接Preview，没有flag。切换Bit Plane Order，切到BGR，发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do u know how the bad man send secret messages now? flag&#123;babylsbstego_cannot_be_easier!%^%^&amp;&#125;.</span><br></pre></td></tr></table></figure></p><h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>MD5($a) = d78b6f30225cdc811adfe8d4e7c9fd34<br>MD5($b) = 8fc42c6ddf9966db3b09e84365034357<br>MD5($c) = 5f295bce38d311f26a96eb811192f391</p><p>flag{$a_$b_$c}</p><p>直接在网上搜索得到：<br>$a = hack<br>$b = the<br>$c = planet<br>所以flag是：<code>flag{hack_the_planet}</code></p><h3 id="Backdoor"><a href="#Backdoor" class="headerlink" title="Backdoor"></a>Backdoor</h3><p>某银行安全团队在分析流量日志的过程中，发现了在 DMZ 区域的服务器被黑客入侵且放置了后门。运维部门提取出了流量中最可疑的部分，据有经验的安全专家分析，这里面应该包含了黑客上传的入侵证据文件，你能找到黑客入侵过程中出现了什么证据信息吗？</p><p>分析http流，把cmdcmdcmd参数base64解密，找到一段有用的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(<span class="string">"display_errors"</span>,<span class="string">"0"</span>);</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(PHP_VERSION&lt;<span class="string">'5.3.0'</span>)&#123;</span><br><span class="line">  @set_magic_quotes_runtime(<span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">"X@Y"</span>);</span><br><span class="line">$f=<span class="string">'C:\\phpStudy\\WWW\\uploads\\reverseshell.zip'</span>;</span><br><span class="line">$c=$_POST[<span class="string">"z1"</span>];</span><br><span class="line">$c=str_replace(<span class="string">"\r"</span>,<span class="string">""</span>,$c);</span><br><span class="line">$c=str_replace(<span class="string">"\n"</span>,<span class="string">""</span>,$c);</span><br><span class="line">$buf=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($c);$i+=<span class="number">2</span>)</span><br><span class="line">$buf.=urldecode(<span class="string">'%'</span>.substr($c,$i,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">echo</span>(@fwrite(fopen($f,<span class="string">'w'</span>),$buf)?<span class="string">'1'</span>:<span class="string">'0'</span>);;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">"X@Y"</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></table></figure></p><p>代码意思就是z1参数写入文件，z1参数为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">504B0304140000000800288DC34C58BD2C542C0500002C0700000E000000313532383031383837352E706E676D956D54926718C7B12C4D33ED45CD94B034E9D4C9B6F2A5D4503B1A5A274CB1B2E341A798D35EA82D4D110173B9AD48C8B9B2A395A5A8684C84694D54B0B65646BA91C0A333C2487C8530ECE909151C7E4BE19CDFFD7CB8CF7D5FE77F5FD7F5BF9E2B47306807BB0D763018CC213A2A220E06B35A3FBF6C9798766CD59401186CF9547444787CEE6D8D3C96FE6ECFCA659D3DA95AAAEACD52F6CAA8412F955F03CA66DF43E550386C0BB652A15020EE0D570E2C2D10865DF7FC9241854A484155BEFD4E7D8B2DD1865E52B1EE1A67C488E3A6CFEF7C63B62B42C4ACB3397DA01016BE80826C3D69EC8E74A44B790E0B12E71834460DAAA09A94BDAE45A1F79AFDDA2BFCB26778C1177486EB49F582C84709FFB2013AF4A019744C64DF105E28FB081AF702D4CBA1E9DE3F3B79DB7E09EBA65031C67AF19A8B20F2BCE512728D406AC8C3517E715BB1C47A21C6747D5B3D1485436BB5D1C06903E7A499DA79C1E341AFC01BC5CAEDB0987297FC727AAD667D58EFF8B16755BD20E22DC36DC5E6454157BD5050B31FE5A3F1F0A5B9D3EFAA00A36D779493E74226897FF6F45FED7210A3CBE4817B0BE8FBE4871D6684347385C3E5A3819A0139878BD9F8208F999071F7B593A187E4FF5B98074E76CDDAAA7021525D4E07A18F3B95A363F54EB400B58EC1C422EECD51508422EF4C5F982413197BA7752C425FEC34BB8C490BE671722288711E09860A78A286E5D8F9FEDC2D1F33DD5F411B220D4C71570F6A06CA1BD9EE5E7A07AC40A9D35CEF07ED5E636DBB90663F71657E7155639F7A384FC4F42AC54D069F5295C624BA6E5A1CB8C9971AE3125D7635F1090D08E19F3124C1C7491A48EA1A40F74D6C2FF1DD3F99B4E89D366D42DA3E35C38E078FD4545BA919E379C9FA6AA516ECF8548AB868A1CE28B87424AF98572F49F2E864A6DECFFF1E82C4EB7D84FD7452266549B1B5D979192776DD71F7719A33DCDEFE703781DE782299B3B5BC1D48739C9978699694264AB17270CEF1624D6B92CF1BE83F253864BF0BDF62ACF599469B1F3E7FFE4735B8DCEFA9306403157BA18AFC1439F93105098181E00411699E448FDB9B667A367E02D02DD426B5D879DCA083E63EB7D975CF01F1BF86A69A9BEB876164A9212CE8FDD1D0632D99100496E7F6B636E283479103C21093B70A16798B3F2B8FDDDCFE2660DAC1F92DD74AE20FBA55CEA623735A2A4A3C17B97DDEF046371EBCAE3CA0E30057D21C72D44FFFEAA0BC2F351D61AE3ABE6274A7545452BA654C799271F01160DF7D088E76F1C0A5E8EA6A684EED65161C9E193C0556631427EA1A2BCE5C6E8E6F3F4EE690D79A47668B14A5D211BA08F3FE3961DBF300693D64D344E500379990146DEEDEF959C3F636A4093F0F64C94E61C1563C2E8527D60FA13E18ACDA2F99F78989866F9F63F8145606F931132F9DB853DD909CA2CB559263A05D96B28763BB07C03FF66749329F3D7000FF0E021847C99A354F045D96065FABEF7EB420437BA14322E08C71F3C54087242BE4C96A8B4527E13ECCF6D69276F867CB76DEDD7104D1C9CCA18F5F31572C53696BBA5EE0B94654FF2CD334CAB01F72E61ECB62C49A3D9C8794223A72127FA0D076718FE8A038ACB66415B8ED6CEF4F9A0CA1E96A1A6FAB826974BE65A9ECF7F8F42C1C79D9601B5F7AA63C24E153C62582EEA552E9BED642774F822A2DF9305985FCE7FAD96DD181FE32E28868F521708B93851E1129929B0FF1EBB93D436BFFA05C256011350691E021BEC4FC91A6890A044EB9F86B8C465FB8CD3046F697A215303EBB66BD7AD15CA80C3DF2AAC88243E7952176AF6B886B2408969BFE82B0E8484C44E3FE6F0AFF07504B01021400140000000800288DC34C58BD2C542C0500002C0700000E0000000000000000002000000000000000313532383031383837352E706E67504B050600000000010001003C000000580500000000</span><br></pre></td></tr></table></figure></p><p>得到zip文件，解压后是一张二维码：</p><p>扫描二维码，得到flag：<code>flag{b3c4r3fortheChinaChopperFHGJKUI^U%}</code>。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Encrypted-Traffic"><a href="#Encrypted-Traffic" class="headerlink" title="Encrypted Traffic"></a>Encrypted Traffic</h3><p>某银行客户端以安全著称，所有网络流量都开启了密码学防护机制。有一天，你抓到了局域网中的网银登录流量。在这个流量中，密码字段的值为 ac22543d5382cbf48b6ebcf6e40f123d9ca4b91f9998e4c2f2422402。根据分析，你获得了如下的线索：<br>1.上面抓到的登录流量密码字段是 SHA 系列哈希算法的哈希值。<br>2.这个登录密码也是银行卡的 ATM 取款密码。<br>3.登录密码的哈希值是加盐之后计算的结果，根据逆向分析，盐的值是用户名的拼音，而你推测出了流量来自于邻居 “张三丰”</p><p>有了这些线索之后，你能够分析出密码是什么吗？</p><p>flag 提交格式： flag{密码<em>哈希算法</em>盐}<br>举例： flag{123456_SHA999_lisi}</p><p>拿到hash之后，直接上hash-identifier，识别出是：SHA224。<br>密码是六位数字，直接爆破：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">target = <span class="string">'ac22543d5382cbf48b6ebcf6e40f123d9ca4b91f9998e4c2f2422402'</span></span><br><span class="line">salt = <span class="string">'zhangsanfeng'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                        password = str(i) + str(j) + str(k) + str(l) + str(m) + str(n)</span><br><span class="line">                        h = hashlib.sha224(password + salt).hexdigest()</span><br><span class="line">                        <span class="keyword">if</span> h == target:</span><br><span class="line">                            <span class="keyword">print</span> password</span><br><span class="line">                            exit()</span><br></pre></td></tr></table></figure></p><p>得到密码：877295，拼成flag：<code>flag{877295_SHA224_zhangsanfeng}</code>。</p><h3 id="Confidential"><a href="#Confidential" class="headerlink" title="Confidential"></a>Confidential</h3><p>某银行的机密资料文件加密存储在一个电脑中，密钥存储在另外一个电脑中。可是有一天发生了意外，存储密钥的电脑硬盘损坏了。然而没有这个机密资料银行就无法开展业务，于是派出了安全专家来尝试解密资料。好在机密资料使用的加密算法并不复杂，你能帮他解开机密资料吗？已知：<br>这个机密资料与跨行转帐有关，根据日常维护该机密资料的运维小红回忆，该机密资料的最后几行内容是：<br>Please make sure keep this secret safe.<br>Please make sure keep this secret safe.<br>Please make sure keep this secret safe.</p><p>查看源码可以知道加密过程为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cipher_block1 = plain_block1 ^ IV ^ Key</span><br><span class="line">cipher_block2 = plain_block2 ^ cipher_block1 ^ Key</span><br><span class="line">cipher_block3 = plain_block3 ^ cipher_block2 ^ Key</span><br><span class="line">cipher_block4 = plain_block4 ^ cipher_block3 ^ Key</span><br><span class="line">…</span><br></pre></td></tr></table></figure></p><p>用最后三块密文和最后两块明文，通过枚举最后一块的padding，可以计算出两个Key来，当两个Key相等时，Key就找到了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[127, 84, 183, 104, 20, 239, 255, 134, 158, 177, 142, 38, 36, 137, 8, 162]</span><br></pre></td></tr></table></figure></p><p>利用Key和密文就可以恢复出明文来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cret for our bank account.</span><br><span class="line"></span><br><span class="line">A SWIFT code is an international bank code that identifies particular banks worldwide.</span><br><span class="line">It&apos;s also known as a Bank Identifier Code (BIC).</span><br><span class="line">CommBank uses SWIFT codes to send money to overseas banks.</span><br><span class="line">A SWIFT code consists of 8 or 11 characters.</span><br><span class="line"></span><br><span class="line">Our Bank swift code is flag&#123;CTBJCN2B&#125;.</span><br><span class="line"></span><br><span class="line">Please make sure keep this secret safe.</span><br><span class="line">Please make sure keep this secret safe.</span><br><span class="line">Please make sure keep this secret safe.</span><br></pre></td></tr></table></figure></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Ransomware"><a href="#Ransomware" class="headerlink" title="Ransomware"></a>Ransomware</h3><p>公司财务人员的电脑中了勒索软件，财务报表被加密了，必须向攻击者支付比特币才能获得解密密码。作为安全人员，你有办法分析出解密密码吗？</p><p>IDA逆向，F5，得到关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401010</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-4h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+0h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">18</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + a1) ^= <span class="number">0xCC</span>u;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">18</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="keyword">char</span> *)(j + a1) != byte_404000[j] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>逻辑就是得到的密码与<code>0xcc</code>异或，判断结果是否为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FD 93 A8 83 93 A2 FC B8 93 BB 8D A2 A2 AD 93 AF BE B5</span><br></pre></td></tr></table></figure></p><p>把结果和<code>0xcc</code>异或就得到密码了：<code>flag{1_dO_n0t_wAnna_cry}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;金融业网络安全攻防大赛Writeups&quot;&gt;&lt;a href=&quot;#金融业网络安全攻防大赛Writeups&quot; class=&quot;headerlink&quot; title=&quot;金融业网络安全攻防大赛Writeups&quot;&gt;&lt;/a&gt;金融业网络安全攻防大赛Writeups&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="CTF" scheme="http://jack0pan.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://jack0pan.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Construct Binary Tree from Traversal</title>
    <link href="http://jack0pan.github.io/2018/05/04/Construct-Binary-Tree-from-Traversal/"/>
    <id>http://jack0pan.github.io/2018/05/04/Construct-Binary-Tree-from-Traversal/</id>
    <published>2018-05-04T14:31:49.000Z</published>
    <updated>2018-05-04T14:33:00.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Construct-Binary-Tree-from-Traversal"><a href="#Construct-Binary-Tree-from-Traversal" class="headerlink" title="Construct Binary Tree from Traversal"></a>Construct Binary Tree from Traversal</h1><h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>通过前序遍历数组我们可以知道第一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; preorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(preorder, inorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(preorder, pre_left, pre_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> pre_left &gt; pre_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(preorder[pre_left])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(preorder, pre_left + <span class="number">1</span>, pre_left + delta, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(preorder, pre_left + delta + <span class="number">1</span>, pre_right, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a>106. Construct Binary Tree from Inorder and Postorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inorder = [9,3,15,20,7]</span><br><span class="line">postorder = [9,15,7,20,3]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>通过后序遍历数组我们可以知道最后一个元素为根节点，然后去中序遍历中找到该元素，它左边的为左子树，右边的为右子树。这样递归遍历两个数组即可得到二叉树。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; inorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; postorder</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(inorder, postorder)</span></span></span><br><span class="line">  hash = &#123;&#125;</span><br><span class="line">  inorder.each_with_index <span class="keyword">do</span> <span class="params">|v, i|</span></span><br><span class="line">    hash[v] = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  _build_tree(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, hash)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _build_tree<span class="params">(postorder, post_left, post_right, inorder, in_left, in_right, hash)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> post_left &gt; post_right <span class="keyword">or</span> in_left &gt; in_right</span><br><span class="line">  root = TreeNode.new(postorder[post_right])</span><br><span class="line">  delta = hash[root.val] - in_left</span><br><span class="line">  root.left = _build_tree(postorder, post_left, post_left + delta - <span class="number">1</span>, inorder, in_left, hash[root.val] - <span class="number">1</span>, hash)</span><br><span class="line">  root.right = _build_tree(postorder, post_left + delta, post_right - <span class="number">1</span>, inorder, hash[root.val] + <span class="number">1</span>, in_right, hash)</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Construct-Binary-Tree-from-Traversal&quot;&gt;&lt;a href=&quot;#Construct-Binary-Tree-from-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Construct Binary Tre
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Level Order Traversal</title>
    <link href="http://jack0pan.github.io/2018/05/04/Binary-Tree-Level-Order-Traversal/"/>
    <id>http://jack0pan.github.io/2018/05/04/Binary-Tree-Level-Order-Traversal/</id>
    <published>2018-05-04T13:57:18.000Z</published>
    <updated>2018-05-04T14:29:10.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h1><h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树的广度优先遍历。遍历当前层的同时，把子节点放入队列中，这样一层一层遍历，直到队列为空。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its bottom-up level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题和<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="noopener">前面题</a>一样，只需把最后结构逆序即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order_bottom</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result &lt;&lt; level</span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result.reverse</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its zigzag level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题在<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Binary Tree Level Order Traversal</a>基础上，加个标记，偶数行做一下反转即可。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzag_level_order</span><span class="params">(root)</span></span></span><br><span class="line">  result, queue = [], []</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  queue &lt;&lt; root</span><br><span class="line">  reverse = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> queue.empty?</span><br><span class="line">    level = []</span><br><span class="line">    next_level = []</span><br><span class="line">    queue.each <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">      level &lt;&lt; node.val</span><br><span class="line">      next_level &lt;&lt; node.left <span class="keyword">if</span> node.left</span><br><span class="line">      next_level &lt;&lt; node.right <span class="keyword">if</span> node.right</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> reverse</span><br><span class="line">      result &lt;&lt; level.reverse</span><br><span class="line">      reverse = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result &lt;&lt; level</span><br><span class="line">      reverse = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    queue = next_level</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Level Order Tr
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Unique Binary Search Trees</title>
    <link href="http://jack0pan.github.io/2018/05/03/Unique-Binary-Search-Trees/"/>
    <id>http://jack0pan.github.io/2018/05/03/Unique-Binary-Search-Trees/</id>
    <published>2018-05-03T13:44:32.000Z</published>
    <updated>2018-05-03T14:35:34.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unique-Binary-Search-Trees"><a href="#Unique-Binary-Search-Trees" class="headerlink" title="Unique Binary Search Trees"></a>Unique Binary Search Trees</h1><h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a>96. Unique Binary Search Trees</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>解决思路就是以任意一个数为根，比它小的数为左子树，大的为右子树，二叉搜索树的数量就是左子树数量乘以右子树的数量，总数就是以每个数为根节点的二叉搜索树的总和。</p><p>总结成公式为：<br><img src="http://junzhepanblog.qiniudn.com/unique-binary-search-trees/catalan.png" alt="卡特兰数"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  result = Array.new(n + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  result[<span class="number">0</span>], result[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..n).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    i.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">      result[i] += result[j] * result[i - j - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result[n]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n^2)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h2 id="95-Unique-Binary-Search-Trees"><a href="#95-Unique-Binary-Search-Trees" class="headerlink" title="95. Unique Binary Search Trees"></a>95. Unique Binary Search Trees</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>思路跟<a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="noopener">Unique Binary Search Trees</a>的类似。</p><ul><li>每选一个节点为根，就要递归求解左右子树的所有情况。</li><li>遍历左右子树的所有情况，把当前节点和左右子树拼接起来。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;TreeNode[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_trees</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line">  _generate_trees(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _generate_trees<span class="params">(left, right)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">if</span> left &gt; right</span><br><span class="line">    result &lt;&lt; <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    (left..right).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      lefts = _generate_trees(left, i - <span class="number">1</span>)</span><br><span class="line">      rights = _generate_trees(i + <span class="number">1</span>, right)</span><br><span class="line">      lefts.length.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">        rights.length.times.each <span class="keyword">do</span> <span class="params">|k|</span></span><br><span class="line">          root = TreeNode.new(i)</span><br><span class="line">          root.left = lefts[j]</span><br><span class="line">          root.right = rights[k]</span><br><span class="line">          result &lt;&lt; root</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unique-Binary-Search-Trees&quot;&gt;&lt;a href=&quot;#Unique-Binary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;Unique Binary Search Trees&quot;&gt;&lt;/a&gt;Unique B
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Deep Traversal</title>
    <link href="http://jack0pan.github.io/2018/04/28/Binary-Tree-Deep-Traversal/"/>
    <id>http://jack0pan.github.io/2018/04/28/Binary-Tree-Deep-Traversal/</id>
    <published>2018-04-28T15:06:25.000Z</published>
    <updated>2018-05-05T02:38:49.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree-Deep-Traversal"><a href="#Binary-Tree-Deep-Traversal" class="headerlink" title="Binary Tree Deep Traversal"></a>Binary Tree Deep Traversal</h1><h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>二叉树中序遍历，题目要求迭代方式实现。</p><p>先来看递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>再看迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    path &lt;&lt; node.val</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a>144. Binary Tree Preorder Traversal</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>二叉树前序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> node <span class="keyword">or</span> <span class="keyword">not</span> stack.empty?</span><br><span class="line">    <span class="keyword">while</span> node</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node = stack.pop</span><br><span class="line">    node = node.right</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure></p><p>Follow up: Recursive solution is trivial, could you do it iteratively?</p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>二叉树后序遍历</p><p>递归方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  path = []</span><br><span class="line">  traverse = lambda &#123; <span class="params">|node|</span></span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      traverse.call(node.left)</span><br><span class="line">      traverse.call(node.right)</span><br><span class="line">      path &lt;&lt; node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  traverse.call(root)</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>迭代方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder_traversal</span><span class="params">(root)</span></span></span><br><span class="line">  <span class="keyword">return</span> [] <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line">  node, stack, path = root, [], []</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> stack.empty? <span class="keyword">or</span> path.empty?</span><br><span class="line">    <span class="keyword">if</span> node</span><br><span class="line">      stack.push node</span><br><span class="line">      node = node.left ? node.left : node.right</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      next_node = stack.pop </span><br><span class="line">      node = stack.last </span><br><span class="line">      <span class="keyword">while</span> node &amp;&amp; node.right == next_node</span><br><span class="line">        path &lt;&lt; next_node.val </span><br><span class="line">        next_node = stack.pop </span><br><span class="line">        node = stack.last </span><br><span class="line">      <span class="keyword">end</span> </span><br><span class="line">      node = node ? node.right : <span class="literal">nil</span></span><br><span class="line">      path &lt;&lt; next_node.val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  path</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree-Deep-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Deep-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Deep Traversal&quot;&gt;&lt;/a&gt;Binary T
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Validate Binary Search Tree</title>
    <link href="http://jack0pan.github.io/2018/04/28/Validate-Binary-Search-Tree/"/>
    <id>http://jack0pan.github.io/2018/04/28/Validate-Binary-Search-Tree/</id>
    <published>2018-04-28T13:47:19.000Z</published>
    <updated>2018-05-05T02:47:39.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  1   4</span><br><span class="line">     / \</span><br><span class="line">    3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&apos;s value</span><br><span class="line">             is 5 but its right child&apos;s value is 4.</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>验证一棵二叉树是否为二叉搜索树。</p><p>思路就是递归验证左子树和右子树是否都满足条件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :left, :right</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@left</span>, <span class="doctag">@right</span> = nil, nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_bst</span><span class="params">(root, l = <span class="literal">nil</span>, r = <span class="literal">nil</span>)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">if</span> root.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> l &amp;&amp; l &gt; root.val</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> r &amp;&amp; r &lt; root.val</span><br><span class="line"></span><br><span class="line">  is_valid_bst(root.left, l, root.val - <span class="number">1</span>) &amp;&amp; is_valid_bst(root.right, root.val + <span class="number">1</span>, r)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(logn)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;98-Validate-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#98-Validate-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;98. Validate Binary Search Tree&quot;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Restore IP Addresses</title>
    <link href="http://jack0pan.github.io/2018/04/27/Restore-IP-Addresses/"/>
    <id>http://jack0pan.github.io/2018/04/27/Restore-IP-Addresses/</id>
    <published>2018-04-27T14:01:17.000Z</published>
    <updated>2018-05-05T02:31:44.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a>93. Restore IP Addresses</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这题思路主要是用动态规划，没什么好说的。主要在于对IP的每一项的判断要筛掉以下情况：</p><ul><li>每一项的值不能大于255</li><li>不能以“0”开头（比如：01，00），这种可以通过先转成整数，再转成字符串，和原来比较是否相同。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_ip_addresses</span><span class="params">(s)</span></span></span><br><span class="line">  ips = []</span><br><span class="line">  ip = []</span><br><span class="line">  _restore(ips, ip, s, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> ips</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _restore<span class="params">(ips, ip, s, level)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty?</span><br><span class="line">  <span class="keyword">if</span> level == <span class="number">4</span></span><br><span class="line">    p = s.to_i</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s</span><br><span class="line">    ip.push(s)</span><br><span class="line">    ips.push(ip.join(<span class="string">'.'</span>))</span><br><span class="line">    ip.pop</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="number">3</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> s.length &lt; (i + <span class="number">1</span>)</span><br><span class="line">      p = s[<span class="number">0</span>..i].to_i</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p &gt; <span class="number">255</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">if</span> p.to_s != s[<span class="number">0</span>..i]</span><br><span class="line">      ip.push(s[<span class="number">0</span>..i])</span><br><span class="line">      _restore(ips, ip, s[(i+<span class="number">1</span>)..-<span class="number">1</span>], level + <span class="number">1</span>)</span><br><span class="line">      ip.pop</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>这题的时间和空间复杂度是固定的，都是<code>O(3^4)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;93-Restore-IP-Addresses&quot;&gt;&lt;a href=&quot;#93-Restore-IP-Addresses&quot; class=&quot;headerlink&quot; title=&quot;93. Restore IP Addresses&quot;&gt;&lt;/a&gt;93. Restore IP A
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Linked List</title>
    <link href="http://jack0pan.github.io/2018/04/26/Reverse-Linked-List/"/>
    <id>http://jack0pan.github.io/2018/04/26/Reverse-Linked-List/</id>
    <published>2018-04-26T13:44:32.000Z</published>
    <updated>2018-05-05T03:29:43.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse-Linked-List"><a href="#Reverse-Linked-List" class="headerlink" title="Reverse Linked List"></a>Reverse Linked List</h1><h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Reverse a singly linked list.</p><p>Hint:</p><p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>题目要求两种实现思路：迭代方式和递归方式。</p><h4 id="迭代方式"><a href="#迭代方式" class="headerlink" title="迭代方式"></a>迭代方式</h4><p>先创建一个临时节点，从头往后遍历链表，来一个节点就插入临时节点和第一个节点之间，这样遍历完后，链表就逆序了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iteratively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  dummy_head = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  p = head</span><br><span class="line">  <span class="keyword">while</span> p</span><br><span class="line">    n = p.<span class="keyword">next</span></span><br><span class="line">    p.<span class="keyword">next</span> = dummy_head.<span class="keyword">next</span></span><br><span class="line">    dummy_head.<span class="keyword">next</span> = p</span><br><span class="line">    p = n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dummy_head.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><p>递归结束条件是遍历到最后一个节点，直接返回。其他情况就是让下一个节点指向当前节点。中间要一直返回最后一个节点，递归完后，最后一个节点就变成第一个节点了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recursively implement</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span></span></span><br><span class="line">  <span class="keyword">if</span> head.<span class="literal">nil</span>? <span class="keyword">or</span> head.<span class="keyword">next</span>.<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    n = head.<span class="keyword">next</span></span><br><span class="line">    head.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    rest = reverse_list(n)</span><br><span class="line">    n.<span class="keyword">next</span> = head</span><br><span class="line">    <span class="keyword">return</span> rest</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul><h2 id="92-Reverse-Linked-List-II"><a href="#92-Reverse-Linked-List-II" class="headerlink" title="92. Reverse Linked List II"></a>92. Reverse Linked List II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Reverse a linked list from position m to n. Do it in one-pass.</p><p>Note: 1 ≤ m ≤ n ≤ length of list.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这题解法就是，先找到m节点的位置，然后把m和n之间的节点插入m节点和它之前节点就行。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; m</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_between</span><span class="params">(head, m, n)</span></span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> head.<span class="literal">nil</span>?</span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  m_prev, i = dummy, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev = m_prev.<span class="keyword">next</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> i &lt; m</span><br><span class="line">  m_node = m_prev.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> head <span class="keyword">if</span> m_node.<span class="literal">nil</span>?</span><br><span class="line">  c_node = m_node.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> c_node</span><br><span class="line">    t = c_node.<span class="keyword">next</span></span><br><span class="line">    c_node.<span class="keyword">next</span> = m_prev.<span class="keyword">next</span></span><br><span class="line">    m_prev.<span class="keyword">next</span> = c_node</span><br><span class="line">    c_node = t</span><br><span class="line">    m_node.<span class="keyword">next</span> = c_node</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reverse-Linked-List&quot;&gt;&lt;a href=&quot;#Reverse-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Reverse Linked List&quot;&gt;&lt;/a&gt;Reverse Linked List&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Decode Ways</title>
    <link href="http://jack0pan.github.io/2018/04/25/Decode-Ways/"/>
    <id>http://jack0pan.github.io/2018/04/25/Decode-Ways/</id>
    <published>2018-04-25T14:06:22.000Z</published>
    <updated>2018-05-06T03:35:25.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h1><h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a>91. Decode Ways</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>A message containing letters from A-Z is being encoded to numbers using the following mapping:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; -&gt; 1</span><br><span class="line">&apos;B&apos; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&apos;Z&apos; -&gt; 26</span><br></pre></td></tr></table></figure></p><p>Given a non-empty string containing only digits, determine the total number of ways to decode it.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>我们用<code>dp[i]</code>表示以第i个数字结尾的子串编码数量，计算公式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i] += dp[i-1] 如果s[i-1] &gt; 0</span><br><span class="line">dp[i] += dp[i-2] 如果10 &lt;= s[i-2]s[i-1] &lt;= 26</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; s</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_decodings</span><span class="params">(s)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> s.<span class="literal">nil</span>? <span class="keyword">or</span> s.empty? <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">'0'</span></span><br><span class="line">  dp = Array.new(s.length + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  dp[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>..s.length).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">1</span>] <span class="keyword">if</span> s[i - <span class="number">1</span>].to_i &gt; <span class="number">0</span></span><br><span class="line">    dp[i] += dp[i - <span class="number">2</span>] <span class="keyword">if</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &gt;= <span class="number">10</span> <span class="keyword">and</span> s[i - <span class="number">2</span>.. i - <span class="number">1</span>].to_i &lt;= <span class="number">26</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  dp[s.length]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Decode-Ways&quot;&gt;&lt;a href=&quot;#Decode-Ways&quot; class=&quot;headerlink&quot; title=&quot;Decode Ways&quot;&gt;&lt;/a&gt;Decode Ways&lt;/h1&gt;&lt;h2 id=&quot;91-Decode-Ways&quot;&gt;&lt;a href=&quot;#91-
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Subsets</title>
    <link href="http://jack0pan.github.io/2018/04/24/Subsets/"/>
    <id>http://jack0pan.github.io/2018/04/24/Subsets/</id>
    <published>2018-04-24T13:56:24.000Z</published>
    <updated>2018-05-06T03:37:25.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h1><h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a>78. Subsets</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a set of distinct integers, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>利用深度优先算法，把所有组合情况都遍历一遍。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul><h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a>90. Subsets II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>这道题和<a href="https://leetcode.com/problems/subsets/description/" target="_blank" rel="noopener">Subsets</a>的区别在于去掉重复元素，最直接的办法就是在添加一种新组合前，判断一下是否已经含有这种组合。但是，这种做法增加了时间复杂度，LeetCode上的运行时间是<code>100ms</code>。</p><p>还有一种更有效的办法，在把元素添加到组合中，直接跳过重复元素。这种做法可以把时间缩短到<code>40ms</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets_with_dup</span><span class="params">(nums)</span></span></span><br><span class="line">  nums.sort!</span><br><span class="line">  path, result = [], []</span><br><span class="line">  _subsets(nums, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _subsets<span class="params">(nums, index, path, result)</span></span></span><br><span class="line">  result.push(path.dup)</span><br><span class="line">  i = index</span><br><span class="line">  <span class="keyword">while</span> i &lt; nums.length</span><br><span class="line">    path.push(nums[i]);</span><br><span class="line">    _subsets(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">    path.pop</span><br><span class="line">    i += <span class="number">1</span> <span class="keyword">while</span> i &lt; nums.length - <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i + <span class="number">1</span>]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Subsets&quot;&gt;&lt;a href=&quot;#Subsets&quot; class=&quot;headerlink&quot; title=&quot;Subsets&quot;&gt;&lt;/a&gt;Subsets&lt;/h1&gt;&lt;h2 id=&quot;78-Subsets&quot;&gt;&lt;a href=&quot;#78-Subsets&quot; class=&quot;head
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Gray Code</title>
    <link href="http://jack0pan.github.io/2018/04/23/Gray-Code/"/>
    <id>http://jack0pan.github.io/2018/04/23/Gray-Code/</id>
    <published>2018-04-23T14:01:20.000Z</published>
    <updated>2018-05-12T14:57:40.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="89-Gray-Code"><a href="#89-Gray-Code" class="headerlink" title="89. Gray Code"></a>89. Gray Code</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p><p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p><p>For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 - 0</span><br><span class="line">01 - 1</span><br><span class="line">11 - 3</span><br><span class="line">10 - 2</span><br></pre></td></tr></table></figure></p><p>Note:<br>For a given n, a gray code sequence is not uniquely defined.</p><p>For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.</p><p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>题目让生成格雷码，要生成n的格雷码，总共有2的n次方个，第i个生成方式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i &gt;&gt; 1) ^ i</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gray_code</span><span class="params">(n)</span></span></span><br><span class="line">  i, total, result = <span class="number">0</span>, <span class="number">1</span> &lt;&lt; n, []</span><br><span class="line">  total.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    result.push((i <span class="meta">&gt;&gt; </span><span class="number">1</span>) ^ i)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(2^n)</code></li><li>空间复杂度：<code>O(2^n)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;89-Gray-Code&quot;&gt;&lt;a href=&quot;#89-Gray-Code&quot; class=&quot;headerlink&quot; title=&quot;89. Gray Code&quot;&gt;&lt;/a&gt;89. Gray Code&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Partition List</title>
    <link href="http://jack0pan.github.io/2018/04/20/Partition-List/"/>
    <id>http://jack0pan.github.io/2018/04/20/Partition-List/</id>
    <published>2018-04-20T14:05:10.000Z</published>
    <updated>2018-05-14T15:37:25.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="86-Partition-List"><a href="#86-Partition-List" class="headerlink" title="86. Partition List"></a>86. Partition List</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</p><p>You should preserve the original relative order of the nodes in each of the two partitions.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3</span><br><span class="line">Output: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>方法就是从头到尾遍历链表，把小于给定值的节点从当前链表摘除，添加到新链表中。然后把链表添加到新链表尾部即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode</span></span><br><span class="line"><span class="comment">#     attr_accessor :val, :next</span></span><br><span class="line"><span class="comment">#     def initialize(val)</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@val</span> = val</span></span><br><span class="line"><span class="comment">#         <span class="doctag">@next</span> = nil</span></span><br><span class="line"><span class="comment">#     end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; x</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;ListNode&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(head, x)</span></span></span><br><span class="line">  dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  new_dummy = ListNode.new(<span class="number">0</span>)</span><br><span class="line">  dummy.<span class="keyword">next</span> = head</span><br><span class="line">  cur, new_cur = dummy, new_dummy</span><br><span class="line">  <span class="keyword">while</span> cur.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">if</span> cur.<span class="keyword">next</span>.val &lt; x</span><br><span class="line">      new_cur.<span class="keyword">next</span> = cur.<span class="keyword">next</span></span><br><span class="line">      new_cur = new_cur.<span class="keyword">next</span></span><br><span class="line">      cur.<span class="keyword">next</span> = cur.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">      new_cur.<span class="keyword">next</span> = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      cur = cur.<span class="keyword">next</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  new_cur.<span class="keyword">next</span> = dummy.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">return</span> new_dummy.<span class="keyword">next</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(n)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;86-Partition-List&quot;&gt;&lt;a href=&quot;#86-Partition-List&quot; class=&quot;headerlink&quot; title=&quot;86. Partition List&quot;&gt;&lt;/a&gt;86. Partition List&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Group Anagrams</title>
    <link href="http://jack0pan.github.io/2018/03/23/Group-Anagrams/"/>
    <id>http://jack0pan.github.io/2018/03/23/Group-Anagrams/</id>
    <published>2018-03-23T13:56:15.000Z</published>
    <updated>2018-10-13T15:13:20.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a>49. Group Anagrams</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of strings, group anagrams together.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>All inputs will be in lowercase.</li><li>The order of your output does not matter.</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用Hash来存结果，把字符串排序后的值作为key，这样就把字母相同顺序不同的字符串全都放在一起。<br>最后返回values数据即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String[]&#125; strs</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_anagrams</span><span class="params">(strs)</span></span></span><br><span class="line">  result = Hash.new</span><br><span class="line">  strs.each <span class="keyword">do</span> <span class="params">|str|</span></span><br><span class="line">    index = str.chars.sort.join</span><br><span class="line">    <span class="keyword">if</span> result.has_key?(index)</span><br><span class="line">      result[index] &lt;&lt; str</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result[index] = [str]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result.values</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(N)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;49-Group-Anagrams&quot;&gt;&lt;a href=&quot;#49-Group-Anagrams&quot; class=&quot;headerlink&quot; title=&quot;49. Group Anagrams&quot;&gt;&lt;/a&gt;49. Group Anagrams&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Rotate Image</title>
    <link href="http://jack0pan.github.io/2018/03/22/Rotate-Image/"/>
    <id>http://jack0pan.github.io/2018/03/22/Rotate-Image/</id>
    <published>2018-03-22T14:12:33.000Z</published>
    <updated>2018-10-12T14:13:05.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a>48. Rotate Image</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are given an n x n 2D matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><p>Note:</p><p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>题目要求把一个矩阵顺时针旋转90度。<br>主思路是先把矩阵转制，然后再把每行逆序即可。举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3       1 4 7       7 4 1</span><br><span class="line">4 5 6  -&gt;  2 5 8  -&gt;  8 5 2</span><br><span class="line">7 8 9       3 6 9       9 6 3</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[][]&#125; matrix</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Void&#125; Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(matrix)</span></span></span><br><span class="line">  n = matrix.length</span><br><span class="line">  n.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    j = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; n</span><br><span class="line">      tmp = matrix[i][j]</span><br><span class="line">      matrix[i][j] = matrix[j][i]</span><br><span class="line">      matrix[j][i] = tmp</span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    matrix[i].reverse!</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N^2)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;48-Rotate-Image&quot;&gt;&lt;a href=&quot;#48-Rotate-Image&quot; class=&quot;headerlink&quot; title=&quot;48. Rotate Image&quot;&gt;&lt;/a&gt;48. Rotate Image&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Multiply Strings</title>
    <link href="http://jack0pan.github.io/2018/03/21/Multiply-Strings/"/>
    <id>http://jack0pan.github.io/2018/03/21/Multiply-Strings/</id>
    <published>2018-03-21T13:50:51.000Z</published>
    <updated>2018-10-11T13:52:00.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="43-Multiply-Strings"><a href="#43-Multiply-Strings" class="headerlink" title="43. Multiply Strings"></a>43. Multiply Strings</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure></p><p>Note:</p><ol><li>The length of both num1 and num2 is &lt; 110.</li><li>Both num1 and num2 contain only digits 0-9.</li><li>Both num1 and num2 do not contain any leading zero, except the number 0 itself.</li><li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这个就是模拟乘法计算：</p><ul><li>先把两个字符串逆序</li><li>用一个字符串中的数去乘另一个字符串的每个数</li><li>把中间结果累加，当第一个字符串遍历完时，就计算完了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num1</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;String&#125; num2</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(num1, num2)</span></span></span><br><span class="line">  num1.reverse!</span><br><span class="line">  num2.reverse!</span><br><span class="line">  s = Array.new(num1.length + num2.length, <span class="number">48</span>)</span><br><span class="line">  num1.bytes.each_with_index <span class="keyword">do</span> <span class="params">|n1, i|</span></span><br><span class="line">    num2.bytes.each_with_index <span class="keyword">do</span> <span class="params">|n2, j|</span></span><br><span class="line">      tmp = (n1 - <span class="number">48</span>) * (n2 - <span class="number">48</span>)</span><br><span class="line">      s[i+j+<span class="number">1</span>] = s[i+j+<span class="number">1</span>] - <span class="number">48</span> + (s[i+j] - <span class="number">48</span> + tmp) / <span class="number">10</span> + <span class="number">48</span>    </span><br><span class="line">      s[i+j] = (s[i+j] - <span class="number">48</span> + tmp) % <span class="number">10</span> + <span class="number">48</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  s.reverse!</span><br><span class="line">  s = s[<span class="number">1</span>..-<span class="number">1</span>] <span class="keyword">while</span> s.length &gt; <span class="number">1</span> <span class="keyword">and</span> s[<span class="number">0</span>] == <span class="number">48</span></span><br><span class="line">  s.pack(<span class="string">'c*'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N^2)</code>，N为字符串长度</li><li>空间复杂度：<code>O(N)</code>，N为字符串长度</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;43-Multiply-Strings&quot;&gt;&lt;a href=&quot;#43-Multiply-Strings&quot; class=&quot;headerlink&quot; title=&quot;43. Multiply Strings&quot;&gt;&lt;/a&gt;43. Multiply Strings&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Combinations</title>
    <link href="http://jack0pan.github.io/2018/03/20/Combinations/"/>
    <id>http://jack0pan.github.io/2018/03/20/Combinations/</id>
    <published>2018-03-20T13:31:01.000Z</published>
    <updated>2018-10-11T13:33:08.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h1><h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p><p>The same repeated number may be chosen from candidates unlimited number of times.</p><p>Note:</p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,6,7], target = 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要思路是：</p><ul><li>每取一个数，就要把它打组合全部找出</li><li>需要注意的是一个数可以重复取</li><li>把数组遍历完后，所有的组合就出来了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combination_sum</span><span class="params">(candidates, target)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  _combination_sum(candidates, target, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combination_sum<span class="params">(candidates, target, index, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> target &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">elsif</span> target == <span class="number">0</span></span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result &lt;&lt; new_path</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span> i &lt; candidates.length</span><br><span class="line">      path.push(candidates[i]);</span><br><span class="line">      _combination_sum(candidates, target - candidates[i], i, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul><h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p><p>Each number in candidates may only be used once in the combination.</p><p>Note:</p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>主要思路是：</p><ul><li>每取一个数，就要把它打组合全部找出</li><li>需要注意的是一个数只可以用一次</li><li>把数组遍历完后，所有的组合就出来了</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; candidates</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combination_sum2</span><span class="params">(candidates, target)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  candidates.sort!</span><br><span class="line">  _combination_sum(candidates, target, <span class="number">0</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combination_sum<span class="params">(candidates, target, index, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> target &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">elsif</span> target == <span class="number">0</span></span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result.push(new_path)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = index</span><br><span class="line">    <span class="keyword">while</span> i &lt; candidates.length</span><br><span class="line">      path.push(candidates[i]);</span><br><span class="line">      _combination_sum(candidates, target - candidates[i], i + <span class="number">1</span>, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      <span class="keyword">while</span> (i &lt; candidates.length - <span class="number">1</span> <span class="keyword">and</span> candidates[i] == candidates[i + <span class="number">1</span>])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul><h2 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77. Combinations"></a>77. Combinations</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>这题没啥好解释的，用深度优先搜索来解就行了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; k</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[][]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(n, k)</span></span></span><br><span class="line">  path, result = [], []</span><br><span class="line">  _combine(n, k, <span class="number">1</span>, path, result)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> _combine<span class="params">(n, k, start, path, result)</span></span></span><br><span class="line">  <span class="keyword">if</span> path.size == k</span><br><span class="line">    new_path = path.dup</span><br><span class="line">    result.push(new_path)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">while</span> i &lt;= n</span><br><span class="line">      path.push(i);</span><br><span class="line">      _combine(n, k, i + <span class="number">1</span>, path, result)</span><br><span class="line">      path.pop</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(n!)</code></li><li>空间复杂度：<code>O(n!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Combinations&quot;&gt;&lt;a href=&quot;#Combinations&quot; class=&quot;headerlink&quot; title=&quot;Combinations&quot;&gt;&lt;/a&gt;Combinations&lt;/h1&gt;&lt;h2 id=&quot;39-Combination-Sum&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Count and Say</title>
    <link href="http://jack0pan.github.io/2018/03/19/Count-and-Say/"/>
    <id>http://jack0pan.github.io/2018/03/19/Count-and-Say/</id>
    <published>2018-03-19T13:39:19.000Z</published>
    <updated>2018-09-28T13:53:39.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="38-Count-and-Say"><a href="#38-Count-and-Say" class="headerlink" title="38. Count and Say"></a>38. Count and Say</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The count-and-say sequence is the sequence of integers with the first five terms as following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br></pre></td></tr></table></figure></p><ul><li>1 is read off as “one 1” or 11.</li><li>11 is read off as “two 1s” or 21.</li><li>21 is read off as “one 2, then one 1” or 1211.</li></ul><p>Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;1211&quot;</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>用递归思路实现：</p><ul><li>n = 1时，直接返回字符串“1”；</li><li>n &gt; 1时，拿到n-1的字符串，用循环统计。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; n</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;String&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_and_say</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> n &lt;= <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"1"</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">  pre = count_and_say(n - <span class="number">1</span>) + <span class="string">"#"</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  count = <span class="number">1</span></span><br><span class="line">  s = <span class="string">""</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; pre.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> pre[i] == pre[i + <span class="number">1</span>]</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s &lt;&lt; <span class="string">"<span class="subst">#&#123;count.to_s&#125;</span><span class="subst">#&#123;pre[i]&#125;</span>"</span></span><br><span class="line">      count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N!)</code></li><li>空间复杂度：<code>O(N!)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;38-Count-and-Say&quot;&gt;&lt;a href=&quot;#38-Count-and-Say&quot; class=&quot;headerlink&quot; title=&quot;38. Count and Say&quot;&gt;&lt;/a&gt;38. Count and Say&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Sudoku</title>
    <link href="http://jack0pan.github.io/2018/03/18/Sudoku/"/>
    <id>http://jack0pan.github.io/2018/03/18/Sudoku/</id>
    <published>2018-03-18T14:32:14.000Z</published>
    <updated>2018-09-26T14:51:50.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sudoku"><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h1><h2 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a>Valid Sudoku</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:<br>Each row must contain the digits 1-9 without repetition.Each column must contain the digits 1-9 without repetition.Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="Sudoku.png"><br>A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the 5 in the top left corner being </span><br><span class="line">    modified to 8. Since there are two 8&apos;s in the top left 3x3 sub-box, it is invalid.</span><br></pre></td></tr></table></figure></p><p>Note:</p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits 1-9 and the character ‘.’.</li><li>The given board size is always 9x9.</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>主要思路是用空间换时间，把每行、每列、每个9x9的格状态都保存，每遍历一个数字就判断一下这三个数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Character[][]&#125; board</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Boolean&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_sudoku</span><span class="params">(board)</span></span></span><br><span class="line">  rows = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  columns = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  girds = Array.new(<span class="number">9</span>)&#123; Array.new(<span class="number">9</span>, <span class="literal">false</span>) &#125;</span><br><span class="line">  <span class="number">9</span>.times.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    <span class="number">9</span>.times.each <span class="keyword">do</span> <span class="params">|j|</span></span><br><span class="line">      <span class="keyword">next</span> <span class="keyword">if</span> board[i][j] == <span class="string">"."</span></span><br><span class="line">      c = board[i][j].to_i - <span class="number">1</span></span><br><span class="line">      gird = <span class="number">3</span> * (i / <span class="number">3</span>) + j / <span class="number">3</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> (rows[i][c] <span class="keyword">or</span> columns[j][c] <span class="keyword">or</span> girds[gird][c])</span><br><span class="line">      rows[i][c] = <span class="literal">true</span></span><br><span class="line">      columns[j][c] = <span class="literal">true</span></span><br><span class="line">      girds[gird][c] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：<code>O(9x9)</code></li><li>空间复杂度：<code>O(3x9x9)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sudoku&quot;&gt;&lt;a href=&quot;#Sudoku&quot; class=&quot;headerlink&quot; title=&quot;Sudoku&quot;&gt;&lt;/a&gt;Sudoku&lt;/h1&gt;&lt;h2 id=&quot;Valid-Sudoku&quot;&gt;&lt;a href=&quot;#Valid-Sudoku&quot; class=&quot;head
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Search Insert Position</title>
    <link href="http://jack0pan.github.io/2018/03/18/Search-Insert-Position/"/>
    <id>http://jack0pan.github.io/2018/03/18/Search-Insert-Position/</id>
    <published>2018-03-18T14:03:20.000Z</published>
    <updated>2018-09-26T14:14:31.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Search-Insert-Position"><a href="#Search-Insert-Position" class="headerlink" title="Search Insert Position"></a>Search Insert Position</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法很简单，找到第一个比<code>target</code>小的就直接返回<code>index</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_insert</span><span class="params">(nums, target)</span></span></span><br><span class="line">  nums.each_with_index <span class="keyword">do</span> <span class="params">|n, index|</span></span><br><span class="line">   <span class="keyword">return</span> index <span class="keyword">if</span> target &lt;= n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> nums.length</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(N)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Search-Insert-Position&quot;&gt;&lt;a href=&quot;#Search-Insert-Position&quot; class=&quot;headerlink&quot; title=&quot;Search Insert Position&quot;&gt;&lt;/a&gt;Search Insert Positi
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Find First and Last Position of Element in Sorted Array</title>
    <link href="http://jack0pan.github.io/2018/03/17/Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://jack0pan.github.io/2018/03/17/Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2018-03-17T13:03:20.000Z</published>
    <updated>2018-09-25T15:00:13.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="Find First and Last Position of Element in Sorted Array"></a>Find First and Last Position of Element in Sorted Array</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>If the target is not found in the array, return [-1, -1].</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>先找左边的起点，再找右边的终点，在找的时候都用二分查找。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; target</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_range</span><span class="params">(nums, target)</span></span></span><br><span class="line">  left = search_index(nums, target, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> left == nums.length <span class="keyword">or</span> nums[left] != target</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  right = search_index(nums, target, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">return</span> [left, right - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_index</span><span class="params">(nums, target, left)</span></span></span><br><span class="line">  i, j = <span class="number">0</span>, nums.length</span><br><span class="line">  <span class="keyword">while</span> i &lt; j</span><br><span class="line">    m = (i + j) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[m] &gt; target <span class="keyword">or</span> (left <span class="keyword">and</span> target == nums[m])</span><br><span class="line">      j = m</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      i = m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>时间复杂度：<code>O(logN)</code></li><li>空间复杂度：<code>O(1)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Find-First-and-Last-Position-of-Element-in-Sorted-Array&quot;&gt;&lt;a href=&quot;#Find-First-and-Last-Position-of-Element-in-Sorted-Array&quot; class=&quot;h
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://jack0pan.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
